// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const convert = dart_sdk.convert;
  const _internal = dart_sdk._internal;
  const html = dart_sdk.html;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const math = dart_sdk.math;
  const developer = dart_sdk.developer;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const framework = flutter_sdk.src__widgets__framework;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const colors = flutter_sdk.src__material__colors;
  const elevated_button_theme = flutter_sdk.src__material__elevated_button_theme;
  const elevated_button = flutter_sdk.src__material__elevated_button;
  const rounded_rectangle_border = flutter_sdk.src__painting__rounded_rectangle_border;
  const border_radius = flutter_sdk.src__painting__border_radius;
  const navigator = flutter_sdk.src__widgets__navigator;
  const page = flutter_sdk.src__material__page;
  const scaffold = flutter_sdk.src__material__scaffold;
  const app_bar = flutter_sdk.src__material__app_bar;
  const text = flutter_sdk.src__widgets__text;
  const basic = flutter_sdk.src__widgets__basic;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const flex = flutter_sdk.src__rendering__flex;
  const text_style = flutter_sdk.src__painting__text_style;
  const binding = flutter_sdk.src__widgets__binding;
  const plugin_registry = flutter_sdk.src__plugin_registry;
  const animation_controller = flutter_sdk.src__animation__animation_controller;
  const floating_action_button = flutter_sdk.src__material__floating_action_button;
  const icon = flutter_sdk.src__widgets__icon;
  const icons = flutter_sdk.src__material__icons;
  const ticker_provider = flutter_sdk.src__widgets__ticker_provider;
  const page_view = flutter_sdk.src__widgets__page_view;
  const curves = flutter_sdk.src__animation__curves;
  const image = flutter_sdk.src__widgets__image;
  const box_fit = flutter_sdk.src__painting__box_fit;
  const media_query = flutter_sdk.src__widgets__media_query;
  const icon_button = flutter_sdk.src__material__icon_button;
  const diagnostics = flutter_sdk.src__foundation__diagnostics;
  const assertions = flutter_sdk.src__foundation__assertions;
  const change_notifier = flutter_sdk.src__foundation__change_notifier;
  const editable_text = flutter_sdk.src__widgets__editable_text;
  const dialog = flutter_sdk.src__material__dialog;
  const text_button = flutter_sdk.src__material__text_button;
  const text_field = flutter_sdk.src__material__text_field;
  const input_decorator = flutter_sdk.src__material__input_decorator;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const list_tile = flutter_sdk.src__material__list_tile;
  const container = flutter_sdk.src__widgets__container;
  const alignment = flutter_sdk.src__painting__alignment;
  const checkbox_list_tile = flutter_sdk.src__material__checkbox_list_tile;
  const sliver = flutter_sdk.src__widgets__sliver;
  const layout_builder = flutter_sdk.src__widgets__layout_builder;
  const equality = flutter_sdk.src__equality;
  const value_listenable_builder = flutter_sdk.src__widgets__value_listenable_builder;
  const platform_channel = flutter_sdk.src__services__platform_channel;
  const message_codecs = flutter_sdk.src__services__message_codecs;
  const animation = flutter_sdk.src__animation__animation;
  const transitions = flutter_sdk.src__widgets__transitions;
  const vector_math_64 = flutter_sdk.vector_math_64;
  const string_scanner = flutter_sdk.src__string_scanner;
  const canonicalized_map = flutter_sdk.src__canonicalized_map;
  const span_exception = flutter_sdk.src__span_exception;
  const queue_list = flutter_sdk.src__queue_list;
  const serialization = flutter_sdk.src__foundation__serialization;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var flutter_bloc = Object.create(dart.library);
  var task_bloc = Object.create(dart.library);
  var main_page = Object.create(dart.library);
  var dio = Object.create(dart.library);
  var api_bloc = Object.create(dart.library);
  var gallery_screen = Object.create(dart.library);
  var shared_preferences_web = Object.create(dart.library);
  var bloc = Object.create(dart.library);
  var provider = Object.create(dart.library);
  var bloc_builder = Object.create(dart.library);
  var bloc_consumer = Object.create(dart.library);
  var bloc_listener = Object.create(dart.library);
  var bloc_provider = Object.create(dart.library);
  var bloc_selector = Object.create(dart.library);
  var multi_bloc_listener = Object.create(dart.library);
  var multi_bloc_provider = Object.create(dart.library);
  var multi_repository_provider = Object.create(dart.library);
  var repository_provider = Object.create(dart.library);
  var task_model = Object.create(dart.library);
  var shared_preferences = Object.create(dart.library);
  var create_card = Object.create(dart.library);
  var tasks_screen = Object.create(dart.library);
  var adapter = Object.create(dart.library);
  var cancel_token = Object.create(dart.library);
  var dio$ = Object.create(dart.library);
  var dio_exception = Object.create(dart.library);
  var dio_mixin = Object.create(dart.library);
  var form_data = Object.create(dart.library);
  var headers$ = Object.create(dart.library);
  var log = Object.create(dart.library);
  var multipart_file = Object.create(dart.library);
  var options$ = Object.create(dart.library);
  var parameter = Object.create(dart.library);
  var redirect_record = Object.create(dart.library);
  var response$ = Object.create(dart.library);
  var transformer = Object.create(dart.library);
  var background_transformer = Object.create(dart.library);
  var sync_transformer = Object.create(dart.library);
  var shared_preferences_platform_interface = Object.create(dart.library);
  var types = Object.create(dart.library);
  var bloc$ = Object.create(dart.library);
  var bloc_observer = Object.create(dart.library);
  var change = Object.create(dart.library);
  var cubit = Object.create(dart.library);
  var transition = Object.create(dart.library);
  var async_provider = Object.create(dart.library);
  var change_notifier_provider = Object.create(dart.library);
  var consumer = Object.create(dart.library);
  var listenable_provider = Object.create(dart.library);
  var provider$ = Object.create(dart.library);
  var proxy_provider = Object.create(dart.library);
  var reassemble_handler = Object.create(dart.library);
  var selector$ = Object.create(dart.library);
  var value_listenable_provider = Object.create(dart.library);
  var single_child_widget = Object.create(dart.library);
  var folding_cell = Object.create(dart.library);
  var edit_card = Object.create(dart.library);
  var browser_adapter = Object.create(dart.library);
  var dio_for_browser = Object.create(dart.library);
  var imply_content_type = Object.create(dart.library);
  var response_stream_handler = Object.create(dart.library);
  var browser_progress_stream = Object.create(dart.library);
  var utils = Object.create(dart.library);
  var http_parser = Object.create(dart.library);
  var browser_multipart_file = Object.create(dart.library);
  var compute = Object.create(dart.library);
  var plugin_platform_interface = Object.create(dart.library);
  var method_channel_shared_preferences = Object.create(dart.library);
  var nested = Object.create(dart.library);
  var widget = Object.create(dart.library);
  var authentication_challenge = Object.create(dart.library);
  var case_insensitive_map = Object.create(dart.library);
  var chunked_coding = Object.create(dart.library);
  var http_date = Object.create(dart.library);
  var media_type = Object.create(dart.library);
  var compute_web = Object.create(dart.library);
  var scan = Object.create(dart.library);
  var utils$ = Object.create(dart.library);
  var decoder = Object.create(dart.library);
  var encoder = Object.create(dart.library);
  var typed_data$ = Object.create(dart.library);
  var charcodes = Object.create(dart.library);
  var typed_queue = Object.create(dart.library);
  var typed_buffers = Object.create(dart.library);
  var typed_buffer = Object.create(dart.library);
  var $toString = dartx.toString;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $isEmpty = dartx.isEmpty;
  var $last = dartx.last;
  var $add = dartx.add;
  var $removeAt = dartx.removeAt;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $any = dartx.any;
  var $runtimeType = dartx.runtimeType;
  var $remove = dartx.remove;
  var $length = dartx.length;
  var $localStorage = dartx.localStorage;
  var $forEach = dartx.forEach;
  var $keys = dartx.keys;
  var $startsWith = dartx.startsWith;
  var $where = dartx.where;
  var $cast = dartx.cast;
  var $_equals = dartx._equals;
  var $isNotEmpty = dartx.isNotEmpty;
  var $containsKey = dartx.containsKey;
  var $clear = dartx.clear;
  var $addAll = dartx.addAll;
  var $substring = dartx.substring;
  var $first = dartx.first;
  var $codeUnits = dartx.codeUnits;
  var $codeUnitAt = dartx.codeUnitAt;
  var $toLowerCase = dartx.toLowerCase;
  var $ceil = dartx.ceil;
  var $sublist = dartx.sublist;
  var $removeWhere = dartx.removeWhere;
  var $replaceAll = dartx.replaceAll;
  var $padLeft = dartx.padLeft;
  var $trim = dartx.trim;
  var $join = dartx.join;
  var $split = dartx.split;
  var $toUpperCase = dartx.toUpperCase;
  var $contains = dartx.contains;
  var $hashCode = dartx.hashCode;
  var $endsWith = dartx.endsWith;
  var $expand = dartx.expand;
  var $responseType = dartx.responseType;
  var $onLoad = dartx.onLoad;
  var $response = dartx.response;
  var $asUint8List = dartx.asUint8List;
  var $responseHeaders = dartx.responseHeaders;
  var $responseUrl = dartx.responseUrl;
  var $onProgress = dartx.onProgress;
  var $upload = dartx.upload;
  var $onError = dartx.onError;
  var $onTimeout = dartx.onTimeout;
  var $readyState = dartx.readyState;
  var $reversed = dartx.reversed;
  var $indexOf = dartx.indexOf;
  var $replaceAllMapped = dartx.replaceAllMapped;
  var $toRadixString = dartx.toRadixString;
  var $setRange = dartx.setRange;
  var $fillRange = dartx.fillRange;
  var $rightShift = dartx['>>'];
  var $elementSizeInBytes = dartx.elementSizeInBytes;
  var $offsetInBytes = dartx.offsetInBytes;
  var $buffer = dartx.buffer;
  var $insertAll = dartx.insertAll;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T$.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.ListOfString()])))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T$.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    BlocProviderOfTaskBloc: () => (T$.BlocProviderOfTaskBloc = dart.constFn(bloc_provider.BlocProvider$(task_bloc.TaskBloc)))(),
    BuildContextToTaskBloc: () => (T$.BuildContextToTaskBloc = dart.constFn(dart.fnType(task_bloc.TaskBloc, [framework.BuildContext])))(),
    BlocProviderOfApiBloc: () => (T$.BlocProviderOfApiBloc = dart.constFn(bloc_provider.BlocProvider$(api_bloc.ApiBloc)))(),
    BuildContextToApiBloc: () => (T$.BuildContextToApiBloc = dart.constFn(dart.fnType(api_bloc.ApiBloc, [framework.BuildContext])))(),
    JSArrayOfSingleChildWidget: () => (T$.JSArrayOfSingleChildWidget = dart.constFn(_interceptors.JSArray$(nested.SingleChildWidget)))(),
    BuildContextToGalleryPage: () => (T$.BuildContextToGalleryPage = dart.constFn(dart.fnType(gallery_screen.GalleryPage, [framework.BuildContext])))(),
    BuildContextToMainScreen: () => (T$.BuildContextToMainScreen = dart.constFn(dart.fnType(main_page.MainScreen, [framework.BuildContext])))(),
    BlocBuilderOfApiBloc$String: () => (T$.BlocBuilderOfApiBloc$String = dart.constFn(bloc_builder.BlocBuilder$(api_bloc.ApiBloc, core.String)))(),
    JSArrayOfWidget: () => (T$.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    BuildContextAndStringToColumn: () => (T$.BuildContextAndStringToColumn = dart.constFn(dart.fnType(basic.Column, [framework.BuildContext, core.String])))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    JSArrayOfObjectN: () => (T$.JSArrayOfObjectN = dart.constFn(_interceptors.JSArray$(T$.ObjectN())))(),
    JSArrayOfCard: () => (T$.JSArrayOfCard = dart.constFn(_interceptors.JSArray$(task_model.Card)))(),
    ListOfCard: () => (T$.ListOfCard = dart.constFn(core.List$(task_model.Card)))(),
    ListOfCardToNull: () => (T$.ListOfCardToNull = dart.constFn(dart.fnType(core.Null, [T$.ListOfCard()])))(),
    MapOfString$dynamic: () => (T$.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    dynamicToCard: () => (T$.dynamicToCard = dart.constFn(dart.fnType(task_model.Card, [dart.dynamic])))(),
    JSArrayOfTask: () => (T$.JSArrayOfTask = dart.constFn(_interceptors.JSArray$(task_model.Task)))(),
    CardToMapOfString$dynamic: () => (T$.CardToMapOfString$dynamic = dart.constFn(dart.fnType(T$.MapOfString$dynamic(), [task_model.Card])))(),
    JSArrayOfStreamSubscription: () => (T$.JSArrayOfStreamSubscription = dart.constFn(_interceptors.JSArray$(async.StreamSubscription)))(),
    JSArrayOf_Handler: () => (T$.JSArrayOf_Handler = dart.constFn(_interceptors.JSArray$(bloc$._Handler)))(),
    JSArrayOf_Emitter: () => (T$.JSArrayOf_Emitter = dart.constFn(_interceptors.JSArray$(bloc$._Emitter)))(),
    _HandlerTobool: () => (T$._HandlerTobool = dart.constFn(dart.fnType(core.bool, [bloc$._Handler])))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    dynamicTobool: () => (T$.dynamicTobool = dart.constFn(dart.fnType(core.bool, [dart.dynamic])))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    VoidToFutureOfvoid: () => (T$.VoidToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [])))(),
    _EmitterToFutureOfvoid: () => (T$._EmitterToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [bloc$._Emitter])))(),
    StreamSubscriptionToFutureOfvoid: () => (T$.StreamSubscriptionToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [async.StreamSubscription])))(),
    dynamicToStream: () => (T$.dynamicToStream = dart.constFn(dart.fnType(async.Stream, [dart.dynamic])))(),
    StreamAndFnToStream: () => (T$.StreamAndFnToStream = dart.constFn(dart.fnType(async.Stream, [async.Stream, T$.dynamicToStream()])))(),
    BuildContextToCreateCardPage: () => (T$.BuildContextToCreateCardPage = dart.constFn(dart.fnType(create_card.CreateCardPage, [framework.BuildContext])))(),
    BuildContextAndintToCenter: () => (T$.BuildContextAndintToCenter = dart.constFn(dart.fnType(basic.Center, [framework.BuildContext, core.int])))(),
    MapOfString$Object: () => (T$.MapOfString$Object = dart.constFn(core.Map$(core.String, core.Object)))(),
    IdentityMapOfString$Object: () => (T$.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    StringTobool: () => (T$.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    ExpandoOfObject: () => (T$.ExpandoOfObject = dart.constFn(core.Expando$(core.Object)))(),
    StateStreamableN: () => (T$.StateStreamableN = dart.constFn(dart.nullable(bloc$.StateStreamable)))(),
    InheritedContextOfStateStreamableN: () => (T$.InheritedContextOfStateStreamableN = dart.constFn(provider$.InheritedContext$(T$.StateStreamableN())))(),
    InheritedContextOfStateStreamableNAndStateStreamableToFn: () => (T$.InheritedContextOfStateStreamableNAndStateStreamableToFn = dart.constFn(dart.fnType(T$.VoidTovoid(), [T$.InheritedContextOfStateStreamableN(), bloc$.StateStreamable])))(),
    dynamicTovoid: () => (T$.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    DiagnosticsPropertyOfbool: () => (T$.DiagnosticsPropertyOfbool = dart.constFn(diagnostics.DiagnosticsProperty$(core.bool)))(),
    BuildContextToWidget: () => (T$.BuildContextToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext])))(),
    TTovoid$1: () => (T$.TTovoid$1 = dart.constFn(dart.gFnType(T => [dart.void, [T]], T => [T$.ObjectN()])))(),
    IdentityMapOfString$dynamic: () => (T$.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    dynamicToTask: () => (T$.dynamicToTask = dart.constFn(dart.fnType(task_model.Task, [dart.dynamic])))(),
    TaskToMapOfString$dynamic: () => (T$.TaskToMapOfString$dynamic = dart.constFn(dart.fnType(T$.MapOfString$dynamic(), [task_model.Task])))(),
    CompleterOfSharedPreferences: () => (T$.CompleterOfSharedPreferences = dart.constFn(async.Completer$(shared_preferences.SharedPreferences)))(),
    LinkedHashSetOfString: () => (T$.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    boolN: () => (T$.boolN = dart.constFn(dart.nullable(core.bool)))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    doubleN: () => (T$.doubleN = dart.constFn(dart.nullable(core.double)))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    ListN: () => (T$.ListN = dart.constFn(dart.nullable(core.List)))(),
    ListNOfString: () => (T$.ListNOfString = dart.constFn(dart.nullable(T$.ListOfString())))(),
    MapEntryOfString$Object: () => (T$.MapEntryOfString$Object = dart.constFn(core.MapEntry$(core.String, core.Object)))(),
    StringAndObjectToMapEntryOfString$Object: () => (T$.StringAndObjectToMapEntryOfString$Object = dart.constFn(dart.fnType(T$.MapEntryOfString$Object(), [core.String, core.Object])))(),
    BuildContextToAlertDialog: () => (T$.BuildContextToAlertDialog = dart.constFn(dart.fnType(dialog.AlertDialog, [framework.BuildContext])))(),
    StringTovoid: () => (T$.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    BuildContextAndintToListTile: () => (T$.BuildContextAndintToListTile = dart.constFn(dart.fnType(list_tile.ListTile, [framework.BuildContext, core.int])))(),
    BlocBuilderOfTaskBloc$TaskState: () => (T$.BlocBuilderOfTaskBloc$TaskState = dart.constFn(bloc_builder.BlocBuilder$(task_bloc.TaskBloc, task_bloc.TaskState)))(),
    BuildContextAndintToSimpleFoldingCell: () => (T$.BuildContextAndintToSimpleFoldingCell = dart.constFn(dart.fnType(widget.SimpleFoldingCell, [framework.BuildContext, core.int])))(),
    BuildContextAndTaskStateToContainer: () => (T$.BuildContextAndTaskStateToContainer = dart.constFn(dart.fnType(container.Container, [framework.BuildContext, task_bloc.TaskState])))(),
    BuildContextToContainer: () => (T$.BuildContextToContainer = dart.constFn(dart.fnType(container.Container, [framework.BuildContext])))(),
    boolNTovoid: () => (T$.boolNTovoid = dart.constFn(dart.fnType(dart.void, [T$.boolN()])))(),
    BuildContextAndintToCheckboxListTile: () => (T$.BuildContextAndintToCheckboxListTile = dart.constFn(dart.fnType(checkbox_list_tile.CheckboxListTile, [framework.BuildContext, core.int])))(),
    BuildContextToEditCardPage: () => (T$.BuildContextToEditCardPage = dart.constFn(dart.fnType(edit_card.EditCardPage, [framework.BuildContext])))(),
    IdentityMapOfString$ListOfString: () => (T$.IdentityMapOfString$ListOfString = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ListOfString())))(),
    StreamOfUint8List: () => (T$.StreamOfUint8List = dart.constFn(async.Stream$(typed_data.Uint8List)))(),
    CompleterOfDioException: () => (T$.CompleterOfDioException = dart.constFn(async.Completer$(dio_exception.DioException)))(),
    VoidToString: () => (T$.VoidToString = dart.constFn(dart.fnType(core.String, [])))(),
    FutureOfInterceptorState: () => (T$.FutureOfInterceptorState = dart.constFn(async.Future$(dio_mixin.InterceptorState)))(),
    VoidToFutureOfInterceptorState: () => (T$.VoidToFutureOfInterceptorState = dart.constFn(dart.fnType(T$.FutureOfInterceptorState(), [])))(),
    dynamicToObject: () => (T$.dynamicToObject = dart.constFn(dart.fnType(core.Object, [dart.dynamic])))(),
    dynamicToFutureOr: () => (T$.dynamicToFutureOr = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))(),
    RequestOptionsAndRequestInterceptorHandlerTovoid: () => (T$.RequestOptionsAndRequestInterceptorHandlerTovoid = dart.constFn(dart.fnType(dart.void, [options$.RequestOptions, dio_mixin.RequestInterceptorHandler])))(),
    FnToFn: () => (T$.FnToFn = dart.constFn(dart.fnType(T$.dynamicToFutureOr(), [T$.RequestOptionsAndRequestInterceptorHandlerTovoid()])))(),
    ResponseAndResponseInterceptorHandlerTovoid: () => (T$.ResponseAndResponseInterceptorHandlerTovoid = dart.constFn(dart.fnType(dart.void, [response$.Response, dio_mixin.ResponseInterceptorHandler])))(),
    FnToFn$1: () => (T$.FnToFn$1 = dart.constFn(dart.fnType(T$.dynamicToFutureOr(), [T$.ResponseAndResponseInterceptorHandlerTovoid()])))(),
    InterceptorStateOfDioException: () => (T$.InterceptorStateOfDioException = dart.constFn(dio_mixin.InterceptorState$(dio_exception.DioException)))(),
    dynamicToFuture: () => (T$.dynamicToFuture = dart.constFn(dart.fnType(async.Future, [dart.dynamic])))(),
    ObjectToFutureOr: () => (T$.ObjectToFutureOr = dart.constFn(dart.fnType(dart.dynamic, [core.Object])))(),
    DioExceptionAndErrorInterceptorHandlerTovoid: () => (T$.DioExceptionAndErrorInterceptorHandlerTovoid = dart.constFn(dart.fnType(dart.void, [dio_exception.DioException, dio_mixin.ErrorInterceptorHandler])))(),
    FnToFn$2: () => (T$.FnToFn$2 = dart.constFn(dart.fnType(T$.ObjectToFutureOr(), [T$.DioExceptionAndErrorInterceptorHandlerTovoid()])))(),
    InterceptorStateOfRequestOptions: () => (T$.InterceptorStateOfRequestOptions = dart.constFn(dio_mixin.InterceptorState$(options$.RequestOptions)))(),
    VoidToInterceptorStateOfRequestOptions: () => (T$.VoidToInterceptorStateOfRequestOptions = dart.constFn(dart.fnType(T$.InterceptorStateOfRequestOptions(), [])))(),
    RequestOptionsAndRequestInterceptorHandlerToFutureOfvoid: () => (T$.RequestOptionsAndRequestInterceptorHandlerToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [options$.RequestOptions, dio_mixin.RequestInterceptorHandler])))(),
    JSArrayOfRedirectRecord: () => (T$.JSArrayOfRedirectRecord = dart.constFn(_interceptors.JSArray$(redirect_record.RedirectRecord)))(),
    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),
    StreamOfListOfint: () => (T$.StreamOfListOfint = dart.constFn(async.Stream$(T$.ListOfint())))(),
    JSArrayOfListOfint: () => (T$.JSArrayOfListOfint = dart.constFn(_interceptors.JSArray$(T$.ListOfint())))(),
    StreamNOfUint8List: () => (T$.StreamNOfUint8List = dart.constFn(dart.nullable(T$.StreamOfUint8List())))(),
    DioExceptionToNever: () => (T$.DioExceptionToNever = dart.constFn(dart.fnType(dart.Never, [dio_exception.DioException])))(),
    CompleterOfInterceptorState: () => (T$.CompleterOfInterceptorState = dart.constFn(async.Completer$(dio_mixin.InterceptorState)))(),
    InterceptorStateOfResponse: () => (T$.InterceptorStateOfResponse = dart.constFn(dio_mixin.InterceptorState$(response$.Response)))(),
    InterceptorN: () => (T$.InterceptorN = dart.constFn(dart.nullable(dio_mixin.Interceptor)))(),
    JSArrayOfInterceptorN: () => (T$.JSArrayOfInterceptorN = dart.constFn(_interceptors.JSArray$(T$.InterceptorN())))(),
    InterceptorNTobool: () => (T$.InterceptorNTobool = dart.constFn(dart.fnType(core.bool, [T$.InterceptorN()])))(),
    _TaskQueueOfRequestOptions$RequestInterceptorHandler: () => (T$._TaskQueueOfRequestOptions$RequestInterceptorHandler = dart.constFn(dio_mixin._TaskQueue$(options$.RequestOptions, dio_mixin.RequestInterceptorHandler)))(),
    _TaskQueueOfResponse$ResponseInterceptorHandler: () => (T$._TaskQueueOfResponse$ResponseInterceptorHandler = dart.constFn(dio_mixin._TaskQueue$(response$.Response, dio_mixin.ResponseInterceptorHandler)))(),
    _TaskQueueOfDioException$ErrorInterceptorHandler: () => (T$._TaskQueueOfDioException$ErrorInterceptorHandler = dart.constFn(dio_mixin._TaskQueue$(dio_exception.DioException, dio_mixin.ErrorInterceptorHandler)))(),
    MapEntryOfString$String: () => (T$.MapEntryOfString$String = dart.constFn(core.MapEntry$(core.String, core.String)))(),
    JSArrayOfMapEntryOfString$String: () => (T$.JSArrayOfMapEntryOfString$String = dart.constFn(_interceptors.JSArray$(T$.MapEntryOfString$String())))(),
    MapEntryOfString$MultipartFile: () => (T$.MapEntryOfString$MultipartFile = dart.constFn(core.MapEntry$(core.String, multipart_file.MultipartFile)))(),
    JSArrayOfMapEntryOfString$MultipartFile: () => (T$.JSArrayOfMapEntryOfString$MultipartFile = dart.constFn(_interceptors.JSArray$(T$.MapEntryOfString$MultipartFile())))(),
    StringAndObjectNToNull: () => (T$.StringAndObjectNToNull = dart.constFn(dart.fnType(core.Null, [core.String, T$.ObjectN()])))(),
    StringAndListOfStringTovoid: () => (T$.StringAndListOfStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T$.ListOfString()])))(),
    StreamControllerOfUint8List: () => (T$.StreamControllerOfUint8List = dart.constFn(async.StreamController$(typed_data.Uint8List)))(),
    voidToNull: () => (T$.voidToNull = dart.constFn(dart.fnType(core.Null, [dart.void])))(),
    FutureOfUint8List: () => (T$.FutureOfUint8List = dart.constFn(async.Future$(typed_data.Uint8List)))(),
    Uint8ListAndUint8ListToUint8List: () => (T$.Uint8ListAndUint8ListToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [typed_data.Uint8List, typed_data.Uint8List])))(),
    VoidToFutureOfUint8List: () => (T$.VoidToFutureOfUint8List = dart.constFn(dart.fnType(T$.FutureOfUint8List(), [])))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    MapEntryOfString$ListOfString: () => (T$.MapEntryOfString$ListOfString = dart.constFn(core.MapEntry$(core.String, T$.ListOfString())))(),
    StringAndListOfStringToMapEntryOfString$ListOfString: () => (T$.StringAndListOfStringToMapEntryOfString$ListOfString = dart.constFn(dart.fnType(T$.MapEntryOfString$ListOfString(), [core.String, T$.ListOfString()])))(),
    dynamicToString: () => (T$.dynamicToString = dart.constFn(dart.fnType(core.String, [dart.dynamic])))(),
    ObjectNTovoid: () => (T$.ObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T$.ObjectN()])))(),
    StringAnddynamicTovoid: () => (T$.StringAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.String, dart.dynamic])))(),
    VoidToStreamOfListOfint: () => (T$.VoidToStreamOfListOfint = dart.constFn(dart.fnType(T$.StreamOfListOfint(), [])))(),
    IdentityMapOfString$String: () => (T$.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    LinkedHashMapOfString$dynamic: () => (T$.LinkedHashMapOfString$dynamic = dart.constFn(collection.LinkedHashMap$(core.String, dart.dynamic)))(),
    intNTobool: () => (T$.intNTobool = dart.constFn(dart.fnType(core.bool, [T$.intN()])))(),
    StringToString: () => (T$.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    StringAndObjectNToString: () => (T$.StringAndObjectNToString = dart.constFn(dart.fnType(core.String, [core.String, T$.ObjectN()])))(),
    StringToFutureOr: () => (T$.StringToFutureOr = dart.constFn(dart.fnType(dart.dynamic, [core.String])))(),
    ObjectNAndObjectNToObjectN: () => (T$.ObjectNAndObjectNToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [T$.ObjectN(), T$.ObjectN()])))(),
    ObjectNAndObjectNToNObjectN: () => (T$.ObjectNAndObjectNToNObjectN = dart.constFn(dart.nullable(T$.ObjectNAndObjectNToObjectN())))(),
    String__Todynamic: () => (T$.String__Todynamic = dart.constFn(dart.fnType(dart.dynamic, [core.String], {reviver: T$.ObjectNAndObjectNToNObjectN()}, {})))(),
    ObjectNToObjectN: () => (T$.ObjectNToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [T$.ObjectN()])))(),
    ObjectNToNObjectN: () => (T$.ObjectNToNObjectN = dart.constFn(dart.nullable(T$.ObjectNToObjectN())))(),
    ObjectN__ToString: () => (T$.ObjectN__ToString = dart.constFn(dart.fnType(core.String, [T$.ObjectN()], {toEncodable: T$.ObjectNToNObjectN()}, {})))(),
    Uint8ListToUint8List: () => (T$.Uint8ListToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [typed_data.Uint8List])))(),
    _EmptyStreamOfUint8List: () => (T$._EmptyStreamOfUint8List = dart.constFn(async._EmptyStream$(typed_data.Uint8List)))(),
    LinkedHashMapOfString$Object: () => (T$.LinkedHashMapOfString$Object = dart.constFn(collection.LinkedHashMap$(core.String, core.Object)))(),
    StringAndObjectTobool: () => (T$.StringAndObjectTobool = dart.constFn(dart.fnType(core.bool, [core.String, core.Object])))(),
    JSArrayOfFutureOfvoid: () => (T$.JSArrayOfFutureOfvoid = dart.constFn(_interceptors.JSArray$(T$.FutureOfvoid())))(),
    ListOfvoid: () => (T$.ListOfvoid = dart.constFn(core.List$(dart.void)))(),
    ListOfvoidToNull: () => (T$.ListOfvoidToNull = dart.constFn(dart.fnType(core.Null, [T$.ListOfvoid()])))(),
    FutureNOfvoid: () => (T$.FutureNOfvoid = dart.constFn(dart.nullable(T$.FutureOfvoid())))(),
    VoidToFutureNOfvoid: () => (T$.VoidToFutureNOfvoid = dart.constFn(dart.fnType(T$.FutureNOfvoid(), [])))(),
    BlocOverridesN: () => (T$.BlocOverridesN = dart.constFn(dart.nullable(bloc$.BlocOverrides)))(),
    LinkedMapOfObjectN$ObjectN: () => (T$.LinkedMapOfObjectN$ObjectN = dart.constFn(_js_helper.LinkedMap$(T$.ObjectN(), T$.ObjectN())))(),
    CompleterOfvoid: () => (T$.CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))(),
    VoidToFutureOrOfvoid: () => (T$.VoidToFutureOrOfvoid = dart.constFn(dart.fnType(dart.void, [])))(),
    JSArrayOfVoidToFutureOrOfvoid: () => (T$.JSArrayOfVoidToFutureOrOfvoid = dart.constFn(_interceptors.JSArray$(T$.VoidToFutureOrOfvoid())))(),
    FutureOrNOfvoidTovoid: () => (T$.FutureOrNOfvoidTovoid = dart.constFn(dart.fnType(dart.void, [], [dart.void])))(),
    FunctionN: () => (T$.FunctionN = dart.constFn(dart.nullable(core.Function)))(),
    ZoneSpecificationN: () => (T$.ZoneSpecificationN = dart.constFn(dart.nullable(async.ZoneSpecification)))(),
    MapOfObjectN$ObjectN: () => (T$.MapOfObjectN$ObjectN = dart.constFn(core.Map$(T$.ObjectN(), T$.ObjectN())))(),
    MapNOfObjectN$ObjectN: () => (T$.MapNOfObjectN$ObjectN = dart.constFn(dart.nullable(T$.MapOfObjectN$ObjectN())))(),
    Fn__ToR: () => (T$.Fn__ToR = dart.constFn(dart.gFnType(R => [R, [dart.fnType(R, [])], {onError: T$.FunctionN(), zoneSpecification: T$.ZoneSpecificationN(), zoneValues: T$.MapNOfObjectN$ObjectN()}, {}], R => [T$.ObjectN()])))(),
    ObjectNToNull: () => (T$.ObjectNToNull = dart.constFn(dart.fnType(core.Null, [T$.ObjectN()])))(),
    ChangeNotifierN: () => (T$.ChangeNotifierN = dart.constFn(dart.nullable(change_notifier.ChangeNotifier)))(),
    BuildContextAndChangeNotifierNTovoid: () => (T$.BuildContextAndChangeNotifierNTovoid = dart.constFn(dart.fnType(dart.void, [framework.BuildContext, T$.ChangeNotifierN()])))(),
    ListenableN: () => (T$.ListenableN = dart.constFn(dart.nullable(change_notifier.Listenable)))(),
    InheritedContextOfListenableN: () => (T$.InheritedContextOfListenableN = dart.constFn(provider$.InheritedContext$(T$.ListenableN())))(),
    InheritedContextOfListenableNAndListenableNToFn: () => (T$.InheritedContextOfListenableNAndListenableNToFn = dart.constFn(dart.fnType(T$.VoidTovoid(), [T$.InheritedContextOfListenableN(), T$.ListenableN()])))(),
    JSArrayOfPostEventCall: () => (T$.JSArrayOfPostEventCall = dart.constFn(_interceptors.JSArray$(provider$.PostEventCall)))(),
    IdentityMapOfString$ProviderNode: () => (T$.IdentityMapOfString$ProviderNode = dart.constFn(_js_helper.IdentityMap$(core.String, provider$.ProviderNode)))(),
    ElementTovoid: () => (T$.ElementTovoid = dart.constFn(dart.fnType(dart.void, [framework.Element])))(),
    _NestedHookElementN: () => (T$._NestedHookElementN = dart.constFn(dart.nullable(nested._NestedHookElement)))(),
    ElementTobool: () => (T$.ElementTobool = dart.constFn(dart.fnType(core.bool, [framework.Element])))(),
    LinkedHashMapOfString$ProviderNode: () => (T$.LinkedHashMapOfString$ProviderNode = dart.constFn(collection.LinkedHashMap$(core.String, provider$.ProviderNode)))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    JSArrayOfDiagnosticsNode: () => (T$.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    DefaultEqualityOfNever: () => (T$.DefaultEqualityOfNever = dart.constFn(equality.DefaultEquality$(dart.Never)))(),
    FnToR: () => (T$.FnToR = dart.constFn(dart.gFnType((T, R) => {
      var __t$TToR = () => (__t$TToR = dart.constFn(dart.fnType(R, [T])))();
      return [R, [__t$TToR()]];
    }, (T, R) => {
      var __t$TToR = () => (__t$TToR = dart.constFn(dart.fnType(R, [T])))();
      return [T$.ObjectN(), T$.ObjectN()];
    })))(),
    VoidToT: () => (T$.VoidToT = dart.constFn(dart.gFnType(T => [T, []], T => [T$.ObjectN()])))(),
    JSArrayOfintN: () => (T$.JSArrayOfintN = dart.constFn(_interceptors.JSArray$(T$.intN())))(),
    WidgetN: () => (T$.WidgetN = dart.constFn(dart.nullable(framework.Widget)))(),
    ListOfTask: () => (T$.ListOfTask = dart.constFn(core.List$(task_model.Task)))(),
    LinkedHashSetOfHttpRequest: () => (T$.LinkedHashSetOfHttpRequest = dart.constFn(collection.LinkedHashSet$(html.HttpRequest)))(),
    CompleterOfResponseBody: () => (T$.CompleterOfResponseBody = dart.constFn(async.Completer$(adapter.ResponseBody)))(),
    StringAndStringToMapEntryOfString$ListOfString: () => (T$.StringAndStringToMapEntryOfString$ListOfString = dart.constFn(dart.fnType(T$.MapEntryOfString$ListOfString(), [core.String, core.String])))(),
    ProgressEventToNull: () => (T$.ProgressEventToNull = dart.constFn(dart.fnType(core.Null, [html.ProgressEvent])))(),
    ProgressEventTovoid: () => (T$.ProgressEventTovoid = dart.constFn(dart.fnType(dart.void, [html.ProgressEvent])))(),
    CompleterOfUint8List: () => (T$.CompleterOfUint8List = dart.constFn(async.Completer$(typed_data.Uint8List)))(),
    ListOfintTovoid: () => (T$.ListOfintTovoid = dart.constFn(dart.fnType(dart.void, [T$.ListOfint()])))(),
    ListOfMap: () => (T$.ListOfMap = dart.constFn(core.List$(core.Map)))(),
    Uint8ListTovoid: () => (T$.Uint8ListTovoid = dart.constFn(dart.fnType(dart.void, [typed_data.Uint8List])))(),
    StackTraceN: () => (T$.StackTraceN = dart.constFn(dart.nullable(core.StackTrace)))(),
    dynamicAnddynamicToNull: () => (T$.dynamicAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, dart.dynamic])))(),
    ObjectAndStackTraceNTovoid: () => (T$.ObjectAndStackTraceNTovoid = dart.constFn(dart.fnType(dart.void, [core.Object], [T$.StackTraceN()])))(),
    EventSinkOfUint8List: () => (T$.EventSinkOfUint8List = dart.constFn(async.EventSink$(typed_data.Uint8List)))(),
    String__ToString: () => (T$.String__ToString = dart.constFn(dart.fnType(core.String, [core.String], {encoding: convert.Encoding}, {})))(),
    dynamicAnddynamicTovoid: () => (T$.dynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, dart.dynamic])))(),
    ObjectNAndStringTovoid: () => (T$.ObjectNAndStringTovoid = dart.constFn(dart.fnType(dart.void, [T$.ObjectN(), core.String])))(),
    StringAndStringTobool: () => (T$.StringAndStringTobool = dart.constFn(dart.fnType(core.bool, [core.String, core.String])))(),
    StringToint: () => (T$.StringToint = dart.constFn(dart.fnType(core.int, [core.String])))(),
    FnAndQ__ToFutureOfR: () => (T$.FnAndQ__ToFutureOfR = dart.constFn(dart.gFnType((Q, R) => [async.Future$(R), [dart.fnType(async.FutureOr$(R), [Q]), Q], {debugLabel: T$.StringN()}, {}], (Q, R) => [T$.ObjectN(), T$.ObjectN()])))(),
    LinkedHashSetOf_NestedHookElement: () => (T$.LinkedHashSetOf_NestedHookElement = dart.constFn(collection.LinkedHashSet$(nested._NestedHookElement)))(),
    SingleChildStateOfSingleChildStatefulWidget: () => (T$.SingleChildStateOfSingleChildStatefulWidget = dart.constFn(nested.SingleChildState$(nested.SingleChildStatefulWidget)))(),
    SingleChildStateMixinOfStatefulWidget: () => (T$.SingleChildStateMixinOfStatefulWidget = dart.constFn(nested.SingleChildStateMixin$(framework.StatefulWidget)))(),
    AnimationStatusTovoid: () => (T$.AnimationStatusTovoid = dart.constFn(dart.fnType(dart.void, [animation.AnimationStatus])))(),
    BuildContextAndWidgetNToPadding: () => (T$.BuildContextAndWidgetNToPadding = dart.constFn(dart.fnType(basic.Padding, [framework.BuildContext, T$.WidgetN()])))(),
    UnmodifiableMapViewOfString$String: () => (T$.UnmodifiableMapViewOfString$String = dart.constFn(collection.UnmodifiableMapView$(core.String, core.String)))(),
    CaseInsensitiveMapOfString: () => (T$.CaseInsensitiveMapOfString = dart.constFn(case_insensitive_map.CaseInsensitiveMap$(core.String)))(),
    ListOfAuthenticationChallenge: () => (T$.ListOfAuthenticationChallenge = dart.constFn(core.List$(authentication_challenge.AuthenticationChallenge)))(),
    VoidToAuthenticationChallenge: () => (T$.VoidToAuthenticationChallenge = dart.constFn(dart.fnType(authentication_challenge.AuthenticationChallenge, [])))(),
    VoidToListOfAuthenticationChallenge: () => (T$.VoidToListOfAuthenticationChallenge = dart.constFn(dart.fnType(T$.ListOfAuthenticationChallenge(), [])))(),
    VoidToDateTime: () => (T$.VoidToDateTime = dart.constFn(dart.fnType(core.DateTime, [])))(),
    VoidToMediaType: () => (T$.VoidToMediaType = dart.constFn(dart.fnType(media_type.MediaType, [])))(),
    LinkedHashMapOfString$String: () => (T$.LinkedHashMapOfString$String = dart.constFn(collection.LinkedHashMap$(core.String, core.String)))(),
    MatchToString: () => (T$.MatchToString = dart.constFn(dart.fnType(core.String, [core.Match])))(),
    StringAndStringTovoid: () => (T$.StringAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.String])))(),
    StreamControllerOfListOfint: () => (T$.StreamControllerOfListOfint = dart.constFn(async.StreamController$(T$.ListOfint())))(),
    SinkOfListOfint: () => (T$.SinkOfListOfint = dart.constFn(core.Sink$(T$.ListOfint())))(),
    intAndStringTovoid: () => (T$.intAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.String])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T$.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 16,
        [EdgeInsets_right]: 16,
        [EdgeInsets_top]: 16,
        [EdgeInsets_left]: 16
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: bloc$._DefaultBlocObserver.prototype
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: bloc$._FlatMapStreamTransformer.prototype
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: core.Object.prototype
      });
    },
    get C5() {
      return C[5] = dart.fn(bloc_provider.BlocProvider._startListening, T$.InheritedContextOfStateStreamableNAndStateStreamableToFn());
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: dio_exception.DioExceptionType.prototype,
        [_Enum__name]: "connectionTimeout",
        [_Enum_index]: 0
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: dio_exception.DioExceptionType.prototype,
        [_Enum__name]: "sendTimeout",
        [_Enum_index]: 1
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: dio_exception.DioExceptionType.prototype,
        [_Enum__name]: "receiveTimeout",
        [_Enum_index]: 2
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: dio_exception.DioExceptionType.prototype,
        [_Enum__name]: "badCertificate",
        [_Enum_index]: 3
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: dio_exception.DioExceptionType.prototype,
        [_Enum__name]: "badResponse",
        [_Enum_index]: 4
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: dio_exception.DioExceptionType.prototype,
        [_Enum__name]: "cancel",
        [_Enum_index]: 5
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: dio_exception.DioExceptionType.prototype,
        [_Enum__name]: "connectionError",
        [_Enum_index]: 6
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: dio_exception.DioExceptionType.prototype,
        [_Enum__name]: "unknown",
        [_Enum_index]: 7
      });
    },
    get C6() {
      return C[6] = dart.constList([C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14], dio_exception.DioExceptionType);
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: dio_mixin.InterceptorResultType.prototype,
        [_Enum__name]: "next",
        [_Enum_index]: 0
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: dio_mixin.InterceptorResultType.prototype,
        [_Enum__name]: "resolve",
        [_Enum_index]: 1
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: dio_mixin.InterceptorResultType.prototype,
        [_Enum__name]: "resolveCallFollowing",
        [_Enum_index]: 2
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: dio_mixin.InterceptorResultType.prototype,
        [_Enum__name]: "reject",
        [_Enum_index]: 3
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: dio_mixin.InterceptorResultType.prototype,
        [_Enum__name]: "rejectCallFollowing",
        [_Enum_index]: 4
      });
    },
    get C15() {
      return C[15] = dart.constList([C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20], dio_mixin.InterceptorResultType);
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: imply_content_type.ImplyContentTypeInterceptor.prototype
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: options$.ListFormat.prototype,
        [_Enum__name]: "multi",
        [_Enum_index]: 4
      });
    },
    get C23() {
      return C[23] = dart.fn(log._debugPrint, T$.ObjectNTovoid());
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: options$.ResponseType.prototype,
        [_Enum__name]: "json",
        [_Enum_index]: 0
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: options$.ResponseType.prototype,
        [_Enum__name]: "stream",
        [_Enum_index]: 1
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: options$.ResponseType.prototype,
        [_Enum__name]: "plain",
        [_Enum_index]: 2
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: options$.ResponseType.prototype,
        [_Enum__name]: "bytes",
        [_Enum_index]: 3
      });
    },
    get C24() {
      return C[24] = dart.constList([C[25] || CT.C25, C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28], options$.ResponseType);
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: options$.ListFormat.prototype,
        [_Enum__name]: "csv",
        [_Enum_index]: 0
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: options$.ListFormat.prototype,
        [_Enum__name]: "ssv",
        [_Enum_index]: 1
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: options$.ListFormat.prototype,
        [_Enum__name]: "tsv",
        [_Enum_index]: 2
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: options$.ListFormat.prototype,
        [_Enum__name]: "pipes",
        [_Enum_index]: 3
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: options$.ListFormat.prototype,
        [_Enum__name]: "multiCompatible",
        [_Enum_index]: 5
      });
    },
    get C29() {
      return C[29] = dart.constList([C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33, C[22] || CT.C22, C[34] || CT.C34], options$.ListFormat);
    },
    get C35() {
      return C[35] = dart.fn(options$._defaultValidateStatus, T$.intNTobool());
    },
    get C36() {
      return C[36] = dart.constList([], redirect_record.RedirectRecord);
    },
    get C37() {
      return C[37] = dart.fn(background_transformer._decodeJson, T$.StringToFutureOr());
    },
    get C38() {
      return C[38] = dart.fn(convert.jsonDecode, T$.String__Todynamic());
    },
    get C39() {
      return C[39] = dart.fn(convert.jsonEncode, T$.ObjectN__ToString());
    },
    get C40() {
      return C[40] = dart.fn(async.runZoned, T$.Fn__ToR());
    },
    get C41() {
      return C[41] = dart.fn(change_notifier_provider.ChangeNotifierProvider._dispose, T$.BuildContextAndChangeNotifierNTovoid());
    },
    get C42() {
      return C[42] = dart.fn(listenable_provider.ListenableProvider._startListening, T$.InheritedContextOfListenableNAndListenableNToFn());
    },
    get C43() {
      return C[43] = dart.constList([], core.String);
    },
    get C44() {
      return C[44] = dart.constMap(T$.ObjectN(), T$.ObjectN(), []);
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: T$.DefaultEqualityOfNever().prototype
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: equality.DeepCollectionEquality.prototype,
        [DeepCollectionEquality__unordered]: false,
        [DeepCollectionEquality__base]: C[46] || CT.C46
      });
    },
    get C47() {
      return C[47] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#transformer', __Dio_transformer$));
    },
    get C48() {
      return C[48] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#httpClientAdapter', __Dio_httpClientAdapter$));
    },
    get C49() {
      return C[49] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#options', __Dio_options$));
    },
    get C50() {
      return C[50] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#transformer=', __Dio_transformer_));
    },
    get C51() {
      return C[51] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#httpClientAdapter=', __Dio_httpClientAdapter_));
    },
    get C52() {
      return C[52] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#options=', __Dio_options_));
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: convert.Latin1Codec.prototype,
        [Latin1Codec__allowInvalid]: false
      });
    },
    get C54() {
      return C[54] = dart.fn(core.Uri.encodeQueryComponent, T$.String__ToString());
    },
    get C55() {
      return C[55] = dart.fn(compute_web.compute, T$.FnAndQ__ToFutureOfR());
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[58] || CT.C58
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[57] || CT.C57,
        [MethodChannel_name]: "plugins.flutter.io/shared_preferences"
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 100,
        [OffsetBase__dx]: 100
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 5,
        [EdgeInsets_right]: 20,
        [EdgeInsets_top]: 10,
        [EdgeInsets_left]: 20
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 500000
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: chunked_coding.ChunkedCodingCodec.prototype
      });
    },
    get C63() {
      return C[63] = dart.constList(["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], core.String);
    },
    get C64() {
      return C[64] = dart.constList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], core.String);
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "boundary"
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "size"
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "size before LF"
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "body"
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "body before CR"
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "body before LF"
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "end before CR"
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "end before LF"
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: decoder._State.prototype,
        [_State__name]: "end"
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: decoder.ChunkedCodingDecoder.prototype
      });
    },
    get C75() {
      return C[75] = dart.constList([], core.int);
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: encoder.ChunkedCodingEncoder.prototype
      });
    },
    get C77() {
      return C[77] = dart.const(new _js_helper.PrivateSymbol.new('_add', _add));
    },
    get C78() {
      return C[78] = dart.const(new _js_helper.PrivateSymbol.new('_head', _head$));
    },
    get C79() {
      return C[79] = dart.const(new _js_helper.PrivateSymbol.new('_writeToList', _writeToList));
    },
    get C80() {
      return C[80] = dart.const(new _js_helper.PrivateSymbol.new('_grow', _grow));
    },
    get C81() {
      return C[81] = dart.const(new _js_helper.PrivateSymbol.new('_preGrow', _preGrow));
    },
    get C82() {
      return C[82] = dart.const(new _js_helper.PrivateSymbol.new('_table', _table$));
    },
    get C83() {
      return C[83] = dart.const(new _js_helper.PrivateSymbol.new('_tail', _tail$));
    },
    get C84() {
      return C[84] = dart.const(new _js_helper.PrivateSymbol.new('_head=', _head_));
    },
    get C85() {
      return C[85] = dart.const(new _js_helper.PrivateSymbol.new('_table=', _table_));
    },
    get C86() {
      return C[86] = dart.const(new _js_helper.PrivateSymbol.new('_tail=', _tail_));
    }
  }, false);
  var C = Array(87).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "package:flutter_app/bloc/task_bloc.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/bloc-8.1.4/lib/src/bloc.dart",
    "package:bloc/src/bloc.dart",
    "package:flutter_app/screens/main_page.dart",
    "package:bloc/src/cubit.dart",
    "file:///zapp/project/lib/bloc/api_bloc.dart",
    "file:///zapp/project/lib/screens/gallery_screen.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart",
    "package:plugin_platform_interface/plugin_platform_interface.dart",
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart",
    "package:shared_preferences_web/shared_preferences_web.dart",
    "package:flutter_bloc/src/bloc_builder.dart",
    "package:flutter_bloc/src/bloc_consumer.dart",
    "package:nested/nested.dart",
    "package:flutter_bloc/src/bloc_listener.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/flutter_bloc-8.1.6/lib/src/bloc_listener.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/flutter_bloc-8.1.6/lib/src/bloc_provider.dart",
    "package:flutter_bloc/src/bloc_provider.dart",
    "package:flutter_bloc/src/bloc_selector.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/nested-1.0.0/lib/nested.dart",
    "package:provider/src/provider.dart",
    "package:flutter_bloc/src/multi_bloc_listener.dart",
    "package:flutter_bloc/src/multi_bloc_provider.dart",
    "package:flutter_bloc/src/multi_repository_provider.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.2/lib/src/provider.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.2/lib/src/inherited_provider.dart",
    "package:flutter_bloc/src/repository_provider.dart",
    "package:flutter_app/models/task_model.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences-2.2.2/lib/shared_preferences.dart",
    "package:shared_preferences/shared_preferences.dart",
    "package:flutter_app/screens/create_card.dart",
    "package:flutter_app/screens/tasks_screen.dart",
    "package:dio/src/adapter.dart",
    "package:dio/src/cancel_token.dart",
    "package:dio/src/dio.dart",
    "package:dio/src/dio_exception.dart",
    "package:dio/src/dio_mixin.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/interceptor.dart",
    "package:dio/src/form_data.dart",
    "package:dio/src/headers.dart",
    "package:dio/src/interceptors/log.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/interceptors/log.dart",
    "package:dio/src/multipart_file.dart",
    "package:dio/src/options.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/options.dart",
    "package:dio/src/parameter.dart",
    "package:dio/src/redirect_record.dart",
    "package:dio/src/response.dart",
    "package:dio/src/transformer.dart",
    "package:dio/src/transformers/sync_transformer.dart",
    "package:dio/src/transformers/background_transformer.dart",
    "package:shared_preferences_platform_interface/types.dart",
    "package:bloc/src/bloc_observer.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/bloc-8.1.4/lib/src/emitter.dart",
    "package:bloc/src/change.dart",
    "package:bloc/src/transition.dart",
    "package:provider/src/async_provider.dart",
    "package:provider/src/listenable_provider.dart",
    "package:provider/src/change_notifier_provider.dart",
    "package:provider/src/consumer.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.2/lib/src/deferred_inherited_provider.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.2/lib/src/devtool.dart",
    "package:provider/src/proxy_provider.dart",
    "package:provider/src/reassemble_handler.dart",
    "package:provider/src/selector.dart",
    "package:provider/src/value_listenable_provider.dart",
    "package:flutter_app/screens/edit_card.dart",
    "package:dio/src/adapters/browser_adapter.dart",
    "package:dio/src/dio/dio_for_browser.dart",
    "package:dio/src/interceptors/imply_content_type.dart",
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/folding_cell-1.0.2/lib/folding_cell/widget.dart",
    "package:folding_cell/folding_cell/widget.dart",
    "package:http_parser/src/authentication_challenge.dart",
    "package:http_parser/src/case_insensitive_map.dart",
    "package:http_parser/src/chunked_coding.dart",
    "package:http_parser/src/media_type.dart",
    "package:http_parser/src/chunked_coding/decoder.dart",
    "package:http_parser/src/chunked_coding/encoder.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/typed_data-1.3.2/lib/src/typed_queue.dart",
    "package:typed_data/src/typed_queue.dart",
    "package:typed_data/src/typed_buffer.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T$.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T$.ListOfStringTodynamic().as(C[0] || CT.C0)(T$.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T$.dynamicToNull()));
      }
    }, T$.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T$.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T$.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T$.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T$.VoidToNull())});
    });
  };
  main.MyApp = class MyApp extends framework.StatelessWidget {
    build(context) {
      return new multi_bloc_provider.MultiBlocProvider.new({providers: T$.JSArrayOfSingleChildWidget().of([new (T$.BlocProviderOfTaskBloc()).new({create: dart.fn(context => new task_bloc.TaskBloc.new(), T$.BuildContextToTaskBloc())}), new (T$.BlocProviderOfApiBloc()).new({create: dart.fn(context => new api_bloc.ApiBloc.new(), T$.BuildContextToApiBloc())})]), child: new app.MaterialApp.new({debugShowCheckedModeBanner: false, theme: theme_data.ThemeData.new({primarySwatch: colors.Colors.green, elevatedButtonTheme: new elevated_button_theme.ElevatedButtonThemeData.new({style: elevated_button.ElevatedButton.styleFrom({shape: new rounded_rectangle_border.RoundedRectangleBorder.new({borderRadius: new border_radius.BorderRadius.circular(20)})})})}), home: new main.HomePage.new()})});
    }
    static ['_#new#tearOff']() {
      return new main.MyApp.new();
    }
  };
  (main.MyApp.new = function() {
    main.MyApp.__proto__.new.call(this);
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  main.HomePage = class HomePage extends framework.StatelessWidget {
    build(context) {
      let apiBloc = provider$['ReadContext|read'](api_bloc.ApiBloc, context);
      function _updateWorldTime() {
        apiBloc.updateWorldTime();
      }
      dart.fn(_updateWorldTime, T$.VoidTovoid());
      function _navigateToGallery() {
        navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new gallery_screen.GalleryPage.new(), T$.BuildContextToGalleryPage())}));
      }
      dart.fn(_navigateToGallery, T$.VoidTovoid());
      function _navigateToTaskFolders() {
        navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main_page.MainScreen.new(), T$.BuildContextToMainScreen())}));
      }
      dart.fn(_navigateToTaskFolders, T$.VoidTovoid());
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Главная страница")}), body: new basic.Padding.new({padding: C[1] || CT.C1, child: new (T$.BlocBuilderOfApiBloc$String()).new({builder: dart.fn((context, state) => new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.stretch, children: T$.JSArrayOfWidget().of([new text.Text.new("Рандомный факт о кошках", {style: new text_style.TextStyle.new({fontSize: 20})}), new basic.SizedBox.new({height: 10}), new text.Text.new(state, {style: new text_style.TextStyle.new({fontSize: 18, fontWeight: ui.FontWeight.bold})}), new basic.SizedBox.new({height: 20}), new elevated_button.ElevatedButton.new({onPressed: _updateWorldTime, child: new text.Text.new("Обновить факт")}), new basic.SizedBox.new({height: 20}), new elevated_button.ElevatedButton.new({onPressed: _navigateToGallery, child: new text.Text.new("Галерея с изображениями")}), new basic.SizedBox.new({height: 20}), new elevated_button.ElevatedButton.new({onPressed: _navigateToTaskFolders, child: new text.Text.new("Папки задач")})])}), T$.BuildContextAndStringToColumn())})})});
    }
    static ['_#new#tearOff']() {
      return new main.HomePage.new();
    }
  };
  (main.HomePage.new = function() {
    main.HomePage.__proto__.new.call(this);
    ;
  }).prototype = main.HomePage.prototype;
  dart.addTypeTests(main.HomePage);
  dart.addTypeCaches(main.HomePage);
  dart.setMethodSignature(main.HomePage, () => ({
    __proto__: dart.getMethods(main.HomePage.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.HomePage, I[0]);
  main.main = function main$0() {
    binding.runApp(new main.MyApp.new());
  };
  web_plugin_registrant.registerPlugins = function registerPlugins(pluginRegistrar = null) {
    let t0;
    let registrar = (t0 = pluginRegistrar, t0 == null ? plugin_registry.webPluginRegistrar : t0);
    shared_preferences_web.SharedPreferencesPlugin.registerWith(registrar);
    registrar.registerMessageHandler();
  };
  task_bloc.TaskEvent = class TaskEvent extends core.Object {
    static ['_#new#tearOff']() {
      return new task_bloc.TaskEvent.new();
    }
  };
  (task_bloc.TaskEvent.new = function() {
    ;
  }).prototype = task_bloc.TaskEvent.prototype;
  dart.addTypeTests(task_bloc.TaskEvent);
  dart.addTypeCaches(task_bloc.TaskEvent);
  dart.setLibraryUri(task_bloc.TaskEvent, I[1]);
  task_bloc.LoadTasks = class LoadTasks extends task_bloc.TaskEvent {
    static ['_#new#tearOff']() {
      return new task_bloc.LoadTasks.new();
    }
  };
  (task_bloc.LoadTasks.new = function() {
    ;
  }).prototype = task_bloc.LoadTasks.prototype;
  dart.addTypeTests(task_bloc.LoadTasks);
  dart.addTypeCaches(task_bloc.LoadTasks);
  dart.setLibraryUri(task_bloc.LoadTasks, I[1]);
  var cardIndex$ = dart.privateName(task_bloc, "UpdateTask.cardIndex");
  var taskIndex$ = dart.privateName(task_bloc, "UpdateTask.taskIndex");
  var isDone$ = dart.privateName(task_bloc, "UpdateTask.isDone");
  task_bloc.UpdateTask = class UpdateTask extends task_bloc.TaskEvent {
    get cardIndex() {
      return this[cardIndex$];
    }
    set cardIndex(value) {
      super.cardIndex = value;
    }
    get taskIndex() {
      return this[taskIndex$];
    }
    set taskIndex(value) {
      super.taskIndex = value;
    }
    get isDone() {
      return this[isDone$];
    }
    set isDone(value) {
      super.isDone = value;
    }
    static ['_#new#tearOff'](cardIndex, taskIndex, isDone) {
      return new task_bloc.UpdateTask.new(cardIndex, taskIndex, isDone);
    }
  };
  (task_bloc.UpdateTask.new = function(cardIndex, taskIndex, isDone) {
    this[cardIndex$] = cardIndex;
    this[taskIndex$] = taskIndex;
    this[isDone$] = isDone;
    ;
  }).prototype = task_bloc.UpdateTask.prototype;
  dart.addTypeTests(task_bloc.UpdateTask);
  dart.addTypeCaches(task_bloc.UpdateTask);
  dart.setLibraryUri(task_bloc.UpdateTask, I[1]);
  dart.setFieldSignature(task_bloc.UpdateTask, () => ({
    __proto__: dart.getFields(task_bloc.UpdateTask.__proto__),
    cardIndex: dart.finalFieldType(core.int),
    taskIndex: dart.finalFieldType(core.int),
    isDone: dart.finalFieldType(core.bool)
  }));
  var cardIndex$0 = dart.privateName(task_bloc, "EditCard.cardIndex");
  var cardName$ = dart.privateName(task_bloc, "EditCard.cardName");
  var tasks$ = dart.privateName(task_bloc, "EditCard.tasks");
  task_bloc.EditCard = class EditCard extends task_bloc.TaskEvent {
    get cardIndex() {
      return this[cardIndex$0];
    }
    set cardIndex(value) {
      super.cardIndex = value;
    }
    get cardName() {
      return this[cardName$];
    }
    set cardName(value) {
      super.cardName = value;
    }
    get tasks() {
      return this[tasks$];
    }
    set tasks(value) {
      super.tasks = value;
    }
    static ['_#new#tearOff'](cardIndex, cardName, tasks) {
      return new task_bloc.EditCard.new(cardIndex, cardName, tasks);
    }
  };
  (task_bloc.EditCard.new = function(cardIndex, cardName, tasks) {
    this[cardIndex$0] = cardIndex;
    this[cardName$] = cardName;
    this[tasks$] = tasks;
    ;
  }).prototype = task_bloc.EditCard.prototype;
  dart.addTypeTests(task_bloc.EditCard);
  dart.addTypeCaches(task_bloc.EditCard);
  dart.setLibraryUri(task_bloc.EditCard, I[1]);
  dart.setFieldSignature(task_bloc.EditCard, () => ({
    __proto__: dart.getFields(task_bloc.EditCard.__proto__),
    cardIndex: dart.finalFieldType(core.int),
    cardName: dart.finalFieldType(core.String),
    tasks: dart.finalFieldType(core.List$(task_model.Task))
  }));
  var cardName$0 = dart.privateName(task_bloc, "AddCard.cardName");
  var tasks$0 = dart.privateName(task_bloc, "AddCard.tasks");
  task_bloc.AddCard = class AddCard extends task_bloc.TaskEvent {
    get cardName() {
      return this[cardName$0];
    }
    set cardName(value) {
      super.cardName = value;
    }
    get tasks() {
      return this[tasks$0];
    }
    set tasks(value) {
      super.tasks = value;
    }
    static ['_#new#tearOff'](cardName, tasks) {
      return new task_bloc.AddCard.new(cardName, tasks);
    }
    get props() {
      return T$.JSArrayOfObjectN().of([this.cardName, this.tasks]);
    }
  };
  (task_bloc.AddCard.new = function(cardName, tasks) {
    this[cardName$0] = cardName;
    this[tasks$0] = tasks;
    ;
  }).prototype = task_bloc.AddCard.prototype;
  dart.addTypeTests(task_bloc.AddCard);
  dart.addTypeCaches(task_bloc.AddCard);
  dart.setGetterSignature(task_bloc.AddCard, () => ({
    __proto__: dart.getGetters(task_bloc.AddCard.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(task_bloc.AddCard, I[1]);
  dart.setFieldSignature(task_bloc.AddCard, () => ({
    __proto__: dart.getFields(task_bloc.AddCard.__proto__),
    cardName: dart.finalFieldType(core.String),
    tasks: dart.finalFieldType(core.List$(task_model.Task))
  }));
  var cardIndex$1 = dart.privateName(task_bloc, "DeleteCard.cardIndex");
  task_bloc.DeleteCard = class DeleteCard extends task_bloc.TaskEvent {
    get cardIndex() {
      return this[cardIndex$1];
    }
    set cardIndex(value) {
      super.cardIndex = value;
    }
    static ['_#new#tearOff'](cardIndex) {
      return new task_bloc.DeleteCard.new(cardIndex);
    }
    get props() {
      return T$.JSArrayOfObjectN().of([this.cardIndex]);
    }
  };
  (task_bloc.DeleteCard.new = function(cardIndex) {
    this[cardIndex$1] = cardIndex;
    ;
  }).prototype = task_bloc.DeleteCard.prototype;
  dart.addTypeTests(task_bloc.DeleteCard);
  dart.addTypeCaches(task_bloc.DeleteCard);
  dart.setGetterSignature(task_bloc.DeleteCard, () => ({
    __proto__: dart.getGetters(task_bloc.DeleteCard.__proto__),
    props: core.List$(dart.nullable(core.Object))
  }));
  dart.setLibraryUri(task_bloc.DeleteCard, I[1]);
  dart.setFieldSignature(task_bloc.DeleteCard, () => ({
    __proto__: dart.getFields(task_bloc.DeleteCard.__proto__),
    cardIndex: dart.finalFieldType(core.int)
  }));
  var cards$ = dart.privateName(task_bloc, "TaskState.cards");
  task_bloc.TaskState = class TaskState extends core.Object {
    get cards() {
      return this[cards$];
    }
    set cards(value) {
      this[cards$] = value;
    }
    static ['_#new#tearOff'](cards) {
      return new task_bloc.TaskState.new(cards);
    }
  };
  (task_bloc.TaskState.new = function(cards) {
    this[cards$] = cards;
    ;
  }).prototype = task_bloc.TaskState.prototype;
  dart.addTypeTests(task_bloc.TaskState);
  dart.addTypeCaches(task_bloc.TaskState);
  dart.setLibraryUri(task_bloc.TaskState, I[1]);
  dart.setFieldSignature(task_bloc.TaskState, () => ({
    __proto__: dart.getFields(task_bloc.TaskState.__proto__),
    cards: dart.fieldType(core.List$(task_model.Card))
  }));
  var _onLoadTasks = dart.privateName(task_bloc, "_onLoadTasks");
  var _onUpdateTask = dart.privateName(task_bloc, "_onUpdateTask");
  var _onEditCard = dart.privateName(task_bloc, "_onEditCard");
  var _onAddCard = dart.privateName(task_bloc, "_onAddCard");
  var _onDeleteCard = dart.privateName(task_bloc, "_onDeleteCard");
  var _loadInitialData = dart.privateName(task_bloc, "_loadInitialData");
  var _saveToStorage = dart.privateName(task_bloc, "_saveToStorage");
  var _eventController = dart.privateName(bloc$, "_eventController");
  var _subscriptions = dart.privateName(bloc$, "_subscriptions");
  var _handlers = dart.privateName(bloc$, "_handlers");
  var _emitters = dart.privateName(bloc$, "_emitters");
  var _eventTransformer$ = dart.privateName(bloc$, "_eventTransformer");
  var _blocObserver$ = dart.privateName(bloc$, "_blocObserver");
  var _emitted = dart.privateName(bloc$, "_emitted");
  var __BlocBase__stateController = dart.privateName(bloc$, "_#BlocBase#_stateController");
  var __BlocBase__stateController_isSet = dart.privateName(bloc$, "_#BlocBase#_stateController#isSet");
  var _state$ = dart.privateName(bloc$, "_state");
  var _stateController = dart.privateName(bloc$, "_stateController");
  const _is_BlocBase_default = Symbol('_is_BlocBase_default');
  bloc$.BlocBase$ = dart.generic(State => {
    var __t$StreamControllerOfState = () => (__t$StreamControllerOfState = dart.constFn(async.StreamController$(State)))();
    var __t$ChangeOfState = () => (__t$ChangeOfState = dart.constFn(change.Change$(State)))();
    class BlocBase extends core.Object {
      get [_stateController]() {
        let t3, t2;
        t2 = this[__BlocBase__stateController];
        return t2 == null ? (t3 = __t$StreamControllerOfState().broadcast(), this[__BlocBase__stateController] == null ? this[__BlocBase__stateController] = t3 : dart.throw(new _internal.LateError.fieldADI("_stateController"))) : t2;
      }
      get state() {
        return this[_state$];
      }
      get stream() {
        return this[_stateController].stream;
      }
      get isClosed() {
        return this[_stateController].isClosed;
      }
      emit(state) {
        State.as(state);
        try {
          if (this.isClosed) {
            dart.throw(new core.StateError.new("Cannot emit new states after calling close"));
          }
          if (dart.equals(state, this[_state$]) && this[_emitted]) return;
          this.onChange(new (__t$ChangeOfState()).new({currentState: this.state, nextState: state}));
          this[_state$] = state;
          this[_stateController].add(this[_state$]);
          this[_emitted] = true;
        } catch (e) {
          let error = dart.getThrown(e);
          let stackTrace = dart.stackTrace(e);
          if (core.Object.is(error)) {
            this.onError(error, stackTrace);
            dart.rethrow(e);
          } else
            throw e;
        }
      }
      onChange(change) {
        __t$ChangeOfState().as(change);
        this[_blocObserver$].onChange(this, change);
      }
      addError(error, stackTrace = null) {
        let t3;
        this.onError(error, (t3 = stackTrace, t3 == null ? core.StackTrace.current : t3));
      }
      onError(error, stackTrace) {
        this[_blocObserver$].onError(this, error, stackTrace);
      }
      close() {
        return async.async(dart.void, (function* close() {
          this[_blocObserver$].onClose(this);
          yield this[_stateController].close();
        }).bind(this));
      }
    }
    (BlocBase.new = function(_state) {
      let t2, t2$;
      this[_blocObserver$] = (t2$ = (t2 = bloc$.BlocOverrides.current, t2 == null ? null : t2.blocObserver), t2$ == null ? bloc$.Bloc.observer : t2$);
      this[__BlocBase__stateController] = null;
      this[__BlocBase__stateController_isSet] = false;
      this[_emitted] = false;
      this[_state$] = _state;
      this[_blocObserver$].onCreate(this);
    }).prototype = BlocBase.prototype;
    dart.addTypeTests(BlocBase);
    BlocBase.prototype[_is_BlocBase_default] = true;
    dart.addTypeCaches(BlocBase);
    BlocBase[dart.implements] = () => [bloc$.StateStreamableSource$(State), bloc$.Emittable$(State), bloc$.ErrorSink];
    dart.setMethodSignature(BlocBase, () => ({
      __proto__: dart.getMethods(BlocBase.__proto__),
      emit: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onChange: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      close: dart.fnType(async.Future$(dart.void), [])
    }));
    dart.setGetterSignature(BlocBase, () => ({
      __proto__: dart.getGetters(BlocBase.__proto__),
      [_stateController]: async.StreamController$(State),
      state: State,
      stream: async.Stream$(State),
      isClosed: core.bool
    }));
    dart.setLibraryUri(BlocBase, I[3]);
    dart.setFieldSignature(BlocBase, () => ({
      __proto__: dart.getFields(BlocBase.__proto__),
      [_blocObserver$]: dart.finalFieldType(bloc_observer.BlocObserver),
      [__BlocBase__stateController]: dart.fieldType(dart.nullable(async.StreamController$(State))),
      [__BlocBase__stateController_isSet]: dart.fieldType(core.bool),
      [_state$]: dart.fieldType(State),
      [_emitted]: dart.fieldType(core.bool)
    }));
    return BlocBase;
  });
  bloc$.BlocBase = bloc$.BlocBase$();
  dart.addTypeTests(bloc$.BlocBase, _is_BlocBase_default);
  const _is_Bloc_default = Symbol('_is_Bloc_default');
  bloc$.Bloc$ = dart.generic((Event, State) => {
    var __t$StreamControllerOfEvent = () => (__t$StreamControllerOfEvent = dart.constFn(async.StreamController$(Event)))();
    var __t$EventTobool = () => (__t$EventTobool = dart.constFn(dart.fnType(core.bool, [Event])))();
    var __t$TransitionOfEvent$State = () => (__t$TransitionOfEvent$State = dart.constFn(transition.Transition$(Event, State)))();
    var __t$StateTovoid = () => (__t$StateTovoid = dart.constFn(dart.fnType(dart.void, [State])))();
    var __t$_EmitterOfState = () => (__t$_EmitterOfState = dart.constFn(bloc$._Emitter$(State)))();
    const close = Symbol("close");
    class Bloc extends bloc$.BlocBase$(State) {
      add(event) {
        Event.as(event);
        if (!dart.fn(() => {
          let handlerExists = this[_handlers][$any](dart.fn(handler => {
            let t1, t0;
            t0 = handler;
            t1 = event;
            return t0.isType(t1);
          }, T$._HandlerTobool()));
          if (!handlerExists) {
            let eventType = dart.runtimeType(event);
            dart.throw(new core.StateError.new("add(" + dart.str(eventType) + ") was called without a registered event handler.\n" + "Make sure to register a handler via on<" + dart.str(eventType) + ">((event, emit) {...})"));
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[2], 87, 12, "() {\n      final handlerExists = _handlers.any((handler) => handler.isType(event));\n      if (!handlerExists) {\n        final eventType = event.runtimeType;\n        throw StateError(\n          '''add($eventType) was called without a registered event handler.\\n'''\n          '''Make sure to register a handler via on<$eventType>((event, emit) {...})''',\n        );\n      }\n      return true;\n    }()");
        try {
          this.onEvent(event);
          this[_eventController].add(event);
        } catch (e) {
          let error = dart.getThrown(e);
          let stackTrace = dart.stackTrace(e);
          if (core.Object.is(error)) {
            this.onError(error, stackTrace);
            dart.rethrow(e);
          } else
            throw e;
        }
      }
      onEvent(event) {
        Event.as(event);
        this[_blocObserver$].onEvent(this, event);
      }
      emit(state) {
        State.as(state);
        return super.emit(state);
      }
      on(E, handler, opts) {
        let t1;
        dart.checkTypeBound(E, Event, 'E');
        let transformer = opts && 'transformer' in opts ? opts.transformer : null;
        if (!dart.fn(() => {
          let handlerExists = this[_handlers][$any](dart.fn(handler => handler.type._equals(dart.wrapType(E)), T$._HandlerTobool()));
          if (handlerExists) {
            dart.throw(new core.StateError.new("on<" + dart.str(dart.wrapType(E)) + "> was called multiple times. " + "There should only be a single event handler per event type."));
          }
          this[_handlers][$add](new bloc$._Handler.new({isType: dart.fn(e => E.is(e), T$.dynamicTobool()), type: dart.wrapType(E)}));
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[2], 186, 12, "() {\n      final handlerExists = _handlers.any((handler) => handler.type == E);\n      if (handlerExists) {\n        throw StateError(\n          'on<$E> was called multiple times. '\n          'There should only be a single event handler per event type.',\n        );\n      }\n      _handlers.add(_Handler(isType: (dynamic e) => e is E, type: E));\n      return true;\n    }()");
        let subscription = (t1 = transformer, t1 == null ? this[_eventTransformer$] : t1)(this[_eventController].stream.where(dart.fn(event => E.is(event), __t$EventTobool())).cast(E), dart.fn(event => {
          const onEmit = state => {
            if (this.isClosed) return;
            if (dart.equals(this.state, state) && this[_emitted]) return;
            this.onTransition(new (__t$TransitionOfEvent$State()).new({currentState: this.state, event: E.as(event), nextState: state}));
            this.emit(state);
          };
          dart.fn(onEmit, __t$StateTovoid());
          let emitter = new (__t$_EmitterOfState()).new(onEmit);
          let controller = async.StreamController$(E).broadcast({sync: true, onCancel: dart.bind(emitter, 'cancel')});
          const handleEvent = () => {
            return async.async(dart.void, (function* handleEvent() {
              const onDone = () => {
                emitter.complete();
                this[_emitters][$remove](emitter);
                if (!controller.isClosed) controller.close();
              };
              dart.fn(onDone, T$.VoidTovoid());
              try {
                this[_emitters][$add](emitter);
                yield handler(E.as(event), emitter);
              } catch (e) {
                let error = dart.getThrown(e);
                let stackTrace = dart.stackTrace(e);
                if (core.Object.is(error)) {
                  this.onError(error, stackTrace);
                  dart.rethrow(e);
                } else
                  throw e;
              } finally {
                onDone();
              }
            }).bind(this));
          };
          dart.fn(handleEvent, T$.VoidToFutureOfvoid());
          handleEvent();
          return controller.stream;
        }, dart.fnType(async.Stream$(E), [dart.dynamic]))).listen(null);
        this[_subscriptions][$add](subscription);
      }
      onTransition(transition) {
        __t$TransitionOfEvent$State().as(transition);
        this[_blocObserver$].onTransition(this, transition);
      }
      close() {
        return async.async(dart.void, (function* close$() {
          yield this[_eventController].close();
          for (let emitter of this[_emitters]) {
            emitter.cancel();
          }
          yield async.Future.wait(dart.void, this[_emitters][$map](T$.FutureOfvoid(), dart.fn(e => e.future, T$._EmitterToFutureOfvoid())));
          yield async.Future.wait(dart.void, this[_subscriptions][$map](T$.FutureOfvoid(), dart.fn(s => s.cancel(), T$.StreamSubscriptionToFutureOfvoid())));
          return this[close]();
        }).bind(this));
      }
      [close]() {
        return super.close();
      }
    }
    (Bloc.new = function(initialState) {
      let t0, t0$;
      this[_eventController] = __t$StreamControllerOfEvent().broadcast();
      this[_subscriptions] = T$.JSArrayOfStreamSubscription().of([]);
      this[_handlers] = T$.JSArrayOf_Handler().of([]);
      this[_emitters] = T$.JSArrayOf_Emitter().of([]);
      this[_eventTransformer$] = (t0$ = (t0 = bloc$.BlocOverrides.current, t0 == null ? null : t0.eventTransformer), t0$ == null ? bloc$.Bloc.transformer : t0$);
      Bloc.__proto__.new.call(this, initialState);
      ;
    }).prototype = Bloc.prototype;
    dart.addTypeTests(Bloc);
    Bloc.prototype[_is_Bloc_default] = true;
    dart.addTypeCaches(Bloc);
    Bloc[dart.implements] = () => [bloc$.BlocEventSink$(Event)];
    dart.setMethodSignature(Bloc, () => ({
      __proto__: dart.getMethods(Bloc.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onEvent: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      on: dart.gFnType(E => [dart.void, [dart.fnType(dart.void, [E, bloc$.Emitter$(State)])], {transformer: dart.nullable(dart.fnType(async.Stream$(E), [async.Stream$(E), dart.fnType(async.Stream$(E), [E])]))}, {}], E => [Event]),
      onTransition: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(Bloc, I[3]);
    dart.setFieldSignature(Bloc, () => ({
      __proto__: dart.getFields(Bloc.__proto__),
      [_eventController]: dart.finalFieldType(async.StreamController$(Event)),
      [_subscriptions]: dart.finalFieldType(core.List$(async.StreamSubscription)),
      [_handlers]: dart.finalFieldType(core.List$(bloc$._Handler)),
      [_emitters]: dart.finalFieldType(core.List$(bloc$._Emitter)),
      [_eventTransformer$]: dart.finalFieldType(dart.fnType(async.Stream, [async.Stream, dart.fnType(async.Stream, [dart.dynamic])]))
    }));
    dart.setStaticFieldSignature(Bloc, () => ['observer', 'transformer']);
    return Bloc;
  });
  bloc$.Bloc = bloc$.Bloc$();
  dart.defineLazy(bloc$.Bloc, {
    /*bloc$.Bloc.observer*/get observer() {
      return C[2] || CT.C2;
    },
    set observer(value) {},
    /*bloc$.Bloc.transformer*/get transformer() {
      return dart.fn((events, mapper) => events.map(async.Stream, mapper).transform(dart.dynamic, C[3] || CT.C3), T$.StreamAndFnToStream());
    },
    set transformer(value) {}
  }, false);
  dart.addTypeTests(bloc$.Bloc, _is_Bloc_default);
  task_bloc.TaskBloc = class TaskBloc extends bloc$.Bloc$(task_bloc.TaskEvent, task_bloc.TaskState) {
    static ['_#new#tearOff']() {
      return new task_bloc.TaskBloc.new();
    }
    [_onLoadTasks](event, emit) {
      return async.async(dart.void, (function* _onLoadTasks() {
        let cards = (yield this[_loadInitialData]());
        emit.call(new task_bloc.TaskState.new(cards));
      }).bind(this));
    }
    [_onUpdateTask](event, emit) {
      return async.async(dart.void, (function* _onUpdateTask() {
        let cards = T$.ListOfCard().from(this.state.cards);
        cards[$_get](event.cardIndex).tasks[$_get](event.taskIndex).isDone = event.isDone;
        yield this[_saveToStorage](cards);
        emit.call(new task_bloc.TaskState.new(cards));
      }).bind(this));
    }
    [_onEditCard](event, emit) {
      return async.async(dart.void, (function* _onEditCard() {
        let cards = T$.ListOfCard().from(this.state.cards);
        cards[$_set](event.cardIndex, new task_model.Card.new({cardName: event.cardName, cardId: cards[$_get](event.cardIndex).cardId, tasks: event.tasks}));
        yield this[_saveToStorage](cards);
        emit.call(new task_bloc.TaskState.new(cards));
      }).bind(this));
    }
    [_onAddCard](event, emit) {
      return async.async(dart.void, (function* _onAddCard() {
        let cards = T$.ListOfCard().from(this.state.cards);
        let newCardId = cards[$isEmpty] ? 1 : cards[$last].cardId + 1;
        cards[$add](new task_model.Card.new({cardName: event.cardName, cardId: newCardId, tasks: event.tasks}));
        yield this[_saveToStorage](cards);
        emit.call(new task_bloc.TaskState.new(cards));
      }).bind(this));
    }
    [_onDeleteCard](event, emit) {
      return async.async(dart.void, (function* _onDeleteCard() {
        let cards = T$.ListOfCard().from(this.state.cards);
        cards[$removeAt](event.cardIndex);
        yield this[_saveToStorage](cards);
        emit.call(new task_bloc.TaskState.new(cards));
      }).bind(this));
    }
    [_loadInitialData]() {
      return async.async(T$.ListOfCard(), function* _loadInitialData() {
        let prefs = (yield shared_preferences.SharedPreferences.getInstance());
        let jsonString = prefs.getString("cards");
        if (jsonString != null) {
          let decodedJson = core.List.as(convert.json.decode(jsonString));
          return decodedJson[$map](task_model.Card, dart.fn(json => task_model.Card.fromJson(T$.MapOfString$dynamic().as(json)), T$.dynamicToCard()))[$toList]();
        } else {
          return T$.JSArrayOfCard().of([new task_model.Card.new({cardName: "folderName", cardId: 1, tasks: T$.JSArrayOfTask().of([new task_model.Task.new({description: "desc", isDone: true}), new task_model.Task.new({description: "desc1", isDone: false}), new task_model.Task.new({description: "desc2", isDone: false})])})]);
        }
      });
    }
    [_saveToStorage](cards) {
      return async.async(dart.void, function* _saveToStorage() {
        let prefs = (yield shared_preferences.SharedPreferences.getInstance());
        let jsonString = convert.json.encode(cards[$map](T$.MapOfString$dynamic(), dart.fn(card => card.toJson(), T$.CardToMapOfString$dynamic()))[$toList]());
        yield prefs.setString("cards", jsonString);
      });
    }
  };
  (task_bloc.TaskBloc.new = function() {
    task_bloc.TaskBloc.__proto__.new.call(this, new task_bloc.TaskState.new(T$.JSArrayOfCard().of([])));
    this.on(task_bloc.LoadTasks, dart.bind(this, _onLoadTasks));
    this.on(task_bloc.UpdateTask, dart.bind(this, _onUpdateTask));
    this.on(task_bloc.EditCard, dart.bind(this, _onEditCard));
    this.on(task_bloc.AddCard, dart.bind(this, _onAddCard));
    this.on(task_bloc.DeleteCard, dart.bind(this, _onDeleteCard));
    this[_loadInitialData]().then(core.Null, dart.fn(cards => {
      this.add(new task_bloc.LoadTasks.new());
    }, T$.ListOfCardToNull()));
  }).prototype = task_bloc.TaskBloc.prototype;
  dart.addTypeTests(task_bloc.TaskBloc);
  dart.addTypeCaches(task_bloc.TaskBloc);
  dart.setMethodSignature(task_bloc.TaskBloc, () => ({
    __proto__: dart.getMethods(task_bloc.TaskBloc.__proto__),
    [_onLoadTasks]: dart.fnType(async.Future$(dart.void), [task_bloc.LoadTasks, bloc$.Emitter$(task_bloc.TaskState)]),
    [_onUpdateTask]: dart.fnType(async.Future$(dart.void), [task_bloc.UpdateTask, bloc$.Emitter$(task_bloc.TaskState)]),
    [_onEditCard]: dart.fnType(async.Future$(dart.void), [task_bloc.EditCard, bloc$.Emitter$(task_bloc.TaskState)]),
    [_onAddCard]: dart.fnType(async.Future$(dart.void), [task_bloc.AddCard, bloc$.Emitter$(task_bloc.TaskState)]),
    [_onDeleteCard]: dart.fnType(async.Future$(dart.void), [task_bloc.DeleteCard, bloc$.Emitter$(task_bloc.TaskState)]),
    [_loadInitialData]: dart.fnType(async.Future$(core.List$(task_model.Card)), []),
    [_saveToStorage]: dart.fnType(async.Future$(dart.void), [core.List$(task_model.Card)])
  }));
  dart.setLibraryUri(task_bloc.TaskBloc, I[1]);
  main_page.MainScreen = class MainScreen extends framework.StatefulWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new main_page.MainScreen.new({key: key});
    }
    createState() {
      return new main_page._MainScreenState.new();
    }
  };
  (main_page.MainScreen.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    main_page.MainScreen.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main_page.MainScreen.prototype;
  dart.addTypeTests(main_page.MainScreen);
  dart.addTypeCaches(main_page.MainScreen);
  dart.setMethodSignature(main_page.MainScreen, () => ({
    __proto__: dart.getMethods(main_page.MainScreen.__proto__),
    createState: dart.fnType(framework.State$(main_page.MainScreen), [])
  }));
  dart.setLibraryUri(main_page.MainScreen, I[4]);
  var ___MainScreenState__controller = dart.privateName(main_page, "_#_MainScreenState#_controller");
  var _controller = dart.privateName(main_page, "_controller");
  const State_SingleTickerProviderStateMixin$36 = class State_SingleTickerProviderStateMixin extends framework.State$(main_page.MainScreen) {};
  (State_SingleTickerProviderStateMixin$36.new = function() {
    ticker_provider.SingleTickerProviderStateMixin$(main_page.MainScreen)[dart.mixinNew].call(this);
    State_SingleTickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_SingleTickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_SingleTickerProviderStateMixin$36, ticker_provider.SingleTickerProviderStateMixin$(main_page.MainScreen));
  main_page._MainScreenState = class _MainScreenState extends State_SingleTickerProviderStateMixin$36 {
    get [_controller]() {
      let t3;
      t3 = this[___MainScreenState__controller];
      return t3 == null ? dart.throw(new _internal.LateError.fieldNI("_controller")) : t3;
    }
    set [_controller](_controller$35param) {
      this[___MainScreenState__controller] = _controller$35param;
    }
    initState() {
      super.initState();
      this[_controller] = new animation_controller.AnimationController.new({vsync: this});
    }
    dispose() {
      this[_controller].dispose();
      super.dispose();
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Папки задач")}), body: new basic.Center.new({child: new tasks_screen.CellListView.new()}), floatingActionButton: new floating_action_button.FloatingActionButton.new({onPressed: dart.fn(() => {
            navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new create_card.CreateCardPage.new(), T$.BuildContextToCreateCardPage())}));
          }, T$.VoidTovoid()), child: new icon.Icon.new(icons.Icons.add)})});
    }
    static ['_#new#tearOff']() {
      return new main_page._MainScreenState.new();
    }
  };
  (main_page._MainScreenState.new = function() {
    this[___MainScreenState__controller] = null;
    main_page._MainScreenState.__proto__.new.call(this);
    ;
  }).prototype = main_page._MainScreenState.prototype;
  dart.addTypeTests(main_page._MainScreenState);
  dart.addTypeCaches(main_page._MainScreenState);
  dart.setMethodSignature(main_page._MainScreenState, () => ({
    __proto__: dart.getMethods(main_page._MainScreenState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(main_page._MainScreenState, () => ({
    __proto__: dart.getGetters(main_page._MainScreenState.__proto__),
    [_controller]: animation_controller.AnimationController
  }));
  dart.setSetterSignature(main_page._MainScreenState, () => ({
    __proto__: dart.getSetters(main_page._MainScreenState.__proto__),
    [_controller]: animation_controller.AnimationController
  }));
  dart.setLibraryUri(main_page._MainScreenState, I[4]);
  dart.setFieldSignature(main_page._MainScreenState, () => ({
    __proto__: dart.getFields(main_page._MainScreenState.__proto__),
    [___MainScreenState__controller]: dart.fieldType(dart.nullable(animation_controller.AnimationController))
  }));
  var _dio = dart.privateName(api_bloc, "_dio");
  const _is_Cubit_default = Symbol('_is_Cubit_default');
  cubit.Cubit$ = dart.generic(State => {
    class Cubit extends bloc$.BlocBase$(State) {}
    (Cubit.new = function(initialState) {
      Cubit.__proto__.new.call(this, initialState);
      ;
    }).prototype = Cubit.prototype;
    dart.addTypeTests(Cubit);
    Cubit.prototype[_is_Cubit_default] = true;
    dart.addTypeCaches(Cubit);
    dart.setLibraryUri(Cubit, I[5]);
    return Cubit;
  });
  cubit.Cubit = cubit.Cubit$();
  dart.addTypeTests(cubit.Cubit, _is_Cubit_default);
  api_bloc.ApiBloc = class ApiBloc extends cubit.Cubit$(core.String) {
    static ['_#new#tearOff']() {
      return new api_bloc.ApiBloc.new();
    }
    updateWorldTime() {
      return async.async(dart.void, (function* updateWorldTime() {
        try {
          let response = (yield this[_dio].get(dart.dynamic, "https://catfact.ninja/fact"));
          if (response.statusCode === 200) {
            let data = response.data;
            this.emit(core.String.as(dart.dsend(data, '_get', ["fact"])));
          } else {
            this.emit("Не удалось получить данные");
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            this.emit("Произошла ошибка: " + dart.str(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (api_bloc.ApiBloc.new = function() {
    this[_dio] = dio$.Dio.new();
    api_bloc.ApiBloc.__proto__.new.call(this, "");
    ;
  }).prototype = api_bloc.ApiBloc.prototype;
  dart.addTypeTests(api_bloc.ApiBloc);
  dart.addTypeCaches(api_bloc.ApiBloc);
  dart.setMethodSignature(api_bloc.ApiBloc, () => ({
    __proto__: dart.getMethods(api_bloc.ApiBloc.__proto__),
    updateWorldTime: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setLibraryUri(api_bloc.ApiBloc, I[6]);
  dart.setFieldSignature(api_bloc.ApiBloc, () => ({
    __proto__: dart.getFields(api_bloc.ApiBloc.__proto__),
    [_dio]: dart.finalFieldType(dio$.Dio)
  }));
  gallery_screen.GalleryPage = class GalleryPage extends framework.StatefulWidget {
    createState() {
      return new gallery_screen._GalleryPageState.new();
    }
    static ['_#new#tearOff']() {
      return new gallery_screen.GalleryPage.new();
    }
  };
  (gallery_screen.GalleryPage.new = function() {
    gallery_screen.GalleryPage.__proto__.new.call(this);
    ;
  }).prototype = gallery_screen.GalleryPage.prototype;
  dart.addTypeTests(gallery_screen.GalleryPage);
  dart.addTypeCaches(gallery_screen.GalleryPage);
  dart.setMethodSignature(gallery_screen.GalleryPage, () => ({
    __proto__: dart.getMethods(gallery_screen.GalleryPage.__proto__),
    createState: dart.fnType(gallery_screen._GalleryPageState, [])
  }));
  dart.setLibraryUri(gallery_screen.GalleryPage, I[7]);
  var _pageController = dart.privateName(gallery_screen, "_pageController");
  var _goToPreviousPage = dart.privateName(gallery_screen, "_goToPreviousPage");
  var _goToNextPage = dart.privateName(gallery_screen, "_goToNextPage");
  gallery_screen._GalleryPageState = class _GalleryPageState extends framework.State$(gallery_screen.GalleryPage) {
    [_goToPreviousPage]() {
      if (this[_pageController].hasClients) {
        this[_pageController].previousPage({duration: new core.Duration.new({milliseconds: 300}), curve: curves.Curves.easeInOut});
      }
    }
    [_goToNextPage]() {
      if (this[_pageController].hasClients) {
        this[_pageController].nextPage({duration: new core.Duration.new({milliseconds: 300}), curve: curves.Curves.easeInOut});
      }
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Галерея изображений")}), body: new basic.Stack.new({children: T$.JSArrayOfWidget().of([new page_view.PageView.builder({controller: this[_pageController], itemCount: this.urls[$length], itemBuilder: dart.fn((context, index) => new basic.Center.new({child: new image.Image.network(this.urls[$_get](index), {fit: box_fit.BoxFit.cover})}), T$.BuildContextAndintToCenter())}), new basic.Positioned.new({left: 10, top: media_query.MediaQuery.of(context).size.height / 2 - 25, child: new icon_button.IconButton.new({iconSize: 50, icon: new icon.Icon.new(icons.Icons.arrow_back, {color: colors.Colors.cyan}), onPressed: dart.bind(this, _goToPreviousPage)})}), new basic.Positioned.new({right: 10, top: media_query.MediaQuery.of(context).size.height / 2 - 25, child: new icon_button.IconButton.new({iconSize: 50, icon: new icon.Icon.new(icons.Icons.arrow_forward, {color: colors.Colors.cyan}), onPressed: dart.bind(this, _goToNextPage)})})])})});
    }
    static ['_#new#tearOff']() {
      return new gallery_screen._GalleryPageState.new();
    }
  };
  (gallery_screen._GalleryPageState.new = function() {
    this.urls = T$.JSArrayOfString().of(["https://images.pexels.com/photos/26100664/pexels-photo-26100664.jpeg?auto=compress&cs=tinysrgb&w=800&lazy=load", "https://images.pexels.com/photos/7654136/pexels-photo-7654136.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2", "https://images.pexels.com/photos/24244035/pexels-photo-24244035.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2", "https://images.pexels.com/photos/19400189/pexels-photo-19400189.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2", "https://images.pexels.com/photos/12984738/pexels-photo-12984738.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2"]);
    this[_pageController] = new page_view.PageController.new();
    gallery_screen._GalleryPageState.__proto__.new.call(this);
    ;
  }).prototype = gallery_screen._GalleryPageState.prototype;
  dart.addTypeTests(gallery_screen._GalleryPageState);
  dart.addTypeCaches(gallery_screen._GalleryPageState);
  dart.setMethodSignature(gallery_screen._GalleryPageState, () => ({
    __proto__: dart.getMethods(gallery_screen._GalleryPageState.__proto__),
    [_goToPreviousPage]: dart.fnType(dart.void, []),
    [_goToNextPage]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(gallery_screen._GalleryPageState, I[7]);
  dart.setFieldSignature(gallery_screen._GalleryPageState, () => ({
    __proto__: dart.getFields(gallery_screen._GalleryPageState.__proto__),
    urls: dart.finalFieldType(core.List$(core.String)),
    [_pageController]: dart.finalFieldType(page_view.PageController)
  }));
  var _getFilteredKeys = dart.privateName(shared_preferences_web, "_getFilteredKeys");
  var _decodeValue = dart.privateName(shared_preferences_web, "_decodeValue");
  var _encodeValue = dart.privateName(shared_preferences_web, "_encodeValue");
  plugin_platform_interface.PlatformInterface = class PlatformInterface extends core.Object {
    static verify(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: true});
    }
    static verifyToken(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: false});
    }
    static _verify(instance, token, opts) {
      let preventConstObject = opts && 'preventConstObject' in opts ? opts.preventConstObject : null;
      if (plugin_platform_interface.MockPlatformInterfaceMixin.is(instance)) {
        let assertionsEnabled = false;
        if (!dart.fn(() => {
          assertionsEnabled = true;
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[8], 92, 14, "() {\n        assertionsEnabled = true;\n        return true;\n      }()");
        if (!assertionsEnabled) {
          dart.throw(new core.AssertionError.new("`MockPlatformInterfaceMixin` is not intended for use in release builds."));
        }
        return;
      }
      if (preventConstObject && plugin_platform_interface.PlatformInterface._instanceTokens._get(instance) === (C[4] || CT.C4)) {
        dart.throw(new core.AssertionError.new("`const Object()` cannot be used as the token."));
      }
      if (token !== plugin_platform_interface.PlatformInterface._instanceTokens._get(instance)) {
        dart.throw(new core.AssertionError.new("Platform interfaces must not be implemented with `implements`"));
      }
    }
  };
  (plugin_platform_interface.PlatformInterface.new = function(opts) {
    let token = opts && 'token' in opts ? opts.token : null;
    plugin_platform_interface.PlatformInterface._instanceTokens._set(this, token);
  }).prototype = plugin_platform_interface.PlatformInterface.prototype;
  dart.addTypeTests(plugin_platform_interface.PlatformInterface);
  dart.addTypeCaches(plugin_platform_interface.PlatformInterface);
  dart.setStaticMethodSignature(plugin_platform_interface.PlatformInterface, () => ['verify', 'verifyToken', '_verify']);
  dart.setLibraryUri(plugin_platform_interface.PlatformInterface, I[9]);
  dart.setStaticFieldSignature(plugin_platform_interface.PlatformInterface, () => ['_instanceTokens']);
  dart.defineLazy(plugin_platform_interface.PlatformInterface, {
    /*plugin_platform_interface.PlatformInterface._instanceTokens*/get _instanceTokens() {
      return new (T$.ExpandoOfObject()).new();
    }
  }, false);
  shared_preferences_platform_interface.SharedPreferencesStorePlatform = class SharedPreferencesStorePlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance;
    }
    static set instance(instance) {
      if (!instance.isMock) {
        plugin_platform_interface.PlatformInterface.verify(instance, shared_preferences_platform_interface.SharedPreferencesStorePlatform._token);
      }
      shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance = instance;
    }
    get isMock() {
      return false;
    }
    clearWithPrefix(prefix) {
      dart.throw(new core.UnimplementedError.new("clearWithPrefix is not implemented."));
    }
    clearWithParameters(parameters) {
      dart.throw(new core.UnimplementedError.new("clearWithParameters is not implemented."));
    }
    getAllWithPrefix(prefix) {
      dart.throw(new core.UnimplementedError.new("getAllWithPrefix is not implemented."));
    }
    getAllWithParameters(parameters) {
      dart.throw(new core.UnimplementedError.new("getAllWithParameters is not implemented."));
    }
  };
  (shared_preferences_platform_interface.SharedPreferencesStorePlatform.new = function() {
    shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__.new.call(this, {token: shared_preferences_platform_interface.SharedPreferencesStorePlatform._token});
    ;
  }).prototype = shared_preferences_platform_interface.SharedPreferencesStorePlatform.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.addTypeCaches(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.setMethodSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ({
    __proto__: dart.getMethods(shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__),
    clearWithPrefix: dart.fnType(async.Future$(core.bool), [core.String]),
    clearWithParameters: dart.fnType(async.Future$(core.bool), [types.ClearParameters]),
    getAllWithPrefix: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [core.String]),
    getAllWithParameters: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [types.GetAllParameters])
  }));
  dart.setGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ({
    __proto__: dart.getGetters(shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__),
    isMock: core.bool
  }));
  dart.setStaticGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setStaticSetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setLibraryUri(shared_preferences_platform_interface.SharedPreferencesStorePlatform, I[10]);
  dart.setStaticFieldSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['_token', '_instance']);
  dart.defineLazy(shared_preferences_platform_interface.SharedPreferencesStorePlatform, {
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance*/get _instance() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    },
    set _instance(value) {}
  }, false);
  shared_preferences_web.SharedPreferencesPlugin = class SharedPreferencesPlugin extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static registerWith(registrar) {
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_web.SharedPreferencesPlugin.new();
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, (function* clearWithParameters() {
        let filter = parameters.filter;
        this[_getFilteredKeys](filter.prefix, {allowList: filter.allowList})[$forEach](dart.bind(html.window[$localStorage], $remove));
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T$.MapOfString$Object(), (function* getAll() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    getAllWithPrefix(prefix) {
      return async.async(T$.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T$.MapOfString$Object(), (function* getAllWithParameters() {
        let filter = parameters.filter;
        let allData = new (T$.IdentityMapOfString$Object()).new();
        for (let key of this[_getFilteredKeys](filter.prefix, {allowList: filter.allowList})) {
          allData[$_set](key, this[_decodeValue](dart.nullCheck(html.window[$localStorage][$_get](key))));
        }
        return allData;
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, function* remove() {
        html.window[$localStorage][$remove](key);
        return true;
      });
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        html.window[$localStorage][$_set](key, this[_encodeValue](value));
        return true;
      }).bind(this));
    }
    [_getFilteredKeys](prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return html.window[$localStorage][$keys][$where](dart.fn(key => {
        let t4, t4$;
        return key[$startsWith](prefix) && dart.test((t4$ = (t4 = allowList, t4 == null ? null : t4.contains(key)), t4$ == null ? true : t4$));
      }, T$.StringTobool()));
    }
    [_encodeValue](value) {
      return convert.json.encode(value);
    }
    [_decodeValue](encodedValue) {
      let decodedValue = convert.json.decode(encodedValue);
      if (core.List.is(decodedValue)) {
        return decodedValue[$cast](core.String);
      }
      return dart.nullCheck(decodedValue);
    }
    static ['_#new#tearOff']() {
      return new shared_preferences_web.SharedPreferencesPlugin.new();
    }
  };
  (shared_preferences_web.SharedPreferencesPlugin.new = function() {
    shared_preferences_web.SharedPreferencesPlugin.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_web.SharedPreferencesPlugin.prototype;
  dart.addTypeTests(shared_preferences_web.SharedPreferencesPlugin);
  dart.addTypeCaches(shared_preferences_web.SharedPreferencesPlugin);
  dart.setMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ({
    __proto__: dart.getMethods(shared_preferences_web.SharedPreferencesPlugin.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, dart.nullable(core.Object)]),
    [_getFilteredKeys]: dart.fnType(core.Iterable$(core.String), [core.String], {allowList: dart.nullable(core.Set$(core.String))}, {}),
    [_encodeValue]: dart.fnType(core.String, [dart.nullable(core.Object)]),
    [_decodeValue]: dart.fnType(core.Object, [core.String])
  }));
  dart.setStaticMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ['registerWith']);
  dart.setLibraryUri(shared_preferences_web.SharedPreferencesPlugin, I[11]);
  dart.setStaticFieldSignature(shared_preferences_web.SharedPreferencesPlugin, () => ['_defaultPrefix']);
  dart.defineLazy(shared_preferences_web.SharedPreferencesPlugin, {
    /*shared_preferences_web.SharedPreferencesPlugin._defaultPrefix*/get _defaultPrefix() {
      return "flutter.";
    }
  }, false);
  var builder$ = dart.privateName(bloc_builder, "BlocBuilder.builder");
  var bloc$0 = dart.privateName(bloc_builder, "BlocBuilderBase.bloc");
  var buildWhen$ = dart.privateName(bloc_builder, "BlocBuilderBase.buildWhen");
  const _is_BlocBuilderBase_default = Symbol('_is_BlocBuilderBase_default');
  bloc_builder.BlocBuilderBase$ = dart.generic((B, S) => {
    var __t$_BlocBuilderBaseStateOfB$S = () => (__t$_BlocBuilderBaseStateOfB$S = dart.constFn(bloc_builder._BlocBuilderBaseState$(B, S)))();
    var __t$BN = () => (__t$BN = dart.constFn(dart.nullable(B)))();
    var __t$DiagnosticsPropertyOfBN = () => (__t$DiagnosticsPropertyOfBN = dart.constFn(diagnostics.DiagnosticsProperty$(__t$BN())))();
    var __t$SAndSTobool = () => (__t$SAndSTobool = dart.constFn(dart.fnType(core.bool, [S, S])))();
    var __t$SAndSToNbool = () => (__t$SAndSToNbool = dart.constFn(dart.nullable(__t$SAndSTobool())))();
    var __t$ObjectFlagPropertyOfSAndSToNbool = () => (__t$ObjectFlagPropertyOfSAndSToNbool = dart.constFn(diagnostics.ObjectFlagProperty$(__t$SAndSToNbool())))();
    class BlocBuilderBase extends framework.StatefulWidget {
      get bloc() {
        return this[bloc$0];
      }
      set bloc(value) {
        super.bloc = value;
      }
      get buildWhen() {
        return this[buildWhen$];
      }
      set buildWhen(value) {
        super.buildWhen = value;
      }
      createState() {
        return new (__t$_BlocBuilderBaseStateOfB$S()).new();
      }
      debugFillProperties(properties) {
        let t4;
        super.debugFillProperties(properties);
        t4 = properties;
        (() => {
          t4.add(new (__t$ObjectFlagPropertyOfSAndSToNbool()).has("buildWhen", this.buildWhen));
          t4.add(new (__t$DiagnosticsPropertyOfBN()).new("bloc", this.bloc));
          return t4;
        })();
      }
    }
    (BlocBuilderBase.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let bloc = opts && 'bloc' in opts ? opts.bloc : null;
      let buildWhen = opts && 'buildWhen' in opts ? opts.buildWhen : null;
      this[bloc$0] = bloc;
      this[buildWhen$] = buildWhen;
      BlocBuilderBase.__proto__.new.call(this, {key: key});
      ;
    }).prototype = BlocBuilderBase.prototype;
    dart.addTypeTests(BlocBuilderBase);
    BlocBuilderBase.prototype[_is_BlocBuilderBase_default] = true;
    dart.addTypeCaches(BlocBuilderBase);
    dart.setMethodSignature(BlocBuilderBase, () => ({
      __proto__: dart.getMethods(BlocBuilderBase.__proto__),
      createState: dart.fnType(framework.State$(bloc_builder.BlocBuilderBase$(B, S)), [])
    }));
    dart.setLibraryUri(BlocBuilderBase, I[12]);
    dart.setFieldSignature(BlocBuilderBase, () => ({
      __proto__: dart.getFields(BlocBuilderBase.__proto__),
      bloc: dart.finalFieldType(dart.nullable(B)),
      buildWhen: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [S, S])))
    }));
    return BlocBuilderBase;
  });
  bloc_builder.BlocBuilderBase = bloc_builder.BlocBuilderBase$();
  dart.addTypeTests(bloc_builder.BlocBuilderBase, _is_BlocBuilderBase_default);
  const _is_BlocBuilder_default = Symbol('_is_BlocBuilder_default');
  bloc_builder.BlocBuilder$ = dart.generic((B, S) => {
    var __t$BuildContextAndSToWidget = () => (__t$BuildContextAndSToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, S])))();
    var __t$ObjectFlagPropertyOfBuildContextAndSToWidget = () => (__t$ObjectFlagPropertyOfBuildContextAndSToWidget = dart.constFn(diagnostics.ObjectFlagProperty$(__t$BuildContextAndSToWidget())))();
    class BlocBuilder extends bloc_builder.BlocBuilderBase$(B, S) {
      get builder() {
        return this[builder$];
      }
      set builder(value) {
        super.builder = value;
      }
      static ['_#new#tearOff'](B, S, opts) {
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let key = opts && 'key' in opts ? opts.key : null;
        let bloc = opts && 'bloc' in opts ? opts.bloc : null;
        let buildWhen = opts && 'buildWhen' in opts ? opts.buildWhen : null;
        return new (bloc_builder.BlocBuilder$(B, S)).new({builder: builder, key: key, bloc: bloc, buildWhen: buildWhen});
      }
      build(context, state) {
        let t5, t4;
        S.as(state);
        t4 = context;
        t5 = state;
        return this.builder(t4, t5);
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new (__t$ObjectFlagPropertyOfBuildContextAndSToWidget()).has("builder", this.builder));
      }
    }
    (BlocBuilder.new = function(opts) {
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let bloc = opts && 'bloc' in opts ? opts.bloc : null;
      let buildWhen = opts && 'buildWhen' in opts ? opts.buildWhen : null;
      this[builder$] = builder;
      BlocBuilder.__proto__.new.call(this, {key: key, bloc: bloc, buildWhen: buildWhen});
      ;
    }).prototype = BlocBuilder.prototype;
    dart.addTypeTests(BlocBuilder);
    BlocBuilder.prototype[_is_BlocBuilder_default] = true;
    dart.addTypeCaches(BlocBuilder);
    dart.setMethodSignature(BlocBuilder, () => ({
      __proto__: dart.getMethods(BlocBuilder.__proto__),
      build: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(BlocBuilder, I[12]);
    dart.setFieldSignature(BlocBuilder, () => ({
      __proto__: dart.getFields(BlocBuilder.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, S]))
    }));
    return BlocBuilder;
  });
  bloc_builder.BlocBuilder = bloc_builder.BlocBuilder$();
  dart.addTypeTests(bloc_builder.BlocBuilder, _is_BlocBuilder_default);
  var ___BlocBuilderBaseState__bloc = dart.privateName(bloc_builder, "_#_BlocBuilderBaseState#_bloc");
  var ___BlocBuilderBaseState__state = dart.privateName(bloc_builder, "_#_BlocBuilderBaseState#_state");
  var ___BlocBuilderBaseState__state_isSet = dart.privateName(bloc_builder, "_#_BlocBuilderBaseState#_state#isSet");
  var _bloc = dart.privateName(bloc_builder, "_bloc");
  var _state = dart.privateName(bloc_builder, "_state");
  const _is__BlocBuilderBaseState_default = Symbol('_is__BlocBuilderBaseState_default');
  bloc_builder._BlocBuilderBaseState$ = dart.generic((B, S) => {
    var __t$BlocBuilderBaseOfB$S = () => (__t$BlocBuilderBaseOfB$S = dart.constFn(bloc_builder.BlocBuilderBase$(B, S)))();
    var __t$BTobool = () => (__t$BTobool = dart.constFn(dart.fnType(core.bool, [B])))();
    var __t$BlocListenerOfB$S = () => (__t$BlocListenerOfB$S = dart.constFn(bloc_listener.BlocListener$(B, S)))();
    var __t$SAndSTobool = () => (__t$SAndSTobool = dart.constFn(dart.fnType(core.bool, [S, S])))();
    var __t$SAndSToNbool = () => (__t$SAndSToNbool = dart.constFn(dart.nullable(__t$SAndSTobool())))();
    var __t$BuildContextAndSTovoid = () => (__t$BuildContextAndSTovoid = dart.constFn(dart.fnType(dart.void, [framework.BuildContext, S])))();
    class _BlocBuilderBaseState extends framework.State$(bloc_builder.BlocBuilderBase$(B, S)) {
      get [_bloc]() {
        let t4;
        t4 = this[___BlocBuilderBaseState__bloc];
        return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_bloc")) : t4;
      }
      set [_bloc](_bloc$35param) {
        this[___BlocBuilderBaseState__bloc] = _bloc$35param;
      }
      get [_state]() {
        let t4;
        return this[___BlocBuilderBaseState__state_isSet] ? (t4 = this[___BlocBuilderBaseState__state], t4) : dart.throw(new _internal.LateError.fieldNI("_state"));
      }
      set [_state](_state$35param) {
        this[___BlocBuilderBaseState__state_isSet] = true;
        this[___BlocBuilderBaseState__state] = _state$35param;
      }
      initState() {
        let t4;
        super.initState();
        this[_bloc] = (t4 = this.widget.bloc, t4 == null ? provider$['ReadContext|read'](B, this.context) : t4);
        this[_state] = this[_bloc].state;
      }
      didUpdateWidget(oldWidget) {
        let t4, t4$;
        __t$BlocBuilderBaseOfB$S().as(oldWidget);
        super.didUpdateWidget(oldWidget);
        let oldBloc = (t4 = oldWidget.bloc, t4 == null ? provider$['ReadContext|read'](B, this.context) : t4);
        let currentBloc = (t4$ = this.widget.bloc, t4$ == null ? oldBloc : t4$);
        if (!oldBloc[$_equals](currentBloc)) {
          this[_bloc] = currentBloc;
          this[_state] = this[_bloc].state;
        }
      }
      didChangeDependencies() {
        let t4;
        super.didChangeDependencies();
        let bloc = (t4 = this.widget.bloc, t4 == null ? provider$['ReadContext|read'](B, this.context) : t4);
        if (!this[_bloc][$_equals](bloc)) {
          this[_bloc] = bloc;
          this[_state] = this[_bloc].state;
        }
      }
      build(context) {
        if (this.widget.bloc == null) {
          provider$['SelectContext|select'](B, core.bool, context, dart.fn(bloc => this[_bloc] === bloc, __t$BTobool()));
        }
        return new (__t$BlocListenerOfB$S()).new({bloc: this[_bloc], listenWhen: __t$SAndSToNbool().as(this.widget.buildWhen), listener: dart.fn((context, state) => this.setState(dart.fn(() => this[_state] = state, T$.VoidTovoid())), __t$BuildContextAndSTovoid()), child: this.widget.build(context, this[_state])});
      }
      static ['_#new#tearOff'](B, S) {
        return new (bloc_builder._BlocBuilderBaseState$(B, S)).new();
      }
    }
    (_BlocBuilderBaseState.new = function() {
      this[___BlocBuilderBaseState__bloc] = null;
      this[___BlocBuilderBaseState__state] = null;
      this[___BlocBuilderBaseState__state_isSet] = false;
      _BlocBuilderBaseState.__proto__.new.call(this);
      ;
    }).prototype = _BlocBuilderBaseState.prototype;
    dart.addTypeTests(_BlocBuilderBaseState);
    _BlocBuilderBaseState.prototype[_is__BlocBuilderBaseState_default] = true;
    dart.addTypeCaches(_BlocBuilderBaseState);
    dart.setMethodSignature(_BlocBuilderBaseState, () => ({
      __proto__: dart.getMethods(_BlocBuilderBaseState.__proto__),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setGetterSignature(_BlocBuilderBaseState, () => ({
      __proto__: dart.getGetters(_BlocBuilderBaseState.__proto__),
      [_bloc]: B,
      [_state]: S
    }));
    dart.setSetterSignature(_BlocBuilderBaseState, () => ({
      __proto__: dart.getSetters(_BlocBuilderBaseState.__proto__),
      [_bloc]: B,
      [_state]: S
    }));
    dart.setLibraryUri(_BlocBuilderBaseState, I[12]);
    dart.setFieldSignature(_BlocBuilderBaseState, () => ({
      __proto__: dart.getFields(_BlocBuilderBaseState.__proto__),
      [___BlocBuilderBaseState__bloc]: dart.fieldType(dart.nullable(B)),
      [___BlocBuilderBaseState__state]: dart.fieldType(dart.nullable(S)),
      [___BlocBuilderBaseState__state_isSet]: dart.fieldType(core.bool)
    }));
    return _BlocBuilderBaseState;
  });
  bloc_builder._BlocBuilderBaseState = bloc_builder._BlocBuilderBaseState$();
  dart.addTypeTests(bloc_builder._BlocBuilderBaseState, _is__BlocBuilderBaseState_default);
  var bloc$1 = dart.privateName(bloc_consumer, "BlocConsumer.bloc");
  var builder$0 = dart.privateName(bloc_consumer, "BlocConsumer.builder");
  var listener$ = dart.privateName(bloc_consumer, "BlocConsumer.listener");
  var buildWhen$0 = dart.privateName(bloc_consumer, "BlocConsumer.buildWhen");
  var listenWhen$ = dart.privateName(bloc_consumer, "BlocConsumer.listenWhen");
  const _is_BlocConsumer_default = Symbol('_is_BlocConsumer_default');
  bloc_consumer.BlocConsumer$ = dart.generic((B, S) => {
    var __t$_BlocConsumerStateOfB$S = () => (__t$_BlocConsumerStateOfB$S = dart.constFn(bloc_consumer._BlocConsumerState$(B, S)))();
    var __t$BN = () => (__t$BN = dart.constFn(dart.nullable(B)))();
    var __t$DiagnosticsPropertyOfBN = () => (__t$DiagnosticsPropertyOfBN = dart.constFn(diagnostics.DiagnosticsProperty$(__t$BN())))();
    var __t$BuildContextAndSToWidget = () => (__t$BuildContextAndSToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, S])))();
    var __t$ObjectFlagPropertyOfBuildContextAndSToWidget = () => (__t$ObjectFlagPropertyOfBuildContextAndSToWidget = dart.constFn(diagnostics.ObjectFlagProperty$(__t$BuildContextAndSToWidget())))();
    var __t$BuildContextAndSTovoid = () => (__t$BuildContextAndSTovoid = dart.constFn(dart.fnType(dart.void, [framework.BuildContext, S])))();
    var __t$ObjectFlagPropertyOfBuildContextAndSTovoid = () => (__t$ObjectFlagPropertyOfBuildContextAndSTovoid = dart.constFn(diagnostics.ObjectFlagProperty$(__t$BuildContextAndSTovoid())))();
    var __t$SAndSTobool = () => (__t$SAndSTobool = dart.constFn(dart.fnType(core.bool, [S, S])))();
    var __t$SAndSToNbool = () => (__t$SAndSToNbool = dart.constFn(dart.nullable(__t$SAndSTobool())))();
    var __t$ObjectFlagPropertyOfSAndSToNbool = () => (__t$ObjectFlagPropertyOfSAndSToNbool = dart.constFn(diagnostics.ObjectFlagProperty$(__t$SAndSToNbool())))();
    class BlocConsumer extends framework.StatefulWidget {
      get bloc() {
        return this[bloc$1];
      }
      set bloc(value) {
        super.bloc = value;
      }
      get builder() {
        return this[builder$0];
      }
      set builder(value) {
        super.builder = value;
      }
      get listener() {
        return this[listener$];
      }
      set listener(value) {
        super.listener = value;
      }
      get buildWhen() {
        return this[buildWhen$0];
      }
      set buildWhen(value) {
        super.buildWhen = value;
      }
      get listenWhen() {
        return this[listenWhen$];
      }
      set listenWhen(value) {
        super.listenWhen = value;
      }
      static ['_#new#tearOff'](B, S, opts) {
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let listener = opts && 'listener' in opts ? opts.listener : null;
        let key = opts && 'key' in opts ? opts.key : null;
        let bloc = opts && 'bloc' in opts ? opts.bloc : null;
        let buildWhen = opts && 'buildWhen' in opts ? opts.buildWhen : null;
        let listenWhen = opts && 'listenWhen' in opts ? opts.listenWhen : null;
        return new (bloc_consumer.BlocConsumer$(B, S)).new({builder: builder, listener: listener, key: key, bloc: bloc, buildWhen: buildWhen, listenWhen: listenWhen});
      }
      createState() {
        return new (__t$_BlocConsumerStateOfB$S()).new();
      }
      debugFillProperties(properties) {
        let t4;
        super.debugFillProperties(properties);
        t4 = properties;
        (() => {
          t4.add(new (__t$DiagnosticsPropertyOfBN()).new("bloc", this.bloc));
          t4.add(new (__t$ObjectFlagPropertyOfBuildContextAndSToWidget()).has("builder", this.builder));
          t4.add(new (__t$ObjectFlagPropertyOfBuildContextAndSTovoid()).has("listener", this.listener));
          t4.add(new (__t$ObjectFlagPropertyOfSAndSToNbool()).has("buildWhen", this.buildWhen));
          t4.add(new (__t$ObjectFlagPropertyOfSAndSToNbool()).has("listenWhen", this.listenWhen));
          return t4;
        })();
      }
    }
    (BlocConsumer.new = function(opts) {
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let listener = opts && 'listener' in opts ? opts.listener : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let bloc = opts && 'bloc' in opts ? opts.bloc : null;
      let buildWhen = opts && 'buildWhen' in opts ? opts.buildWhen : null;
      let listenWhen = opts && 'listenWhen' in opts ? opts.listenWhen : null;
      this[builder$0] = builder;
      this[listener$] = listener;
      this[bloc$1] = bloc;
      this[buildWhen$0] = buildWhen;
      this[listenWhen$] = listenWhen;
      BlocConsumer.__proto__.new.call(this, {key: key});
      ;
    }).prototype = BlocConsumer.prototype;
    dart.addTypeTests(BlocConsumer);
    BlocConsumer.prototype[_is_BlocConsumer_default] = true;
    dart.addTypeCaches(BlocConsumer);
    dart.setMethodSignature(BlocConsumer, () => ({
      __proto__: dart.getMethods(BlocConsumer.__proto__),
      createState: dart.fnType(framework.State$(bloc_consumer.BlocConsumer$(B, S)), [])
    }));
    dart.setLibraryUri(BlocConsumer, I[13]);
    dart.setFieldSignature(BlocConsumer, () => ({
      __proto__: dart.getFields(BlocConsumer.__proto__),
      bloc: dart.finalFieldType(dart.nullable(B)),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, S])),
      listener: dart.finalFieldType(dart.fnType(dart.void, [framework.BuildContext, S])),
      buildWhen: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [S, S]))),
      listenWhen: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [S, S])))
    }));
    return BlocConsumer;
  });
  bloc_consumer.BlocConsumer = bloc_consumer.BlocConsumer$();
  dart.addTypeTests(bloc_consumer.BlocConsumer, _is_BlocConsumer_default);
  var ___BlocConsumerState__bloc = dart.privateName(bloc_consumer, "_#_BlocConsumerState#_bloc");
  var _bloc$ = dart.privateName(bloc_consumer, "_bloc");
  const _is__BlocConsumerState_default = Symbol('_is__BlocConsumerState_default');
  bloc_consumer._BlocConsumerState$ = dart.generic((B, S) => {
    var __t$BlocConsumerOfB$S = () => (__t$BlocConsumerOfB$S = dart.constFn(bloc_consumer.BlocConsumer$(B, S)))();
    var __t$BTobool = () => (__t$BTobool = dart.constFn(dart.fnType(core.bool, [B])))();
    var __t$BlocBuilderOfB$S = () => (__t$BlocBuilderOfB$S = dart.constFn(bloc_builder.BlocBuilder$(B, S)))();
    var __t$BuildContextAndSToWidget = () => (__t$BuildContextAndSToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, S])))();
    var __t$SAndSTobool = () => (__t$SAndSTobool = dart.constFn(dart.fnType(core.bool, [S, S])))();
    var __t$SAndSToNbool = () => (__t$SAndSToNbool = dart.constFn(dart.nullable(__t$SAndSTobool())))();
    var __t$BuildContextAndSTovoid = () => (__t$BuildContextAndSTovoid = dart.constFn(dart.fnType(dart.void, [framework.BuildContext, S])))();
    class _BlocConsumerState extends framework.State$(bloc_consumer.BlocConsumer$(B, S)) {
      get [_bloc$]() {
        let t4;
        t4 = this[___BlocConsumerState__bloc];
        return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_bloc")) : t4;
      }
      set [_bloc$](_bloc$35param) {
        this[___BlocConsumerState__bloc] = _bloc$35param;
      }
      initState() {
        let t4;
        super.initState();
        this[_bloc$] = (t4 = this.widget.bloc, t4 == null ? provider$['ReadContext|read'](B, this.context) : t4);
      }
      didUpdateWidget(oldWidget) {
        let t4, t4$;
        __t$BlocConsumerOfB$S().as(oldWidget);
        super.didUpdateWidget(oldWidget);
        let oldBloc = (t4 = oldWidget.bloc, t4 == null ? provider$['ReadContext|read'](B, this.context) : t4);
        let currentBloc = (t4$ = this.widget.bloc, t4$ == null ? oldBloc : t4$);
        if (!oldBloc[$_equals](currentBloc)) this[_bloc$] = currentBloc;
      }
      didChangeDependencies() {
        let t4;
        super.didChangeDependencies();
        let bloc = (t4 = this.widget.bloc, t4 == null ? provider$['ReadContext|read'](B, this.context) : t4);
        if (!this[_bloc$][$_equals](bloc)) this[_bloc$] = bloc;
      }
      build(context) {
        if (this.widget.bloc == null) {
          provider$['SelectContext|select'](B, core.bool, context, dart.fn(bloc => this[_bloc$] === bloc, __t$BTobool()));
        }
        return new (__t$BlocBuilderOfB$S()).new({bloc: this[_bloc$], builder: __t$BuildContextAndSToWidget().as(this.widget.builder), buildWhen: dart.fn((previous, current) => {
            let t4, t4$, t6, t5, t4$0, t4$1, t4$2;
            if (dart.test((t4$ = (t4 = __t$SAndSToNbool().as(this.widget.listenWhen), t4 == null ? null : t4(previous, current)), t4$ == null ? true : t4$))) {
              t4$0 = this.widget;
              t5 = context;
              t6 = current;
              __t$BuildContextAndSTovoid().as(t4$0.listener)(t5, t6);
            }
            t4$2 = (t4$1 = __t$SAndSToNbool().as(this.widget.buildWhen), t4$1 == null ? null : t4$1(previous, current));
            return t4$2 == null ? true : t4$2;
          }, __t$SAndSTobool())});
      }
      static ['_#new#tearOff'](B, S) {
        return new (bloc_consumer._BlocConsumerState$(B, S)).new();
      }
    }
    (_BlocConsumerState.new = function() {
      this[___BlocConsumerState__bloc] = null;
      _BlocConsumerState.__proto__.new.call(this);
      ;
    }).prototype = _BlocConsumerState.prototype;
    dart.addTypeTests(_BlocConsumerState);
    _BlocConsumerState.prototype[_is__BlocConsumerState_default] = true;
    dart.addTypeCaches(_BlocConsumerState);
    dart.setMethodSignature(_BlocConsumerState, () => ({
      __proto__: dart.getMethods(_BlocConsumerState.__proto__),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setGetterSignature(_BlocConsumerState, () => ({
      __proto__: dart.getGetters(_BlocConsumerState.__proto__),
      [_bloc$]: B
    }));
    dart.setSetterSignature(_BlocConsumerState, () => ({
      __proto__: dart.getSetters(_BlocConsumerState.__proto__),
      [_bloc$]: B
    }));
    dart.setLibraryUri(_BlocConsumerState, I[13]);
    dart.setFieldSignature(_BlocConsumerState, () => ({
      __proto__: dart.getFields(_BlocConsumerState.__proto__),
      [___BlocConsumerState__bloc]: dart.fieldType(dart.nullable(B))
    }));
    return _BlocConsumerState;
  });
  bloc_consumer._BlocConsumerState = bloc_consumer._BlocConsumerState$();
  dart.addTypeTests(bloc_consumer._BlocConsumerState, _is__BlocConsumerState_default);
  var child$ = dart.privateName(bloc_listener, "BlocListenerBase.child");
  var bloc$2 = dart.privateName(bloc_listener, "BlocListenerBase.bloc");
  var listener$0 = dart.privateName(bloc_listener, "BlocListenerBase.listener");
  var listenWhen$0 = dart.privateName(bloc_listener, "BlocListenerBase.listenWhen");
  var _child = dart.privateName(nested, "SingleChildStatefulWidget._child");
  var _child$ = dart.privateName(nested, "_child");
  nested.SingleChildStatefulWidget = class SingleChildStatefulWidget extends framework.StatefulWidget {
    get [_child$]() {
      return this[_child];
    }
    set [_child$](value) {
      super[_child$] = value;
    }
    createElement() {
      return new nested.SingleChildStatefulElement.new(this);
    }
  };
  (nested.SingleChildStatefulWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[_child] = child;
    nested.SingleChildStatefulWidget.__proto__.new.call(this, {key: key});
    ;
  }).prototype = nested.SingleChildStatefulWidget.prototype;
  dart.addTypeTests(nested.SingleChildStatefulWidget);
  dart.addTypeCaches(nested.SingleChildStatefulWidget);
  nested.SingleChildStatefulWidget[dart.implements] = () => [nested.SingleChildWidget];
  dart.setMethodSignature(nested.SingleChildStatefulWidget, () => ({
    __proto__: dart.getMethods(nested.SingleChildStatefulWidget.__proto__),
    createElement: dart.fnType(nested.SingleChildStatefulElement, [])
  }));
  dart.setLibraryUri(nested.SingleChildStatefulWidget, I[14]);
  dart.setFieldSignature(nested.SingleChildStatefulWidget, () => ({
    __proto__: dart.getFields(nested.SingleChildStatefulWidget.__proto__),
    [_child$]: dart.finalFieldType(dart.nullable(framework.Widget))
  }));
  const _is_BlocListenerBase_default = Symbol('_is_BlocListenerBase_default');
  bloc_listener.BlocListenerBase$ = dart.generic((B, S) => {
    var __t$_BlocListenerBaseStateOfB$S = () => (__t$_BlocListenerBaseStateOfB$S = dart.constFn(bloc_listener._BlocListenerBaseState$(B, S)))();
    var __t$BN = () => (__t$BN = dart.constFn(dart.nullable(B)))();
    var __t$DiagnosticsPropertyOfBN = () => (__t$DiagnosticsPropertyOfBN = dart.constFn(diagnostics.DiagnosticsProperty$(__t$BN())))();
    var __t$BuildContextAndSTovoid = () => (__t$BuildContextAndSTovoid = dart.constFn(dart.fnType(dart.void, [framework.BuildContext, S])))();
    var __t$ObjectFlagPropertyOfBuildContextAndSTovoid = () => (__t$ObjectFlagPropertyOfBuildContextAndSTovoid = dart.constFn(diagnostics.ObjectFlagProperty$(__t$BuildContextAndSTovoid())))();
    var __t$SAndSTobool = () => (__t$SAndSTobool = dart.constFn(dart.fnType(core.bool, [S, S])))();
    var __t$SAndSToNbool = () => (__t$SAndSToNbool = dart.constFn(dart.nullable(__t$SAndSTobool())))();
    var __t$ObjectFlagPropertyOfSAndSToNbool = () => (__t$ObjectFlagPropertyOfSAndSToNbool = dart.constFn(diagnostics.ObjectFlagProperty$(__t$SAndSToNbool())))();
    class BlocListenerBase extends nested.SingleChildStatefulWidget {
      get child() {
        return this[child$];
      }
      set child(value) {
        super.child = value;
      }
      get bloc() {
        return this[bloc$2];
      }
      set bloc(value) {
        super.bloc = value;
      }
      get listener() {
        return this[listener$0];
      }
      set listener(value) {
        super.listener = value;
      }
      get listenWhen() {
        return this[listenWhen$0];
      }
      set listenWhen(value) {
        super.listenWhen = value;
      }
      createState() {
        return new (__t$_BlocListenerBaseStateOfB$S()).new();
      }
      debugFillProperties(properties) {
        let t4;
        super.debugFillProperties(properties);
        t4 = properties;
        (() => {
          t4.add(new (__t$DiagnosticsPropertyOfBN()).new("bloc", this.bloc));
          t4.add(new (__t$ObjectFlagPropertyOfBuildContextAndSTovoid()).has("listener", this.listener));
          t4.add(new (__t$ObjectFlagPropertyOfSAndSToNbool()).has("listenWhen", this.listenWhen));
          return t4;
        })();
      }
    }
    (BlocListenerBase.new = function(opts) {
      let listener = opts && 'listener' in opts ? opts.listener : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let bloc = opts && 'bloc' in opts ? opts.bloc : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let listenWhen = opts && 'listenWhen' in opts ? opts.listenWhen : null;
      this[listener$0] = listener;
      this[bloc$2] = bloc;
      this[child$] = child;
      this[listenWhen$0] = listenWhen;
      BlocListenerBase.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = BlocListenerBase.prototype;
    dart.addTypeTests(BlocListenerBase);
    BlocListenerBase.prototype[_is_BlocListenerBase_default] = true;
    dart.addTypeCaches(BlocListenerBase);
    dart.setMethodSignature(BlocListenerBase, () => ({
      __proto__: dart.getMethods(BlocListenerBase.__proto__),
      createState: dart.fnType(nested.SingleChildState$(bloc_listener.BlocListenerBase$(B, S)), [])
    }));
    dart.setLibraryUri(BlocListenerBase, I[15]);
    dart.setFieldSignature(BlocListenerBase, () => ({
      __proto__: dart.getFields(BlocListenerBase.__proto__),
      child: dart.finalFieldType(dart.nullable(framework.Widget)),
      bloc: dart.finalFieldType(dart.nullable(B)),
      listener: dart.finalFieldType(dart.fnType(dart.void, [framework.BuildContext, S])),
      listenWhen: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [S, S])))
    }));
    return BlocListenerBase;
  });
  bloc_listener.BlocListenerBase = bloc_listener.BlocListenerBase$();
  dart.addTypeTests(bloc_listener.BlocListenerBase, _is_BlocListenerBase_default);
  const _is_BlocListener_default = Symbol('_is_BlocListener_default');
  bloc_listener.BlocListener$ = dart.generic((B, S) => {
    class BlocListener extends bloc_listener.BlocListenerBase$(B, S) {
      static ['_#new#tearOff'](B, S, opts) {
        let listener = opts && 'listener' in opts ? opts.listener : null;
        let key = opts && 'key' in opts ? opts.key : null;
        let bloc = opts && 'bloc' in opts ? opts.bloc : null;
        let listenWhen = opts && 'listenWhen' in opts ? opts.listenWhen : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (bloc_listener.BlocListener$(B, S)).new({listener: listener, key: key, bloc: bloc, listenWhen: listenWhen, child: child});
      }
    }
    (BlocListener.new = function(opts) {
      let listener = opts && 'listener' in opts ? opts.listener : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let bloc = opts && 'bloc' in opts ? opts.bloc : null;
      let listenWhen = opts && 'listenWhen' in opts ? opts.listenWhen : null;
      let child = opts && 'child' in opts ? opts.child : null;
      BlocListener.__proto__.new.call(this, {key: key, child: child, listener: listener, bloc: bloc, listenWhen: listenWhen});
      ;
    }).prototype = BlocListener.prototype;
    dart.addTypeTests(BlocListener);
    BlocListener.prototype[_is_BlocListener_default] = true;
    dart.addTypeCaches(BlocListener);
    dart.setLibraryUri(BlocListener, I[15]);
    return BlocListener;
  });
  bloc_listener.BlocListener = bloc_listener.BlocListener$();
  dart.addTypeTests(bloc_listener.BlocListener, _is_BlocListener_default);
  var _subscription = dart.privateName(bloc_listener, "_subscription");
  var ___BlocListenerBaseState__bloc = dart.privateName(bloc_listener, "_#_BlocListenerBaseState#_bloc");
  var ___BlocListenerBaseState__previousState = dart.privateName(bloc_listener, "_#_BlocListenerBaseState#_previousState");
  var ___BlocListenerBaseState__previousState_isSet = dart.privateName(bloc_listener, "_#_BlocListenerBaseState#_previousState#isSet");
  var _bloc$0 = dart.privateName(bloc_listener, "_bloc");
  var _previousState = dart.privateName(bloc_listener, "_previousState");
  var _subscribe = dart.privateName(bloc_listener, "_subscribe");
  var _unsubscribe = dart.privateName(bloc_listener, "_unsubscribe");
  const _is_SingleChildState_default = Symbol('_is_SingleChildState_default');
  nested.SingleChildState$ = dart.generic(T => {
    class SingleChildState extends framework.State$(T) {
      build(context) {
        return this.buildWithChild(context, this.widget[_child$]);
      }
    }
    (SingleChildState.new = function() {
      SingleChildState.__proto__.new.call(this);
      ;
    }).prototype = SingleChildState.prototype;
    dart.addTypeTests(SingleChildState);
    SingleChildState.prototype[_is_SingleChildState_default] = true;
    dart.addTypeCaches(SingleChildState);
    dart.setMethodSignature(SingleChildState, () => ({
      __proto__: dart.getMethods(SingleChildState.__proto__),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setLibraryUri(SingleChildState, I[14]);
    return SingleChildState;
  });
  nested.SingleChildState = nested.SingleChildState$();
  dart.addTypeTests(nested.SingleChildState, _is_SingleChildState_default);
  const _is__BlocListenerBaseState_default = Symbol('_is__BlocListenerBaseState_default');
  bloc_listener._BlocListenerBaseState$ = dart.generic((B, S) => {
    var __t$BlocListenerBaseOfB$S = () => (__t$BlocListenerBaseOfB$S = dart.constFn(bloc_listener.BlocListenerBase$(B, S)))();
    var __t$BTobool = () => (__t$BTobool = dart.constFn(dart.fnType(core.bool, [B])))();
    var __t$SAndSTobool = () => (__t$SAndSTobool = dart.constFn(dart.fnType(core.bool, [S, S])))();
    var __t$SAndSToNbool = () => (__t$SAndSToNbool = dart.constFn(dart.nullable(__t$SAndSTobool())))();
    var __t$BuildContextAndSTovoid = () => (__t$BuildContextAndSTovoid = dart.constFn(dart.fnType(dart.void, [framework.BuildContext, S])))();
    var __t$STovoid = () => (__t$STovoid = dart.constFn(dart.fnType(dart.void, [S])))();
    class _BlocListenerBaseState extends nested.SingleChildState$(bloc_listener.BlocListenerBase$(B, S)) {
      get [_bloc$0]() {
        let t4;
        t4 = this[___BlocListenerBaseState__bloc];
        return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_bloc")) : t4;
      }
      set [_bloc$0](_bloc$35param) {
        this[___BlocListenerBaseState__bloc] = _bloc$35param;
      }
      get [_previousState]() {
        let t4;
        return this[___BlocListenerBaseState__previousState_isSet] ? (t4 = this[___BlocListenerBaseState__previousState], t4) : dart.throw(new _internal.LateError.fieldNI("_previousState"));
      }
      set [_previousState](_previousState$35param) {
        this[___BlocListenerBaseState__previousState_isSet] = true;
        this[___BlocListenerBaseState__previousState] = _previousState$35param;
      }
      initState() {
        let t4;
        super.initState();
        this[_bloc$0] = (t4 = this.widget.bloc, t4 == null ? provider$['ReadContext|read'](B, this.context) : t4);
        this[_previousState] = this[_bloc$0].state;
        this[_subscribe]();
      }
      didUpdateWidget(oldWidget) {
        let t4, t4$;
        __t$BlocListenerBaseOfB$S().as(oldWidget);
        super.didUpdateWidget(oldWidget);
        let oldBloc = (t4 = oldWidget.bloc, t4 == null ? provider$['ReadContext|read'](B, this.context) : t4);
        let currentBloc = (t4$ = this.widget.bloc, t4$ == null ? oldBloc : t4$);
        if (!oldBloc[$_equals](currentBloc)) {
          if (this[_subscription] != null) {
            this[_unsubscribe]();
            this[_bloc$0] = currentBloc;
            this[_previousState] = this[_bloc$0].state;
          }
          this[_subscribe]();
        }
      }
      didChangeDependencies() {
        let t4;
        super.didChangeDependencies();
        let bloc = (t4 = this.widget.bloc, t4 == null ? provider$['ReadContext|read'](B, this.context) : t4);
        if (!this[_bloc$0][$_equals](bloc)) {
          if (this[_subscription] != null) {
            this[_unsubscribe]();
            this[_bloc$0] = bloc;
            this[_previousState] = this[_bloc$0].state;
          }
          this[_subscribe]();
        }
      }
      buildWithChild(context, child) {
        if (!(child != null)) dart.assertFailed(dart.str(this.widget[$runtimeType]) + " used outside of MultiBlocListener must specify a child", I[16], 195, 7, "child != null");
        if (this.widget.bloc == null) {
          provider$['SelectContext|select'](B, core.bool, context, dart.fn(bloc => this[_bloc$0] === bloc, __t$BTobool()));
        }
        return dart.nullCheck(child);
      }
      dispose() {
        this[_unsubscribe]();
        super.dispose();
      }
      [_subscribe]() {
        this[_subscription] = this[_bloc$0].stream.listen(dart.fn(state => {
          let t4, t4$, t6, t5, t4$0;
          if (dart.test((t4$ = (t4 = __t$SAndSToNbool().as(this.widget.listenWhen), t4 == null ? null : t4(this[_previousState], state)), t4$ == null ? true : t4$))) {
            t4$0 = this.widget;
            t5 = this.context;
            t6 = state;
            __t$BuildContextAndSTovoid().as(t4$0.listener)(t5, t6);
          }
          this[_previousState] = state;
        }, __t$STovoid()));
      }
      [_unsubscribe]() {
        let t4;
        t4 = this[_subscription];
        t4 == null ? null : t4.cancel();
        this[_subscription] = null;
      }
      static ['_#new#tearOff'](B, S) {
        return new (bloc_listener._BlocListenerBaseState$(B, S)).new();
      }
    }
    (_BlocListenerBaseState.new = function() {
      this[_subscription] = null;
      this[___BlocListenerBaseState__bloc] = null;
      this[___BlocListenerBaseState__previousState] = null;
      this[___BlocListenerBaseState__previousState_isSet] = false;
      _BlocListenerBaseState.__proto__.new.call(this);
      ;
    }).prototype = _BlocListenerBaseState.prototype;
    dart.addTypeTests(_BlocListenerBaseState);
    _BlocListenerBaseState.prototype[_is__BlocListenerBaseState_default] = true;
    dart.addTypeCaches(_BlocListenerBaseState);
    dart.setMethodSignature(_BlocListenerBaseState, () => ({
      __proto__: dart.getMethods(_BlocListenerBaseState.__proto__),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)]),
      [_subscribe]: dart.fnType(dart.void, []),
      [_unsubscribe]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_BlocListenerBaseState, () => ({
      __proto__: dart.getGetters(_BlocListenerBaseState.__proto__),
      [_bloc$0]: B,
      [_previousState]: S
    }));
    dart.setSetterSignature(_BlocListenerBaseState, () => ({
      __proto__: dart.getSetters(_BlocListenerBaseState.__proto__),
      [_bloc$0]: B,
      [_previousState]: S
    }));
    dart.setLibraryUri(_BlocListenerBaseState, I[15]);
    dart.setFieldSignature(_BlocListenerBaseState, () => ({
      __proto__: dart.getFields(_BlocListenerBaseState.__proto__),
      [_subscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(S))),
      [___BlocListenerBaseState__bloc]: dart.fieldType(dart.nullable(B)),
      [___BlocListenerBaseState__previousState]: dart.fieldType(dart.nullable(S)),
      [___BlocListenerBaseState__previousState_isSet]: dart.fieldType(core.bool)
    }));
    return _BlocListenerBaseState;
  });
  bloc_listener._BlocListenerBaseState = bloc_listener._BlocListenerBaseState$();
  dart.addTypeTests(bloc_listener._BlocListenerBaseState, _is__BlocListenerBaseState_default);
  var child$0 = dart.privateName(bloc_provider, "BlocProvider.child");
  var lazy$ = dart.privateName(bloc_provider, "BlocProvider.lazy");
  var _create = dart.privateName(bloc_provider, "BlocProvider._create");
  var _value = dart.privateName(bloc_provider, "BlocProvider._value");
  var _create$ = dart.privateName(bloc_provider, "_create");
  var _value$ = dart.privateName(bloc_provider, "_value");
  var _child$0 = dart.privateName(nested, "SingleChildStatelessWidget._child");
  nested.SingleChildStatelessWidget = class SingleChildStatelessWidget extends framework.StatelessWidget {
    get [_child$]() {
      return this[_child$0];
    }
    set [_child$](value) {
      super[_child$] = value;
    }
    build(context) {
      return this.buildWithChild(context, this[_child$]);
    }
    createElement() {
      return new nested.SingleChildStatelessElement.new(this);
    }
  };
  (nested.SingleChildStatelessWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[_child$0] = child;
    nested.SingleChildStatelessWidget.__proto__.new.call(this, {key: key});
    ;
  }).prototype = nested.SingleChildStatelessWidget.prototype;
  dart.addTypeTests(nested.SingleChildStatelessWidget);
  dart.addTypeCaches(nested.SingleChildStatelessWidget);
  nested.SingleChildStatelessWidget[dart.implements] = () => [nested.SingleChildWidget];
  dart.setMethodSignature(nested.SingleChildStatelessWidget, () => ({
    __proto__: dart.getMethods(nested.SingleChildStatelessWidget.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    createElement: dart.fnType(nested.SingleChildStatelessElement, [])
  }));
  dart.setLibraryUri(nested.SingleChildStatelessWidget, I[14]);
  dart.setFieldSignature(nested.SingleChildStatelessWidget, () => ({
    __proto__: dart.getFields(nested.SingleChildStatelessWidget.__proto__),
    [_child$]: dart.finalFieldType(dart.nullable(framework.Widget))
  }));
  const _is_BlocProvider_default = Symbol('_is_BlocProvider_default');
  bloc_provider.BlocProvider$ = dart.generic(T => {
    var __t$InheritedProviderOfT = () => (__t$InheritedProviderOfT = dart.constFn(provider$.InheritedProvider$(T)))();
    var __t$BuildContextAndTTovoid = () => (__t$BuildContextAndTTovoid = dart.constFn(dart.fnType(dart.void, [framework.BuildContext, T])))();
    class BlocProvider extends nested.SingleChildStatelessWidget {
      get child() {
        return this[child$0];
      }
      set child(value) {
        super.child = value;
      }
      get lazy() {
        return this[lazy$];
      }
      set lazy(value) {
        super.lazy = value;
      }
      get [_create$]() {
        return this[_create];
      }
      set [_create$](value) {
        super[_create$] = value;
      }
      get [_value$]() {
        return this[_value];
      }
      set [_value$](value) {
        super[_value$] = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let create = opts && 'create' in opts ? opts.create : null;
        let key = opts && 'key' in opts ? opts.key : null;
        let child = opts && 'child' in opts ? opts.child : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : true;
        return new (bloc_provider.BlocProvider$(T)).new({create: create, key: key, child: child, lazy: lazy});
      }
      static ['_#value#tearOff'](T, opts) {
        let value = opts && 'value' in opts ? opts.value : null;
        let key = opts && 'key' in opts ? opts.key : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (bloc_provider.BlocProvider$(T)).value({value: value, key: key, child: child});
      }
      static of(T, context, opts) {
        let listen = opts && 'listen' in opts ? opts.listen : false;
        try {
          return provider$.Provider.of(T, context, {listen: listen});
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (provider$.ProviderNotFoundException.is(e)) {
            if (!e.valueType._equals(dart.wrapType(T))) dart.rethrow(e$);
            dart.throw(assertions.FlutterError.new("        BlocProvider.of() called with a context that does not contain a " + dart.str(dart.wrapType(T)) + ".\n        No ancestor could be found starting from the context that was passed to BlocProvider.of<" + dart.str(dart.wrapType(T)) + ">().\n\n        This can happen if the context you used comes from a widget above the BlocProvider.\n\n        The context used was: " + dart.str(context) + "\n        "));
          } else
            throw e$;
        }
      }
      buildWithChild(context, child) {
        if (!(child != null)) dart.assertFailed(dart.str(this[$runtimeType]) + " used outside of MultiBlocProvider must specify a child", I[17], 116, 7, "child != null");
        let value = this[_value$];
        return value != null ? new (__t$InheritedProviderOfT()).value({value: value, startListening: C[5] || CT.C5, lazy: this.lazy, child: child}) : new (__t$InheritedProviderOfT()).new({create: this[_create$], dispose: dart.fn((_, bloc) => bloc.close(), __t$BuildContextAndTTovoid()), startListening: C[5] || CT.C5, lazy: this.lazy, child: child});
      }
      static _startListening(e, value) {
        let subscription = value.stream.listen(dart.fn(_ => e.markNeedsNotifyDependents(), T$.dynamicTovoid()));
        return dart.bind(subscription, 'cancel');
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new (T$.DiagnosticsPropertyOfbool()).new("lazy", this.lazy));
      }
    }
    (BlocProvider.new = function(opts) {
      let create = opts && 'create' in opts ? opts.create : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : true;
      this[child$0] = child;
      this[lazy$] = lazy;
      this[_create] = create;
      this[_value] = null;
      BlocProvider.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = BlocProvider.prototype;
    (BlocProvider.value = function(opts) {
      let value = opts && 'value' in opts ? opts.value : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[child$0] = child;
      this[_value] = value;
      this[_create] = null;
      this[lazy$] = true;
      BlocProvider.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = BlocProvider.prototype;
    dart.addTypeTests(BlocProvider);
    BlocProvider.prototype[_is_BlocProvider_default] = true;
    dart.addTypeCaches(BlocProvider);
    dart.setMethodSignature(BlocProvider, () => ({
      __proto__: dart.getMethods(BlocProvider.__proto__),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setStaticMethodSignature(BlocProvider, () => ['of', '_startListening']);
    dart.setLibraryUri(BlocProvider, I[18]);
    dart.setFieldSignature(BlocProvider, () => ({
      __proto__: dart.getFields(BlocProvider.__proto__),
      child: dart.finalFieldType(dart.nullable(framework.Widget)),
      lazy: dart.finalFieldType(core.bool),
      [_create$]: dart.finalFieldType(dart.nullable(dart.fnType(T, [framework.BuildContext]))),
      [_value$]: dart.finalFieldType(dart.nullable(T))
    }));
    return BlocProvider;
  });
  bloc_provider.BlocProvider = bloc_provider.BlocProvider$();
  dart.addTypeTests(bloc_provider.BlocProvider, _is_BlocProvider_default);
  var bloc$3 = dart.privateName(bloc_selector, "BlocSelector.bloc");
  var builder$1 = dart.privateName(bloc_selector, "BlocSelector.builder");
  var selector$0 = dart.privateName(bloc_selector, "BlocSelector.selector");
  const _is_BlocSelector_default = Symbol('_is_BlocSelector_default');
  bloc_selector.BlocSelector$ = dart.generic((B, S, T) => {
    var __t$_BlocSelectorStateOfB$S$T = () => (__t$_BlocSelectorStateOfB$S$T = dart.constFn(bloc_selector._BlocSelectorState$(B, S, T)))();
    var __t$BN = () => (__t$BN = dart.constFn(dart.nullable(B)))();
    var __t$DiagnosticsPropertyOfBN = () => (__t$DiagnosticsPropertyOfBN = dart.constFn(diagnostics.DiagnosticsProperty$(__t$BN())))();
    var __t$SToT = () => (__t$SToT = dart.constFn(dart.fnType(T, [S])))();
    var __t$ObjectFlagPropertyOfSToT = () => (__t$ObjectFlagPropertyOfSToT = dart.constFn(diagnostics.ObjectFlagProperty$(__t$SToT())))();
    var __t$BuildContextAndTToWidget = () => (__t$BuildContextAndTToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T])))();
    var __t$ObjectFlagPropertyOfBuildContextAndTToWidget = () => (__t$ObjectFlagPropertyOfBuildContextAndTToWidget = dart.constFn(diagnostics.ObjectFlagProperty$(__t$BuildContextAndTToWidget())))();
    class BlocSelector extends framework.StatefulWidget {
      get bloc() {
        return this[bloc$3];
      }
      set bloc(value) {
        super.bloc = value;
      }
      get builder() {
        return this[builder$1];
      }
      set builder(value) {
        super.builder = value;
      }
      get selector() {
        return this[selector$0];
      }
      set selector(value) {
        super.selector = value;
      }
      static ['_#new#tearOff'](B, S, T, opts) {
        let selector = opts && 'selector' in opts ? opts.selector : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let key = opts && 'key' in opts ? opts.key : null;
        let bloc = opts && 'bloc' in opts ? opts.bloc : null;
        return new (bloc_selector.BlocSelector$(B, S, T)).new({selector: selector, builder: builder, key: key, bloc: bloc});
      }
      createState() {
        return new (__t$_BlocSelectorStateOfB$S$T()).new();
      }
      debugFillProperties(properties) {
        let t5;
        super.debugFillProperties(properties);
        t5 = properties;
        (() => {
          t5.add(new (__t$DiagnosticsPropertyOfBN()).new("bloc", this.bloc));
          t5.add(new (__t$ObjectFlagPropertyOfBuildContextAndTToWidget()).has("builder", this.builder));
          t5.add(new (__t$ObjectFlagPropertyOfSToT()).has("selector", this.selector));
          return t5;
        })();
      }
    }
    (BlocSelector.new = function(opts) {
      let selector = opts && 'selector' in opts ? opts.selector : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let bloc = opts && 'bloc' in opts ? opts.bloc : null;
      this[selector$0] = selector;
      this[builder$1] = builder;
      this[bloc$3] = bloc;
      BlocSelector.__proto__.new.call(this, {key: key});
      ;
    }).prototype = BlocSelector.prototype;
    dart.addTypeTests(BlocSelector);
    BlocSelector.prototype[_is_BlocSelector_default] = true;
    dart.addTypeCaches(BlocSelector);
    dart.setMethodSignature(BlocSelector, () => ({
      __proto__: dart.getMethods(BlocSelector.__proto__),
      createState: dart.fnType(framework.State$(bloc_selector.BlocSelector$(B, S, T)), [])
    }));
    dart.setLibraryUri(BlocSelector, I[19]);
    dart.setFieldSignature(BlocSelector, () => ({
      __proto__: dart.getFields(BlocSelector.__proto__),
      bloc: dart.finalFieldType(dart.nullable(B)),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, T])),
      selector: dart.finalFieldType(dart.fnType(T, [S]))
    }));
    return BlocSelector;
  });
  bloc_selector.BlocSelector = bloc_selector.BlocSelector$();
  dart.addTypeTests(bloc_selector.BlocSelector, _is_BlocSelector_default);
  var ___BlocSelectorState__bloc = dart.privateName(bloc_selector, "_#_BlocSelectorState#_bloc");
  var ___BlocSelectorState__state = dart.privateName(bloc_selector, "_#_BlocSelectorState#_state");
  var ___BlocSelectorState__state_isSet = dart.privateName(bloc_selector, "_#_BlocSelectorState#_state#isSet");
  var _bloc$1 = dart.privateName(bloc_selector, "_bloc");
  var _state$0 = dart.privateName(bloc_selector, "_state");
  const _is__BlocSelectorState_default = Symbol('_is__BlocSelectorState_default');
  bloc_selector._BlocSelectorState$ = dart.generic((B, S, T) => {
    var __t$BlocSelectorOfB$S$T = () => (__t$BlocSelectorOfB$S$T = dart.constFn(bloc_selector.BlocSelector$(B, S, T)))();
    var __t$BTobool = () => (__t$BTobool = dart.constFn(dart.fnType(core.bool, [B])))();
    var __t$BlocListenerOfB$S = () => (__t$BlocListenerOfB$S = dart.constFn(bloc_listener.BlocListener$(B, S)))();
    var __t$SToT = () => (__t$SToT = dart.constFn(dart.fnType(T, [S])))();
    var __t$BuildContextAndSTovoid = () => (__t$BuildContextAndSTovoid = dart.constFn(dart.fnType(dart.void, [framework.BuildContext, S])))();
    var __t$BuildContextAndTToWidget = () => (__t$BuildContextAndTToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T])))();
    class _BlocSelectorState extends framework.State$(bloc_selector.BlocSelector$(B, S, T)) {
      get [_bloc$1]() {
        let t5;
        t5 = this[___BlocSelectorState__bloc];
        return t5 == null ? dart.throw(new _internal.LateError.fieldNI("_bloc")) : t5;
      }
      set [_bloc$1](_bloc$35param) {
        this[___BlocSelectorState__bloc] = _bloc$35param;
      }
      get [_state$0]() {
        let t5;
        return this[___BlocSelectorState__state_isSet] ? (t5 = this[___BlocSelectorState__state], t5) : dart.throw(new _internal.LateError.fieldNI("_state"));
      }
      set [_state$0](_state$35param) {
        this[___BlocSelectorState__state_isSet] = true;
        this[___BlocSelectorState__state] = _state$35param;
      }
      initState() {
        let t5, t6, t5$;
        super.initState();
        this[_bloc$1] = (t5 = this.widget.bloc, t5 == null ? provider$['ReadContext|read'](B, this.context) : t5);
        this[_state$0] = (t5$ = this.widget, t6 = this[_bloc$1].state, __t$SToT().as(t5$.selector)(t6));
      }
      didUpdateWidget(oldWidget) {
        let t5, t5$, t6, t5$0;
        __t$BlocSelectorOfB$S$T().as(oldWidget);
        super.didUpdateWidget(oldWidget);
        let oldBloc = (t5 = oldWidget.bloc, t5 == null ? provider$['ReadContext|read'](B, this.context) : t5);
        let currentBloc = (t5$ = this.widget.bloc, t5$ == null ? oldBloc : t5$);
        if (!oldBloc[$_equals](currentBloc)) {
          this[_bloc$1] = currentBloc;
          this[_state$0] = (t5$0 = this.widget, t6 = this[_bloc$1].state, __t$SToT().as(t5$0.selector)(t6));
        }
      }
      didChangeDependencies() {
        let t5, t6, t5$;
        super.didChangeDependencies();
        let bloc = (t5 = this.widget.bloc, t5 == null ? provider$['ReadContext|read'](B, this.context) : t5);
        if (!this[_bloc$1][$_equals](bloc)) {
          this[_bloc$1] = bloc;
          this[_state$0] = (t5$ = this.widget, t6 = this[_bloc$1].state, __t$SToT().as(t5$.selector)(t6));
        }
      }
      build(context) {
        let t7, t6, t5;
        if (this.widget.bloc == null) {
          provider$['SelectContext|select'](B, core.bool, context, dart.fn(bloc => this[_bloc$1] === bloc, __t$BTobool()));
        }
        return new (__t$BlocListenerOfB$S()).new({bloc: this[_bloc$1], listener: dart.fn((context, state) => {
            let t6, t5;
            let selectedState = (t5 = this.widget, t6 = state, __t$SToT().as(t5.selector)(t6));
            if (!dart.equals(this[_state$0], selectedState)) this.setState(dart.fn(() => this[_state$0] = selectedState, T$.VoidTovoid()));
          }, __t$BuildContextAndSTovoid()), child: (t5 = this.widget, t6 = context, t7 = this[_state$0], __t$BuildContextAndTToWidget().as(t5.builder)(t6, t7))});
      }
      static ['_#new#tearOff'](B, S, T) {
        return new (bloc_selector._BlocSelectorState$(B, S, T)).new();
      }
    }
    (_BlocSelectorState.new = function() {
      this[___BlocSelectorState__bloc] = null;
      this[___BlocSelectorState__state] = null;
      this[___BlocSelectorState__state_isSet] = false;
      _BlocSelectorState.__proto__.new.call(this);
      ;
    }).prototype = _BlocSelectorState.prototype;
    dart.addTypeTests(_BlocSelectorState);
    _BlocSelectorState.prototype[_is__BlocSelectorState_default] = true;
    dart.addTypeCaches(_BlocSelectorState);
    dart.setMethodSignature(_BlocSelectorState, () => ({
      __proto__: dart.getMethods(_BlocSelectorState.__proto__),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setGetterSignature(_BlocSelectorState, () => ({
      __proto__: dart.getGetters(_BlocSelectorState.__proto__),
      [_bloc$1]: B,
      [_state$0]: T
    }));
    dart.setSetterSignature(_BlocSelectorState, () => ({
      __proto__: dart.getSetters(_BlocSelectorState.__proto__),
      [_bloc$1]: B,
      [_state$0]: T
    }));
    dart.setLibraryUri(_BlocSelectorState, I[19]);
    dart.setFieldSignature(_BlocSelectorState, () => ({
      __proto__: dart.getFields(_BlocSelectorState.__proto__),
      [___BlocSelectorState__bloc]: dart.fieldType(dart.nullable(B)),
      [___BlocSelectorState__state]: dart.fieldType(dart.nullable(T)),
      [___BlocSelectorState__state_isSet]: dart.fieldType(core.bool)
    }));
    return _BlocSelectorState;
  });
  bloc_selector._BlocSelectorState = bloc_selector._BlocSelectorState$();
  dart.addTypeTests(bloc_selector._BlocSelectorState, _is__BlocSelectorState_default);
  var _children = dart.privateName(nested, "_children");
  nested.Nested = class Nested extends framework.StatelessWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let children = opts && 'children' in opts ? opts.children : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new nested.Nested.new({key: key, children: children, child: child});
    }
    build(context) {
      dart.throw(new core.StateError.new("implemented internally"));
    }
    createElement() {
      return new nested._NestedElement.new(this);
    }
  };
  (nested.Nested.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let children = opts && 'children' in opts ? opts.children : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (!children[$isNotEmpty]) dart.assertFailed(null, I[20], 71, 16, "children.isNotEmpty");
    this[_children] = children;
    this[_child$] = child;
    nested.Nested.__proto__.new.call(this, {key: key});
    ;
  }).prototype = nested.Nested.prototype;
  dart.addTypeTests(nested.Nested);
  dart.addTypeCaches(nested.Nested);
  nested.Nested[dart.implements] = () => [nested.SingleChildWidget];
  dart.setMethodSignature(nested.Nested, () => ({
    __proto__: dart.getMethods(nested.Nested.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    createElement: dart.fnType(nested._NestedElement, [])
  }));
  dart.setLibraryUri(nested.Nested, I[14]);
  dart.setFieldSignature(nested.Nested, () => ({
    __proto__: dart.getFields(nested.Nested.__proto__),
    [_children]: dart.finalFieldType(core.List$(nested.SingleChildWidget)),
    [_child$]: dart.finalFieldType(dart.nullable(framework.Widget))
  }));
  provider$.MultiProvider = class MultiProvider extends nested.Nested {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let providers = opts && 'providers' in opts ? opts.providers : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return new provider$.MultiProvider.new({key: key, providers: providers, child: child, builder: builder});
    }
  };
  (provider$.MultiProvider.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let providers = opts && 'providers' in opts ? opts.providers : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    provider$.MultiProvider.__proto__.new.call(this, {key: key, children: providers, child: builder != null ? new basic.Builder.new({builder: dart.fn(context => builder(context, child), T$.BuildContextToWidget())}) : child});
    ;
  }).prototype = provider$.MultiProvider.prototype;
  dart.addTypeTests(provider$.MultiProvider);
  dart.addTypeCaches(provider$.MultiProvider);
  dart.setLibraryUri(provider$.MultiProvider, I[21]);
  multi_bloc_listener.MultiBlocListener = class MultiBlocListener extends provider$.MultiProvider {
    static ['_#new#tearOff'](opts) {
      let listeners = opts && 'listeners' in opts ? opts.listeners : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let key = opts && 'key' in opts ? opts.key : null;
      return new multi_bloc_listener.MultiBlocListener.new({listeners: listeners, child: child, key: key});
    }
  };
  (multi_bloc_listener.MultiBlocListener.new = function(opts) {
    let listeners = opts && 'listeners' in opts ? opts.listeners : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let key = opts && 'key' in opts ? opts.key : null;
    multi_bloc_listener.MultiBlocListener.__proto__.new.call(this, {key: key, providers: listeners, child: child});
    ;
  }).prototype = multi_bloc_listener.MultiBlocListener.prototype;
  dart.addTypeTests(multi_bloc_listener.MultiBlocListener);
  dart.addTypeCaches(multi_bloc_listener.MultiBlocListener);
  dart.setLibraryUri(multi_bloc_listener.MultiBlocListener, I[22]);
  multi_bloc_provider.MultiBlocProvider = class MultiBlocProvider extends provider$.MultiProvider {
    static ['_#new#tearOff'](opts) {
      let providers = opts && 'providers' in opts ? opts.providers : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let key = opts && 'key' in opts ? opts.key : null;
      return new multi_bloc_provider.MultiBlocProvider.new({providers: providers, child: child, key: key});
    }
  };
  (multi_bloc_provider.MultiBlocProvider.new = function(opts) {
    let providers = opts && 'providers' in opts ? opts.providers : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let key = opts && 'key' in opts ? opts.key : null;
    multi_bloc_provider.MultiBlocProvider.__proto__.new.call(this, {key: key, providers: providers, child: child});
    ;
  }).prototype = multi_bloc_provider.MultiBlocProvider.prototype;
  dart.addTypeTests(multi_bloc_provider.MultiBlocProvider);
  dart.addTypeCaches(multi_bloc_provider.MultiBlocProvider);
  dart.setLibraryUri(multi_bloc_provider.MultiBlocProvider, I[23]);
  multi_repository_provider.MultiRepositoryProvider = class MultiRepositoryProvider extends provider$.MultiProvider {
    static ['_#new#tearOff'](opts) {
      let providers = opts && 'providers' in opts ? opts.providers : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let key = opts && 'key' in opts ? opts.key : null;
      return new multi_repository_provider.MultiRepositoryProvider.new({providers: providers, child: child, key: key});
    }
  };
  (multi_repository_provider.MultiRepositoryProvider.new = function(opts) {
    let providers = opts && 'providers' in opts ? opts.providers : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let key = opts && 'key' in opts ? opts.key : null;
    multi_repository_provider.MultiRepositoryProvider.__proto__.new.call(this, {key: key, providers: providers, child: child});
    ;
  }).prototype = multi_repository_provider.MultiRepositoryProvider.prototype;
  dart.addTypeTests(multi_repository_provider.MultiRepositoryProvider);
  dart.addTypeCaches(multi_repository_provider.MultiRepositoryProvider);
  dart.setLibraryUri(multi_repository_provider.MultiRepositoryProvider, I[24]);
  var builder$2 = dart.privateName(provider$, "InheritedProvider.builder");
  var _lazy = dart.privateName(provider$, "_lazy");
  var _delegate = dart.privateName(provider$, "_delegate");
  const _is_InheritedProvider_default = Symbol('_is_InheritedProvider_default');
  provider$.InheritedProvider$ = dart.generic(T => {
    var __t$_CreateInheritedProviderOfT = () => (__t$_CreateInheritedProviderOfT = dart.constFn(provider$._CreateInheritedProvider$(T)))();
    var __t$_ValueInheritedProviderOfT = () => (__t$_ValueInheritedProviderOfT = dart.constFn(provider$._ValueInheritedProvider$(T)))();
    var __t$_InheritedProviderElementOfT = () => (__t$_InheritedProviderElementOfT = dart.constFn(provider$._InheritedProviderElement$(T)))();
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$_InheritedProviderScopeOfTN = () => (__t$_InheritedProviderScopeOfTN = dart.constFn(provider$._InheritedProviderScope$(__t$TN())))();
    class InheritedProvider extends nested.SingleChildStatelessWidget {
      get builder() {
        return this[builder$2];
      }
      set builder(value) {
        super.builder = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let debugCheckInvalidValueType = opts && 'debugCheckInvalidValueType' in opts ? opts.debugCheckInvalidValueType : null;
        let startListening = opts && 'startListening' in opts ? opts.startListening : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (provider$.InheritedProvider$(T)).new({key: key, create: create, update: update, updateShouldNotify: updateShouldNotify, debugCheckInvalidValueType: debugCheckInvalidValueType, startListening: startListening, dispose: dispose, builder: builder, lazy: lazy, child: child});
      }
      static ['_#value#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let startListening = opts && 'startListening' in opts ? opts.startListening : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (provider$.InheritedProvider$(T)).value({key: key, value: value, updateShouldNotify: updateShouldNotify, startListening: startListening, lazy: lazy, builder: builder, child: child});
      }
      static ['_#_constructor#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let delegate = opts && 'delegate' in opts ? opts.delegate : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (provider$.InheritedProvider$(T))._constructor({key: key, delegate: delegate, lazy: lazy, builder: builder, child: child});
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        this[_delegate].debugFillProperties(properties);
      }
      createElement() {
        return new (__t$_InheritedProviderElementOfT()).new(this);
      }
      buildWithChild(context, child) {
        if (!(this.builder != null || child != null)) dart.assertFailed(dart.str(this[$runtimeType]) + " used outside of MultiProvider must specify a child", I[26], 158, 7, "builder != null || child != null");
        return new (__t$_InheritedProviderScopeOfTN()).new({owner: this, debugType: dart.str(this[$runtimeType]), child: this.builder != null ? new basic.Builder.new({builder: dart.fn(context => dart.nullCheck(this.builder)(context, child), T$.BuildContextToWidget())}) : dart.nullCheck(child)});
      }
    }
    (InheritedProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let debugCheckInvalidValueType = opts && 'debugCheckInvalidValueType' in opts ? opts.debugCheckInvalidValueType : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$2] = builder;
      this[_lazy] = lazy;
      this[_delegate] = new (__t$_CreateInheritedProviderOfT()).new({create: create, update: update, updateShouldNotify: updateShouldNotify, debugCheckInvalidValueType: debugCheckInvalidValueType, startListening: startListening, dispose: dispose});
      InheritedProvider.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = InheritedProvider.prototype;
    (InheritedProvider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$2] = builder;
      this[_lazy] = lazy;
      this[_delegate] = new (__t$_ValueInheritedProviderOfT()).new({value: value, updateShouldNotify: updateShouldNotify, startListening: startListening});
      InheritedProvider.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = InheritedProvider.prototype;
    (InheritedProvider._constructor = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let delegate = opts && 'delegate' in opts ? opts.delegate : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$2] = builder;
      this[_lazy] = lazy;
      this[_delegate] = delegate;
      InheritedProvider.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = InheritedProvider.prototype;
    dart.addTypeTests(InheritedProvider);
    InheritedProvider.prototype[_is_InheritedProvider_default] = true;
    dart.addTypeCaches(InheritedProvider);
    dart.setMethodSignature(InheritedProvider, () => ({
      __proto__: dart.getMethods(InheritedProvider.__proto__),
      createElement: dart.fnType(provider$._InheritedProviderElement$(T), []),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setLibraryUri(InheritedProvider, I[21]);
    dart.setFieldSignature(InheritedProvider, () => ({
      __proto__: dart.getFields(InheritedProvider.__proto__),
      [_delegate]: dart.finalFieldType(provider$._Delegate$(T)),
      [_lazy]: dart.finalFieldType(dart.nullable(core.bool)),
      builder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])))
    }));
    return InheritedProvider;
  });
  provider$.InheritedProvider = provider$.InheritedProvider$();
  dart.addTypeTests(provider$.InheritedProvider, _is_InheritedProvider_default);
  const _is_Provider_default = Symbol('_is_Provider_default');
  provider$.Provider$ = dart.generic(T => {
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    class Provider extends provider$.InheritedProvider$(T) {
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (provider$.Provider$(T)).new({key: key, create: create, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
      static ['_#value#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (provider$.Provider$(T)).value({key: key, value: value, updateShouldNotify: updateShouldNotify, builder: builder, child: child});
      }
      static of(T, context, opts) {
        let t6;
        let listen = opts && 'listen' in opts ? opts.listen : true;
        if (!(dart.nullCheck(context.owner).debugBuilding || listen === false || provider$.debugIsInInheritedProviderUpdate)) dart.assertFailed("Tried to listen to a value exposed with provider, from outside of the widget tree.\n\nThis is likely caused by an event handler (like a button's onPressed) that called\nProvider.of without passing `listen: false`.\n\nTo fix, write:\nProvider.of<" + dart.str(dart.wrapType(T)) + ">(context, listen: false);\n\nIt is unsupported because may pointlessly rebuild the widget associated to the\nevent handler, when the widget tree doesn't care about the value.\n\nThe context used was: " + dart.str(context) + "\n", I[25], 274, 7, "context.owner!.debugBuilding ||\n          listen == false ||\n          debugIsInInheritedProviderUpdate");
        let inheritedElement = provider$.Provider._inheritedElementOf(T, context);
        if (listen) {
          context.dependOnInheritedWidgetOfExactType(provider$._InheritedProviderScope$(dart.nullable(T)));
        }
        let value = (t6 = inheritedElement, t6 == null ? null : t6.value);
        if (provider$._isSoundMode) {
          if (!T.is(value)) {
            dart.throw(new provider$.ProviderNullException.new(dart.wrapType(T), context.widget[$runtimeType]));
          }
          return value;
        }
        return T.as(value);
      }
      static _inheritedElementOf(T, context) {
        if (!(context !== null)) dart.assertFailed("Tried to call context.read/watch/select or similar on a `context` that is null.\n\nThis can happen if you used the context of a StatefulWidget and that\nStatefulWidget was disposed.\n", I[25], 319, 12, "context != null");
        if (!(provider$._debugIsSelecting === false)) dart.assertFailed("Cannot call context.read/watch/select inside the callback of a context.select", I[25], 326, 7, "_debugIsSelecting == false");
        if (!!dart.wrapType(T)._equals(dart.wrapType(dart.dynamic))) dart.assertFailed("Tried to call Provider.of<dynamic>. This is likely a mistake and is therefore\nunsupported.\n\nIf you want to expose a variable that can be anything, consider changing\n`dynamic` to `Object` instead.\n", I[25], 330, 7, "T != dynamic");
        let inheritedElement = dart.nullable(provider$._InheritedProviderScopeElement$(dart.nullable(T))).as(context.getElementForInheritedWidgetOfExactType(provider$._InheritedProviderScope$(dart.nullable(T))));
        if (inheritedElement == null && !T.is(null)) {
          dart.throw(new provider$.ProviderNotFoundException.new(dart.wrapType(T), context.widget[$runtimeType]));
        }
        return inheritedElement;
      }
    }
    (Provider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      Provider.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, dispose: dispose, debugCheckInvalidValueType: dart.fn(value => {
          let t6;
          t6 = provider$.Provider.debugCheckInvalidValueType;
          return t6 == null ? null : t6(T, value);
        }, __t$TTovoid()), child: child});
      ;
    }).prototype = Provider.prototype;
    (Provider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      if (!dart.fn(() => {
        let t6;
        t6 = provider$.Provider.debugCheckInvalidValueType;
        t6 == null ? null : t6(T, value);
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[25], 243, 16, "() {\n          Provider.debugCheckInvalidValueType?.call<T>(value);\n          return true;\n        }()");
      Provider.__proto__.value.call(this, {key: key, builder: builder, value: value, updateShouldNotify: updateShouldNotify, child: child});
      ;
    }).prototype = Provider.prototype;
    dart.addTypeTests(Provider);
    Provider.prototype[_is_Provider_default] = true;
    dart.addTypeCaches(Provider);
    dart.setStaticMethodSignature(Provider, () => ['of', '_inheritedElementOf']);
    dart.setLibraryUri(Provider, I[21]);
    dart.setStaticFieldSignature(Provider, () => ['debugCheckInvalidValueType']);
    return Provider;
  });
  provider$.Provider = provider$.Provider$();
  dart.defineLazy(provider$.Provider, {
    /*provider$.Provider.debugCheckInvalidValueType*/get debugCheckInvalidValueType() {
      return dart.fn((T, value) => {
        if (!dart.fn(() => {
          if (change_notifier.Listenable.is(value) || async.Stream.is(value)) {
            dart.throw(assertions.FlutterError.new("Tried to use Provider with a subtype of Listenable/Stream (" + dart.str(dart.wrapType(T)) + ").\n\nThis is likely a mistake, as Provider will not automatically update dependents\nwhen " + dart.str(dart.wrapType(T)) + " is updated. Instead, consider changing Provider for more specific\nimplementation that handles the update mechanism, such as:\n\n- ListenableProvider\n- ChangeNotifierProvider\n- ValueListenableProvider\n- StreamProvider\n\nAlternatively, if you are making your own provider, consider using InheritedProvider.\n\nIf you think that this is not an error, you can disable this check by setting\nProvider.debugCheckInvalidValueType to `null` in your main file:\n\n```\nvoid main() {\n  Provider.debugCheckInvalidValueType = null;\n\n  runApp(MyApp());\n}\n```\n"));
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[25], 385, 12, "() {\n      if (value is Listenable || value is Stream) {\n        throw FlutterError('''\nTried to use Provider with a subtype of Listenable/Stream ($T).\n\nThis is likely a mistake, as Provider will not automatically update dependents\nwhen $T is updated. Instead, consider changing Provider for more specific\nimplementation that handles the update mechanism, such as:\n\n- ListenableProvider\n- ChangeNotifierProvider\n- ValueListenableProvider\n- StreamProvider\n\nAlternatively, if you are making your own provider, consider using InheritedProvider.\n\nIf you think that this is not an error, you can disable this check by setting\nProvider.debugCheckInvalidValueType to `null` in your main file:\n\n```\nvoid main() {\n  Provider.debugCheckInvalidValueType = null;\n\n  runApp(MyApp());\n}\n```\n''');\n      }\n      return true;\n    }()");
      }, T$.TTovoid$1());
    },
    set debugCheckInvalidValueType(value) {}
  }, false);
  dart.addTypeTests(provider$.Provider, _is_Provider_default);
  const _is_RepositoryProvider_default = Symbol('_is_RepositoryProvider_default');
  repository_provider.RepositoryProvider$ = dart.generic(T => {
    var __t$BuildContextAndTTovoid = () => (__t$BuildContextAndTTovoid = dart.constFn(dart.fnType(dart.void, [framework.BuildContext, T])))();
    class RepositoryProvider extends provider$.Provider$(T) {
      static ['_#new#tearOff'](T, opts) {
        let create = opts && 'create' in opts ? opts.create : null;
        let key = opts && 'key' in opts ? opts.key : null;
        let child = opts && 'child' in opts ? opts.child : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        return new (repository_provider.RepositoryProvider$(T)).new({create: create, key: key, child: child, lazy: lazy});
      }
      static ['_#value#tearOff'](T, opts) {
        let value = opts && 'value' in opts ? opts.value : null;
        let key = opts && 'key' in opts ? opts.key : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (repository_provider.RepositoryProvider$(T)).value({value: value, key: key, child: child});
      }
      static of(T, context, opts) {
        let listen = opts && 'listen' in opts ? opts.listen : false;
        try {
          return provider$.Provider.of(T, context, {listen: listen});
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (provider$.ProviderNotFoundException.is(e)) {
            if (!e.valueType._equals(dart.wrapType(T))) dart.rethrow(e$);
            dart.throw(assertions.FlutterError.new("        RepositoryProvider.of() called with a context that does not contain a repository of type " + dart.str(dart.wrapType(T)) + ".\n        No ancestor could be found starting from the context that was passed to RepositoryProvider.of<" + dart.str(dart.wrapType(T)) + ">().\n\n        This can happen if the context you used comes from a widget above the RepositoryProvider.\n\n        The context used was: " + dart.str(context) + "\n        "));
          } else
            throw e$;
        }
      }
    }
    (RepositoryProvider.new = function(opts) {
      let create = opts && 'create' in opts ? opts.create : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      RepositoryProvider.__proto__.new.call(this, {key: key, create: create, dispose: dart.fn((_, __) => {
        }, __t$BuildContextAndTTovoid()), child: child, lazy: lazy});
      ;
    }).prototype = RepositoryProvider.prototype;
    (RepositoryProvider.value = function(opts) {
      let value = opts && 'value' in opts ? opts.value : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let child = opts && 'child' in opts ? opts.child : null;
      RepositoryProvider.__proto__.value.call(this, {key: key, value: value, child: child});
      ;
    }).prototype = RepositoryProvider.prototype;
    dart.addTypeTests(RepositoryProvider);
    RepositoryProvider.prototype[_is_RepositoryProvider_default] = true;
    dart.addTypeCaches(RepositoryProvider);
    dart.setStaticMethodSignature(RepositoryProvider, () => ['of']);
    dart.setLibraryUri(RepositoryProvider, I[27]);
    return RepositoryProvider;
  });
  repository_provider.RepositoryProvider = repository_provider.RepositoryProvider$();
  dart.addTypeTests(repository_provider.RepositoryProvider, _is_RepositoryProvider_default);
  var description$ = dart.privateName(task_model, "Task.description");
  var isDone$0 = dart.privateName(task_model, "Task.isDone");
  task_model.Task = class Task extends core.Object {
    get description() {
      return this[description$];
    }
    set description(value) {
      this[description$] = value;
    }
    get isDone() {
      return this[isDone$0];
    }
    set isDone(value) {
      this[isDone$0] = value;
    }
    static ['_#new#tearOff'](opts) {
      let description = opts && 'description' in opts ? opts.description : null;
      let isDone = opts && 'isDone' in opts ? opts.isDone : false;
      return new task_model.Task.new({description: description, isDone: isDone});
    }
    static fromJson(json) {
      return new task_model.Task.new({description: core.String.as(json[$_get]("description")), isDone: core.bool.as(json[$_get]("isDone"))});
    }
    static ['_#fromJson#tearOff'](json) {
      return task_model.Task.fromJson(json);
    }
    toJson() {
      return new (T$.IdentityMapOfString$dynamic()).from(["description", this.description, "isDone", this.isDone]);
    }
  };
  (task_model.Task.new = function(opts) {
    let description = opts && 'description' in opts ? opts.description : null;
    let isDone = opts && 'isDone' in opts ? opts.isDone : false;
    this[description$] = description;
    this[isDone$0] = isDone;
    ;
  }).prototype = task_model.Task.prototype;
  dart.addTypeTests(task_model.Task);
  dart.addTypeCaches(task_model.Task);
  dart.setMethodSignature(task_model.Task, () => ({
    __proto__: dart.getMethods(task_model.Task.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setStaticMethodSignature(task_model.Task, () => ['fromJson']);
  dart.setLibraryUri(task_model.Task, I[28]);
  dart.setFieldSignature(task_model.Task, () => ({
    __proto__: dart.getFields(task_model.Task.__proto__),
    description: dart.fieldType(core.String),
    isDone: dart.fieldType(core.bool)
  }));
  var cardName$1 = dart.privateName(task_model, "Card.cardName");
  var cardId$ = dart.privateName(task_model, "Card.cardId");
  var tasks$1 = dart.privateName(task_model, "Card.tasks");
  task_model.Card = class Card extends core.Object {
    get cardName() {
      return this[cardName$1];
    }
    set cardName(value) {
      super.cardName = value;
    }
    get cardId() {
      return this[cardId$];
    }
    set cardId(value) {
      super.cardId = value;
    }
    get tasks() {
      return this[tasks$1];
    }
    set tasks(value) {
      super.tasks = value;
    }
    static ['_#new#tearOff'](opts) {
      let cardName = opts && 'cardName' in opts ? opts.cardName : null;
      let cardId = opts && 'cardId' in opts ? opts.cardId : null;
      let tasks = opts && 'tasks' in opts ? opts.tasks : null;
      return new task_model.Card.new({cardName: cardName, cardId: cardId, tasks: tasks});
    }
    static fromJson(json) {
      let tasksList = core.List.as(json[$_get]("tasks"));
      let tasks = tasksList[$map](task_model.Task, dart.fn(taskJson => task_model.Task.fromJson(T$.MapOfString$dynamic().as(taskJson)), T$.dynamicToTask()))[$toList]();
      return new task_model.Card.new({cardName: core.String.as(json[$_get]("card")), cardId: core.int.as(json[$_get]("cardId")), tasks: tasks});
    }
    static ['_#fromJson#tearOff'](json) {
      return task_model.Card.fromJson(json);
    }
    toJson() {
      return new (T$.IdentityMapOfString$dynamic()).from(["card", this.cardName, "cardId", this.cardId, "tasks", this.tasks[$map](T$.MapOfString$dynamic(), dart.fn(task => task.toJson(), T$.TaskToMapOfString$dynamic()))[$toList]()]);
    }
  };
  (task_model.Card.new = function(opts) {
    let cardName = opts && 'cardName' in opts ? opts.cardName : null;
    let cardId = opts && 'cardId' in opts ? opts.cardId : null;
    let tasks = opts && 'tasks' in opts ? opts.tasks : null;
    this[cardName$1] = cardName;
    this[cardId$] = cardId;
    this[tasks$1] = tasks;
    ;
  }).prototype = task_model.Card.prototype;
  dart.addTypeTests(task_model.Card);
  dart.addTypeCaches(task_model.Card);
  dart.setMethodSignature(task_model.Card, () => ({
    __proto__: dart.getMethods(task_model.Card.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setStaticMethodSignature(task_model.Card, () => ['fromJson']);
  dart.setLibraryUri(task_model.Card, I[28]);
  dart.setFieldSignature(task_model.Card, () => ({
    __proto__: dart.getFields(task_model.Card.__proto__),
    cardName: dart.finalFieldType(core.String),
    cardId: dart.finalFieldType(core.int),
    tasks: dart.finalFieldType(core.List$(task_model.Task))
  }));
  var _preferenceCache$ = dart.privateName(shared_preferences, "_preferenceCache");
  var _setValue = dart.privateName(shared_preferences, "_setValue");
  shared_preferences.SharedPreferences = class SharedPreferences extends core.Object {
    static ['_#_#tearOff'](_preferenceCache) {
      return new shared_preferences.SharedPreferences.__(_preferenceCache);
    }
    static get _store() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance;
    }
    static setPrefix(prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      if (shared_preferences.SharedPreferences._completer != null) {
        dart.throw(new core.StateError.new("setPrefix cannot be called after getInstance"));
      }
      shared_preferences.SharedPreferences._prefix = prefix;
      shared_preferences.SharedPreferences._prefixHasBeenChanged = true;
      shared_preferences.SharedPreferences._allowList = allowList;
    }
    static resetStatic() {
      shared_preferences.SharedPreferences._completer = null;
      shared_preferences.SharedPreferences._prefix = "flutter.";
      shared_preferences.SharedPreferences._prefixHasBeenChanged = false;
      shared_preferences.SharedPreferences._allowList = null;
    }
    static getInstance() {
      return async.async(shared_preferences.SharedPreferences, function* getInstance() {
        if (shared_preferences.SharedPreferences._completer == null) {
          let completer = T$.CompleterOfSharedPreferences().new();
          shared_preferences.SharedPreferences._completer = completer;
          try {
            let preferencesMap = (yield shared_preferences.SharedPreferences._getSharedPreferencesMap());
            completer.complete(new shared_preferences.SharedPreferences.__(preferencesMap));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              completer.completeError(e);
              let sharedPrefsFuture = completer.future;
              shared_preferences.SharedPreferences._completer = null;
              return sharedPrefsFuture;
            } else
              throw e$;
          }
        }
        return dart.nullCheck(shared_preferences.SharedPreferences._completer).future;
      });
    }
    getKeys() {
      return T$.LinkedHashSetOfString().from(this[_preferenceCache$][$keys]);
    }
    get(key) {
      return this[_preferenceCache$][$_get](key);
    }
    getBool(key) {
      return T$.boolN().as(this[_preferenceCache$][$_get](key));
    }
    getInt(key) {
      return T$.intN().as(this[_preferenceCache$][$_get](key));
    }
    getDouble(key) {
      return T$.doubleN().as(this[_preferenceCache$][$_get](key));
    }
    getString(key) {
      return T$.StringN().as(this[_preferenceCache$][$_get](key));
    }
    containsKey(key) {
      return this[_preferenceCache$][$containsKey](key);
    }
    getStringList(key) {
      let t7;
      let list = T$.ListN().as(this[_preferenceCache$][$_get](key));
      if (list != null && !T$.ListOfString().is(list)) {
        list = list[$cast](core.String)[$toList]();
        this[_preferenceCache$][$_set](key, list);
      }
      return T$.ListNOfString().as((t7 = list, t7 == null ? null : t7[$toList]()));
    }
    setBool(key, value) {
      return this[_setValue]("Bool", key, value);
    }
    setInt(key, value) {
      return this[_setValue]("Int", key, value);
    }
    setDouble(key, value) {
      return this[_setValue]("Double", key, value);
    }
    setString(key, value) {
      return this[_setValue]("String", key, value);
    }
    setStringList(key, value) {
      return this[_setValue]("StringList", key, value);
    }
    remove(key) {
      let prefixedKey = shared_preferences.SharedPreferences._prefix + key;
      this[_preferenceCache$][$remove](key);
      return shared_preferences.SharedPreferences._store.remove(prefixedKey);
    }
    [_setValue](valueType, key, value) {
      core.ArgumentError.checkNotNull(core.Object, value, "value");
      let prefixedKey = shared_preferences.SharedPreferences._prefix + key;
      if (T$.ListOfString().is(value)) {
        this[_preferenceCache$][$_set](key, value[$toList]());
      } else {
        this[_preferenceCache$][$_set](key, value);
      }
      return shared_preferences.SharedPreferences._store.setValue(valueType, prefixedKey, value);
    }
    commit() {
      return async.async(core.bool, function* commit() {
        return true;
      });
    }
    clear() {
      this[_preferenceCache$][$clear]();
      if (shared_preferences.SharedPreferences._prefixHasBeenChanged) {
        try {
          return shared_preferences.SharedPreferences._store.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: shared_preferences.SharedPreferences._prefix, allowList: shared_preferences.SharedPreferences._allowList})}));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            if (core.UnimplementedError.is(e)) {
              dart.throw(new core.UnimplementedError.new("This implementation of Shared Preferences doesn't yet support the setPrefix method.\nEither update the implementation to support setPrefix, or do not call setPrefix.\n        "));
            } else {
              dart.rethrow(e$);
            }
          } else
            throw e$;
        }
      }
      return shared_preferences.SharedPreferences._store.clear();
    }
    reload() {
      return async.async(dart.void, (function* reload() {
        let preferences = (yield shared_preferences.SharedPreferences._getSharedPreferencesMap());
        this[_preferenceCache$][$clear]();
        this[_preferenceCache$][$addAll](preferences);
      }).bind(this));
    }
    static _getSharedPreferencesMap() {
      return async.async(T$.MapOfString$Object(), function* _getSharedPreferencesMap() {
        let fromSystem = new (T$.IdentityMapOfString$Object()).new();
        if (shared_preferences.SharedPreferences._prefixHasBeenChanged) {
          try {
            fromSystem[$addAll](yield shared_preferences.SharedPreferences._store.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: shared_preferences.SharedPreferences._prefix, allowList: shared_preferences.SharedPreferences._allowList})})));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              if (core.UnimplementedError.is(e)) {
                dart.throw(new core.UnimplementedError.new("This implementation of Shared Preferences doesn't yet support the setPrefix method.\nEither update the implementation to support setPrefix, or do not call setPrefix.\n        "));
              } else {
                dart.rethrow(e$);
              }
            } else
              throw e$;
          }
        } else {
          fromSystem[$addAll](yield shared_preferences.SharedPreferences._store.getAll());
        }
        if (shared_preferences.SharedPreferences._prefix[$isEmpty]) {
          return fromSystem;
        }
        let preferencesMap = new (T$.IdentityMapOfString$Object()).new();
        for (let key of fromSystem[$keys]) {
          if (!key[$startsWith](shared_preferences.SharedPreferences._prefix)) dart.assertFailed(null, I[29], 264, 14, "key.startsWith(_prefix)");
          preferencesMap[$_set](key[$substring](shared_preferences.SharedPreferences._prefix.length), dart.nullCheck(fromSystem[$_get](key)));
        }
        return preferencesMap;
      });
    }
    static setMockInitialValues(values) {
      let newValues = values[$map](core.String, core.Object, dart.fn((key, value) => {
        let newKey = key;
        if (!key[$startsWith](shared_preferences.SharedPreferences._prefix)) {
          newKey = shared_preferences.SharedPreferences._prefix + key;
        }
        return new (T$.MapEntryOfString$Object()).__(newKey, value);
      }, T$.StringAndObjectToMapEntryOfString$Object()));
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(newValues);
      shared_preferences.SharedPreferences._completer = null;
    }
  };
  (shared_preferences.SharedPreferences.__ = function(_preferenceCache) {
    this[_preferenceCache$] = _preferenceCache;
    ;
  }).prototype = shared_preferences.SharedPreferences.prototype;
  dart.addTypeTests(shared_preferences.SharedPreferences);
  dart.addTypeCaches(shared_preferences.SharedPreferences);
  dart.setMethodSignature(shared_preferences.SharedPreferences, () => ({
    __proto__: dart.getMethods(shared_preferences.SharedPreferences.__proto__),
    getKeys: dart.fnType(core.Set$(core.String), []),
    get: dart.fnType(dart.nullable(core.Object), [core.String]),
    getBool: dart.fnType(dart.nullable(core.bool), [core.String]),
    getInt: dart.fnType(dart.nullable(core.int), [core.String]),
    getDouble: dart.fnType(dart.nullable(core.double), [core.String]),
    getString: dart.fnType(dart.nullable(core.String), [core.String]),
    containsKey: dart.fnType(core.bool, [core.String]),
    getStringList: dart.fnType(dart.nullable(core.List$(core.String)), [core.String]),
    setBool: dart.fnType(async.Future$(core.bool), [core.String, core.bool]),
    setInt: dart.fnType(async.Future$(core.bool), [core.String, core.int]),
    setDouble: dart.fnType(async.Future$(core.bool), [core.String, core.double]),
    setString: dart.fnType(async.Future$(core.bool), [core.String, core.String]),
    setStringList: dart.fnType(async.Future$(core.bool), [core.String, core.List$(core.String)]),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    [_setValue]: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    commit: dart.fnType(async.Future$(core.bool), []),
    clear: dart.fnType(async.Future$(core.bool), []),
    reload: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setStaticMethodSignature(shared_preferences.SharedPreferences, () => ['setPrefix', 'resetStatic', 'getInstance', '_getSharedPreferencesMap', 'setMockInitialValues']);
  dart.setStaticGetterSignature(shared_preferences.SharedPreferences, () => ['_store']);
  dart.setLibraryUri(shared_preferences.SharedPreferences, I[30]);
  dart.setFieldSignature(shared_preferences.SharedPreferences, () => ({
    __proto__: dart.getFields(shared_preferences.SharedPreferences.__proto__),
    [_preferenceCache$]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  dart.setStaticFieldSignature(shared_preferences.SharedPreferences, () => ['_prefix', '_prefixHasBeenChanged', '_allowList', '_completer']);
  dart.defineLazy(shared_preferences.SharedPreferences, {
    /*shared_preferences.SharedPreferences._prefix*/get _prefix() {
      return "flutter.";
    },
    set _prefix(value) {},
    /*shared_preferences.SharedPreferences._prefixHasBeenChanged*/get _prefixHasBeenChanged() {
      return false;
    },
    set _prefixHasBeenChanged(value) {},
    /*shared_preferences.SharedPreferences._allowList*/get _allowList() {
      return null;
    },
    set _allowList(value) {},
    /*shared_preferences.SharedPreferences._completer*/get _completer() {
      return null;
    },
    set _completer(value) {}
  }, false);
  create_card.CreateCardPage = class CreateCardPage extends framework.StatefulWidget {
    createState() {
      return new create_card._CreateCardPageState.new();
    }
    static ['_#new#tearOff']() {
      return new create_card.CreateCardPage.new();
    }
  };
  (create_card.CreateCardPage.new = function() {
    create_card.CreateCardPage.__proto__.new.call(this);
    ;
  }).prototype = create_card.CreateCardPage.prototype;
  dart.addTypeTests(create_card.CreateCardPage);
  dart.addTypeCaches(create_card.CreateCardPage);
  dart.setMethodSignature(create_card.CreateCardPage, () => ({
    __proto__: dart.getMethods(create_card.CreateCardPage.__proto__),
    createState: dart.fnType(create_card._CreateCardPageState, [])
  }));
  dart.setLibraryUri(create_card.CreateCardPage, I[31]);
  var ___CreateCardPageState__cardNameController = dart.privateName(create_card, "_#_CreateCardPageState#_cardNameController");
  var ___CreateCardPageState__tasks = dart.privateName(create_card, "_#_CreateCardPageState#_tasks");
  var _cardNameController = dart.privateName(create_card, "_cardNameController");
  var _tasks = dart.privateName(create_card, "_tasks");
  var _addTask = dart.privateName(create_card, "_addTask");
  var _removeTask = dart.privateName(create_card, "_removeTask");
  var _saveCard = dart.privateName(create_card, "_saveCard");
  create_card._CreateCardPageState = class _CreateCardPageState extends framework.State$(create_card.CreateCardPage) {
    get [_cardNameController]() {
      let t9;
      t9 = this[___CreateCardPageState__cardNameController];
      return t9 == null ? dart.throw(new _internal.LateError.fieldNI("_cardNameController")) : t9;
    }
    set [_cardNameController](_cardNameController$35param) {
      this[___CreateCardPageState__cardNameController] = _cardNameController$35param;
    }
    get [_tasks]() {
      let t9;
      t9 = this[___CreateCardPageState__tasks];
      return t9 == null ? dart.throw(new _internal.LateError.fieldNI("_tasks")) : t9;
    }
    set [_tasks](_tasks$35param) {
      this[___CreateCardPageState__tasks] = _tasks$35param;
    }
    initState() {
      super.initState();
      this[_cardNameController] = new editable_text.TextEditingController.new();
      this[_tasks] = T$.JSArrayOfTask().of([]);
    }
    dispose() {
      this[_cardNameController].dispose();
      super.dispose();
    }
    [_addTask]() {
      this.setState(dart.fn(() => {
        this[_tasks][$add](new task_model.Task.new({description: "", isDone: false}));
      }, T$.VoidTovoid()));
    }
    [_removeTask](index) {
      this.setState(dart.fn(() => {
        this[_tasks][$removeAt](index);
      }, T$.VoidTovoid()));
    }
    [_saveCard]() {
      if (this[_cardNameController].text[$isNotEmpty] && this[_tasks][$isNotEmpty]) {
        provider$['ReadContext|read'](task_bloc.TaskBloc, this.context).add(new task_bloc.AddCard.new(this[_cardNameController].text, this[_tasks]));
        navigator.Navigator.pop(T$.ObjectN(), this.context);
      } else {
        dialog.showDialog(dart.dynamic, {context: this.context, builder: dart.fn(context => new dialog.AlertDialog.new({title: new text.Text.new("Ошибка"), content: new text.Text.new("Введите название и добавьте хотя бы одну задачу."), actions: T$.JSArrayOfWidget().of([new text_button.TextButton.new({onPressed: dart.fn(() => navigator.Navigator.pop(T$.ObjectN(), context), T$.VoidTovoid()), child: new text.Text.new("OK")})])}), T$.BuildContextToAlertDialog())});
      }
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Создание карточки"), actions: T$.JSArrayOfWidget().of([new icon_button.IconButton.new({icon: new icon.Icon.new(icons.Icons.save), onPressed: dart.bind(this, _saveCard)})])}), body: new basic.Padding.new({padding: C[1] || CT.C1, child: new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.stretch, children: T$.JSArrayOfWidget().of([new text_field.TextField.new({controller: this[_cardNameController], decoration: new input_decorator.InputDecoration.new({labelText: "Название карточки"})}), new basic.SizedBox.new({height: 20}), new basic.Expanded.new({child: new scroll_view.ListView.builder({itemCount: this[_tasks][$length], itemBuilder: dart.fn((context, index) => new list_tile.ListTile.new({title: new text_field.TextField.new({decoration: new input_decorator.InputDecoration.new({labelText: "Описание задачи"}), onChanged: dart.fn(value => {
                        this[_tasks][$_get](index).description = value;
                      }, T$.StringTovoid())}), trailing: new icon_button.IconButton.new({icon: new icon.Icon.new(icons.Icons.delete), onPressed: dart.fn(() => this[_removeTask](index), T$.VoidTovoid())})}), T$.BuildContextAndintToListTile())})}), new elevated_button.ElevatedButton.new({onPressed: dart.bind(this, _addTask), child: new text.Text.new("Добавить задачу")}), new basic.SizedBox.new({height: 20}), new elevated_button.ElevatedButton.new({onPressed: dart.bind(this, _saveCard), child: new text.Text.new("Сохранить")})])})})});
    }
    static ['_#new#tearOff']() {
      return new create_card._CreateCardPageState.new();
    }
  };
  (create_card._CreateCardPageState.new = function() {
    this[___CreateCardPageState__cardNameController] = null;
    this[___CreateCardPageState__tasks] = null;
    create_card._CreateCardPageState.__proto__.new.call(this);
    ;
  }).prototype = create_card._CreateCardPageState.prototype;
  dart.addTypeTests(create_card._CreateCardPageState);
  dart.addTypeCaches(create_card._CreateCardPageState);
  dart.setMethodSignature(create_card._CreateCardPageState, () => ({
    __proto__: dart.getMethods(create_card._CreateCardPageState.__proto__),
    [_addTask]: dart.fnType(dart.void, []),
    [_removeTask]: dart.fnType(dart.void, [core.int]),
    [_saveCard]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(create_card._CreateCardPageState, () => ({
    __proto__: dart.getGetters(create_card._CreateCardPageState.__proto__),
    [_cardNameController]: editable_text.TextEditingController,
    [_tasks]: core.List$(task_model.Task)
  }));
  dart.setSetterSignature(create_card._CreateCardPageState, () => ({
    __proto__: dart.getSetters(create_card._CreateCardPageState.__proto__),
    [_cardNameController]: editable_text.TextEditingController,
    [_tasks]: core.List$(task_model.Task)
  }));
  dart.setLibraryUri(create_card._CreateCardPageState, I[31]);
  dart.setFieldSignature(create_card._CreateCardPageState, () => ({
    __proto__: dart.getFields(create_card._CreateCardPageState.__proto__),
    [___CreateCardPageState__cardNameController]: dart.fieldType(dart.nullable(editable_text.TextEditingController)),
    [___CreateCardPageState__tasks]: dart.fieldType(dart.nullable(core.List$(task_model.Task)))
  }));
  tasks_screen.CellListView = class CellListView extends framework.StatefulWidget {
    createState() {
      return new tasks_screen._CellListViewState.new();
    }
    static ['_#new#tearOff']() {
      return new tasks_screen.CellListView.new();
    }
  };
  (tasks_screen.CellListView.new = function() {
    tasks_screen.CellListView.__proto__.new.call(this);
    ;
  }).prototype = tasks_screen.CellListView.prototype;
  dart.addTypeTests(tasks_screen.CellListView);
  dart.addTypeCaches(tasks_screen.CellListView);
  dart.setMethodSignature(tasks_screen.CellListView, () => ({
    __proto__: dart.getMethods(tasks_screen.CellListView.__proto__),
    createState: dart.fnType(tasks_screen._CellListViewState, [])
  }));
  dart.setLibraryUri(tasks_screen.CellListView, I[32]);
  var _buildFrontWidget = dart.privateName(tasks_screen, "_buildFrontWidget");
  var _buildInnerWidget = dart.privateName(tasks_screen, "_buildInnerWidget");
  tasks_screen._CellListViewState = class _CellListViewState extends framework.State$(tasks_screen.CellListView) {
    build(context) {
      return new (T$.BlocBuilderOfTaskBloc$TaskState()).new({builder: dart.fn((context, state) => new container.Container.new({color: new ui.Color.new(255), child: new scroll_view.ListView.builder({itemCount: state.cards[$length], itemBuilder: dart.fn((context, index) => new widget.SimpleFoldingCell.create({frontWidget: this[_buildFrontWidget](context, index), innerWidget: this[_buildInnerWidget](context, index), cellSize: new ui.Size.new(media_query.MediaQuery.of(context).size.width, 125), padding: new edge_insets.EdgeInsets.all(15), animationDuration: new core.Duration.new({milliseconds: 300}), borderRadius: 10, onOpen: dart.fn(() => core.print(dart.str(index) + " cell opened"), T$.VoidTovoid()), onClose: dart.fn(() => core.print(dart.str(index) + " cell closed"), T$.VoidTovoid())}), T$.BuildContextAndintToSimpleFoldingCell())})}), T$.BuildContextAndTaskStateToContainer())});
    }
    [_buildFrontWidget](context, index) {
      return new basic.Builder.new({builder: dart.fn(context => {
          let card = provider$['ReadContext|read'](task_bloc.TaskBloc, context).state.cards[$_get](index);
          return new container.Container.new({color: new ui.Color.new(4294954300), alignment: alignment.Alignment.center, child: new basic.Stack.new({children: T$.JSArrayOfWidget().of([new basic.Align.new({alignment: alignment.Alignment.center, child: new text.Text.new(card.cardName)}), new basic.Positioned.new({right: 10, bottom: 10, child: new text_button.TextButton.new({onPressed: dart.fn(() => {
                      let t9;
                      let foldingCellState = context.findAncestorStateOfType(widget.SimpleFoldingCellState);
                      t9 = foldingCellState;
                      t9 == null ? null : t9.toggleFold();
                    }, T$.VoidTovoid()), child: new text.Text.new("Показать"), style: text_button.TextButton.styleFrom({backgroundColor: colors.Colors.white, minimumSize: new ui.Size.new(80, 40)})})})])})});
        }, T$.BuildContextToContainer())});
    }
    [_buildInnerWidget](context, index) {
      let card = provider$['ReadContext|read'](task_bloc.TaskBloc, context).state.cards[$_get](index);
      return new basic.Builder.new({builder: dart.fn(context => new container.Container.new({color: new ui.Color.new(4293718777), padding: new edge_insets.EdgeInsets.only({top: 10}), child: new basic.Stack.new({children: T$.JSArrayOfWidget().of([new basic.Align.new({alignment: alignment.Alignment.topCenter, child: new text.Text.new(card.cardName)}), new basic.Align.new({alignment: alignment.Alignment.center, child: new scroll_view.ListView.builder({shrinkWrap: true, itemCount: card.tasks[$length], itemBuilder: dart.fn((context, id) => new checkbox_list_tile.CheckboxListTile.new({title: new text.Text.new(card.tasks[$_get](id).description), value: card.tasks[$_get](id).isDone, onChanged: dart.fn(newValue => {
                      provider$['ReadContext|read'](task_bloc.TaskBloc, context).add(new task_bloc.UpdateTask.new(index, id, dart.nullCheck(newValue)));
                    }, T$.boolNTovoid())}), T$.BuildContextAndintToCheckboxListTile())})}), new basic.Positioned.new({right: 10, bottom: 10, child: new basic.Row.new({children: T$.JSArrayOfWidget().of([new text_button.TextButton.new({onPressed: dart.fn(() => {
                        navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new edit_card.EditCardPage.new({index: index}), T$.BuildContextToEditCardPage())})).then(core.Null, dart.fn(_ => {
                          this.setState(dart.fn(() => {
                          }, T$.VoidTovoid()));
                        }, T$.dynamicToNull()));
                      }, T$.VoidTovoid()), child: new text.Text.new("Изменить"), style: text_button.TextButton.styleFrom({backgroundColor: colors.Colors.white, minimumSize: new ui.Size.new(80, 40)})}), new text_button.TextButton.new({onPressed: dart.fn(() => {
                        let t9;
                        let foldingCellState = context.findAncestorStateOfType(widget.SimpleFoldingCellState);
                        t9 = foldingCellState;
                        t9 == null ? null : t9.toggleFold();
                      }, T$.VoidTovoid()), child: new text.Text.new("Закрыть"), style: text_button.TextButton.styleFrom({backgroundColor: colors.Colors.white, minimumSize: new ui.Size.new(80, 40)})})])})})])})}), T$.BuildContextToContainer())});
    }
    static ['_#new#tearOff']() {
      return new tasks_screen._CellListViewState.new();
    }
  };
  (tasks_screen._CellListViewState.new = function() {
    tasks_screen._CellListViewState.__proto__.new.call(this);
    ;
  }).prototype = tasks_screen._CellListViewState.prototype;
  dart.addTypeTests(tasks_screen._CellListViewState);
  dart.addTypeCaches(tasks_screen._CellListViewState);
  dart.setMethodSignature(tasks_screen._CellListViewState, () => ({
    __proto__: dart.getMethods(tasks_screen._CellListViewState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_buildFrontWidget]: dart.fnType(framework.Widget, [framework.BuildContext, core.int]),
    [_buildInnerWidget]: dart.fnType(framework.Widget, [framework.BuildContext, core.int])
  }));
  dart.setLibraryUri(tasks_screen._CellListViewState, I[32]);
  adapter.HttpClientAdapter = class HttpClientAdapter extends core.Object {
    static new() {
      return browser_adapter.createAdapter();
    }
    static ['_#new#tearOff']() {
      return adapter.HttpClientAdapter.new();
    }
  };
  (adapter.HttpClientAdapter[dart.mixinNew] = function() {
  }).prototype = adapter.HttpClientAdapter.prototype;
  dart.addTypeTests(adapter.HttpClientAdapter);
  dart.addTypeCaches(adapter.HttpClientAdapter);
  dart.setStaticMethodSignature(adapter.HttpClientAdapter, () => ['new']);
  dart.setLibraryUri(adapter.HttpClientAdapter, I[33]);
  var isRedirect$ = dart.privateName(adapter, "ResponseBody.isRedirect");
  var stream$ = dart.privateName(adapter, "ResponseBody.stream");
  var statusCode$ = dart.privateName(adapter, "ResponseBody.statusCode");
  var statusMessage$ = dart.privateName(adapter, "ResponseBody.statusMessage");
  var redirects$ = dart.privateName(adapter, "ResponseBody.redirects");
  var headers$0 = dart.privateName(adapter, "ResponseBody.headers");
  var extra = dart.privateName(adapter, "ResponseBody.extra");
  var _onClose = dart.privateName(adapter, "_onClose");
  adapter.ResponseBody = class ResponseBody extends core.Object {
    get isRedirect() {
      return this[isRedirect$];
    }
    set isRedirect(value) {
      super.isRedirect = value;
    }
    get stream() {
      return this[stream$];
    }
    set stream(value) {
      this[stream$] = value;
    }
    get statusCode() {
      return this[statusCode$];
    }
    set statusCode(value) {
      this[statusCode$] = value;
    }
    get statusMessage() {
      return this[statusMessage$];
    }
    set statusMessage(value) {
      this[statusMessage$] = value;
    }
    get redirects() {
      return this[redirects$];
    }
    set redirects(value) {
      this[redirects$] = value;
    }
    get headers() {
      return this[headers$0];
    }
    set headers(value) {
      this[headers$0] = value;
    }
    get extra() {
      return this[extra];
    }
    set extra(value) {
      this[extra] = value;
    }
    static ['_#new#tearOff'](stream, statusCode, opts) {
      let statusMessage = opts && 'statusMessage' in opts ? opts.statusMessage : null;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
      let redirects = opts && 'redirects' in opts ? opts.redirects : null;
      let onClose = opts && 'onClose' in opts ? opts.onClose : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return new adapter.ResponseBody.new(stream, statusCode, {statusMessage: statusMessage, isRedirect: isRedirect, redirects: redirects, onClose: onClose, headers: headers});
    }
    static ['_#fromString#tearOff'](text, statusCode, opts) {
      let statusMessage = opts && 'statusMessage' in opts ? opts.statusMessage : null;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
      let onClose = opts && 'onClose' in opts ? opts.onClose : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return new adapter.ResponseBody.fromString(text, statusCode, {statusMessage: statusMessage, isRedirect: isRedirect, onClose: onClose, headers: headers});
    }
    static ['_#fromBytes#tearOff'](bytes, statusCode, opts) {
      let statusMessage = opts && 'statusMessage' in opts ? opts.statusMessage : null;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
      let onClose = opts && 'onClose' in opts ? opts.onClose : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return new adapter.ResponseBody.fromBytes(bytes, statusCode, {statusMessage: statusMessage, isRedirect: isRedirect, onClose: onClose, headers: headers});
    }
    get contentLength() {
      let t9, t9$;
      return core.int.parse((t9$ = (t9 = this.headers[$_get]("content-length"), t9 == null ? null : t9[$first]), t9$ == null ? "-1" : t9$));
    }
    close() {
      let t9;
      t9 = this[_onClose];
      return t9 == null ? null : t9();
    }
  };
  (adapter.ResponseBody.new = function(stream, statusCode, opts) {
    let t9;
    let statusMessage = opts && 'statusMessage' in opts ? opts.statusMessage : null;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let redirects = opts && 'redirects' in opts ? opts.redirects : null;
    let onClose = opts && 'onClose' in opts ? opts.onClose : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    this[extra] = new (T$.IdentityMapOfString$dynamic()).new();
    this[stream$] = stream;
    this[statusCode$] = statusCode;
    this[statusMessage$] = statusMessage;
    this[isRedirect$] = isRedirect;
    this[redirects$] = redirects;
    this[headers$0] = (t9 = headers, t9 == null ? new (T$.IdentityMapOfString$ListOfString()).new() : t9);
    this[_onClose] = onClose;
    ;
  }).prototype = adapter.ResponseBody.prototype;
  (adapter.ResponseBody.fromString = function(text, statusCode, opts) {
    let t9;
    let statusMessage = opts && 'statusMessage' in opts ? opts.statusMessage : null;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let onClose = opts && 'onClose' in opts ? opts.onClose : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    this[extra] = new (T$.IdentityMapOfString$dynamic()).new();
    this[redirects$] = null;
    this[statusCode$] = statusCode;
    this[statusMessage$] = statusMessage;
    this[isRedirect$] = isRedirect;
    this[stream$] = T$.StreamOfUint8List().value(_native_typed_data.NativeUint8List.fromList(convert.utf8.encode(text)));
    this[headers$0] = (t9 = headers, t9 == null ? new (T$.IdentityMapOfString$ListOfString()).new() : t9);
    this[_onClose] = onClose;
    ;
  }).prototype = adapter.ResponseBody.prototype;
  (adapter.ResponseBody.fromBytes = function(bytes, statusCode, opts) {
    let t9;
    let statusMessage = opts && 'statusMessage' in opts ? opts.statusMessage : null;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let onClose = opts && 'onClose' in opts ? opts.onClose : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    this[extra] = new (T$.IdentityMapOfString$dynamic()).new();
    this[redirects$] = null;
    this[statusCode$] = statusCode;
    this[statusMessage$] = statusMessage;
    this[isRedirect$] = isRedirect;
    this[stream$] = T$.StreamOfUint8List().value(typed_data.Uint8List.is(bytes) ? bytes : _native_typed_data.NativeUint8List.fromList(bytes));
    this[headers$0] = (t9 = headers, t9 == null ? new (T$.IdentityMapOfString$ListOfString()).new() : t9);
    this[_onClose] = onClose;
    ;
  }).prototype = adapter.ResponseBody.prototype;
  dart.addTypeTests(adapter.ResponseBody);
  dart.addTypeCaches(adapter.ResponseBody);
  dart.setMethodSignature(adapter.ResponseBody, () => ({
    __proto__: dart.getMethods(adapter.ResponseBody.__proto__),
    close: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(adapter.ResponseBody, () => ({
    __proto__: dart.getGetters(adapter.ResponseBody.__proto__),
    contentLength: core.int
  }));
  dart.setLibraryUri(adapter.ResponseBody, I[33]);
  dart.setFieldSignature(adapter.ResponseBody, () => ({
    __proto__: dart.getFields(adapter.ResponseBody.__proto__),
    isRedirect: dart.finalFieldType(core.bool),
    stream: dart.fieldType(async.Stream$(typed_data.Uint8List)),
    statusCode: dart.fieldType(core.int),
    statusMessage: dart.fieldType(dart.nullable(core.String)),
    redirects: dart.fieldType(dart.nullable(core.List$(redirect_record.RedirectRecord))),
    headers: dart.fieldType(core.Map$(core.String, core.List$(core.String))),
    extra: dart.fieldType(core.Map$(core.String, dart.dynamic)),
    [_onClose]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  var requestOptions = dart.privateName(cancel_token, "CancelToken.requestOptions");
  var _completer = dart.privateName(cancel_token, "_completer");
  var _cancelError = dart.privateName(cancel_token, "_cancelError");
  cancel_token.CancelToken = class CancelToken extends core.Object {
    get requestOptions() {
      return this[requestOptions];
    }
    set requestOptions(value) {
      this[requestOptions] = value;
    }
    static ['_#new#tearOff']() {
      return new cancel_token.CancelToken.new();
    }
    static isCancel(error) {
      return error.type === dio_exception.DioExceptionType.cancel;
    }
    get cancelError() {
      return this[_cancelError];
    }
    get isCancelled() {
      return this[_cancelError] != null;
    }
    get whenCancel() {
      return this[_completer].future;
    }
    cancel(reason = null) {
      let t9;
      this[_cancelError] = dio_exception.DioException.requestCancelled({requestOptions: (t9 = this.requestOptions, t9 == null ? new options$.RequestOptions.new() : t9), reason: reason, stackTrace: core.StackTrace.current});
      if (!this[_completer].isCompleted) {
        this[_completer].complete(this[_cancelError]);
      }
    }
  };
  (cancel_token.CancelToken.new = function() {
    this[_completer] = T$.CompleterOfDioException().new();
    this[_cancelError] = null;
    this[requestOptions] = null;
    ;
  }).prototype = cancel_token.CancelToken.prototype;
  dart.addTypeTests(cancel_token.CancelToken);
  dart.addTypeCaches(cancel_token.CancelToken);
  dart.setMethodSignature(cancel_token.CancelToken, () => ({
    __proto__: dart.getMethods(cancel_token.CancelToken.__proto__),
    cancel: dart.fnType(dart.void, [], [dart.nullable(core.Object)])
  }));
  dart.setStaticMethodSignature(cancel_token.CancelToken, () => ['isCancel']);
  dart.setGetterSignature(cancel_token.CancelToken, () => ({
    __proto__: dart.getGetters(cancel_token.CancelToken.__proto__),
    cancelError: dart.nullable(dio_exception.DioException),
    isCancelled: core.bool,
    whenCancel: async.Future$(dio_exception.DioException)
  }));
  dart.setLibraryUri(cancel_token.CancelToken, I[34]);
  dart.setFieldSignature(cancel_token.CancelToken, () => ({
    __proto__: dart.getFields(cancel_token.CancelToken.__proto__),
    [_completer]: dart.finalFieldType(async.Completer$(dio_exception.DioException)),
    [_cancelError]: dart.fieldType(dart.nullable(dio_exception.DioException)),
    requestOptions: dart.fieldType(dart.nullable(options$.RequestOptions))
  }));
  var __Dio_options = dart.privateName(dio$, "_#Dio#options");
  var __Dio_httpClientAdapter = dart.privateName(dio$, "_#Dio#httpClientAdapter");
  var __Dio_transformer = dart.privateName(dio$, "_#Dio#transformer");
  dio$.Dio = class Dio extends core.Object {
    static new(options = null) {
      return dio_for_browser.createDio(options);
    }
    static ['_#new#tearOff'](options = null) {
      return dio$.Dio.new(options);
    }
    get options() {
      let t9;
      t9 = this[__Dio_options];
      return t9 == null ? dart.throw(new _internal.LateError.fieldNI("options")) : t9;
    }
    set options(options$35param) {
      this[__Dio_options] = options$35param;
    }
    get httpClientAdapter() {
      let t9;
      t9 = this[__Dio_httpClientAdapter];
      return t9 == null ? dart.throw(new _internal.LateError.fieldNI("httpClientAdapter")) : t9;
    }
    set httpClientAdapter(httpClientAdapter$35param) {
      this[__Dio_httpClientAdapter] = httpClientAdapter$35param;
    }
    get transformer() {
      let t9;
      t9 = this[__Dio_transformer];
      return t9 == null ? dart.throw(new _internal.LateError.fieldNI("transformer")) : t9;
    }
    set transformer(transformer$35param) {
      this[__Dio_transformer] = transformer$35param;
    }
    downloadUri(uri, savePath, opts) {
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let deleteOnError = opts && 'deleteOnError' in opts ? opts.deleteOnError : true;
      let lengthHeader = opts && 'lengthHeader' in opts ? opts.lengthHeader : "content-length";
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      return this.download(uri.toString(), savePath, {onReceiveProgress: onReceiveProgress, lengthHeader: lengthHeader, deleteOnError: deleteOnError, cancelToken: cancelToken, data: data, options: options});
    }
  };
  (dio$.Dio[dart.mixinNew] = function() {
    this[__Dio_options] = null;
    this[__Dio_httpClientAdapter] = null;
    this[__Dio_transformer] = null;
  }).prototype = dio$.Dio.prototype;
  dart.addTypeTests(dio$.Dio);
  dart.addTypeCaches(dio$.Dio);
  dart.setMethodSignature(dio$.Dio, () => ({
    __proto__: dart.getMethods(dio$.Dio.__proto__),
    downloadUri: dart.fnType(async.Future$(response$.Response), [core.Uri, dart.dynamic], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.nullable(core.Object), deleteOnError: core.bool, lengthHeader: core.String, onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options)}, {})
  }));
  dart.setStaticMethodSignature(dio$.Dio, () => ['new']);
  dart.setGetterSignature(dio$.Dio, () => ({
    __proto__: dart.getGetters(dio$.Dio.__proto__),
    options: options$.BaseOptions,
    httpClientAdapter: adapter.HttpClientAdapter,
    transformer: transformer.Transformer
  }));
  dart.setSetterSignature(dio$.Dio, () => ({
    __proto__: dart.getSetters(dio$.Dio.__proto__),
    options: options$.BaseOptions,
    httpClientAdapter: adapter.HttpClientAdapter,
    transformer: transformer.Transformer
  }));
  dart.setLibraryUri(dio$.Dio, I[35]);
  dart.setFieldSignature(dio$.Dio, () => ({
    __proto__: dart.getFields(dio$.Dio.__proto__),
    [__Dio_options]: dart.fieldType(dart.nullable(options$.BaseOptions)),
    [__Dio_httpClientAdapter]: dart.fieldType(dart.nullable(adapter.HttpClientAdapter)),
    [__Dio_transformer]: dart.fieldType(dart.nullable(transformer.Transformer))
  }));
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  dio_exception.DioExceptionType = class DioExceptionType extends core._Enum {
    [_enumToString]() {
      return "DioExceptionType." + this[_name];
    }
  };
  (dio_exception.DioExceptionType.new = function(index, name) {
    dio_exception.DioExceptionType.__proto__.new.call(this, index, name);
    ;
  }).prototype = dio_exception.DioExceptionType.prototype;
  dart.addTypeTests(dio_exception.DioExceptionType);
  dart.addTypeCaches(dio_exception.DioExceptionType);
  dart.setMethodSignature(dio_exception.DioExceptionType, () => ({
    __proto__: dart.getMethods(dio_exception.DioExceptionType.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(dio_exception.DioExceptionType, I[36]);
  dart.setStaticFieldSignature(dio_exception.DioExceptionType, () => ['values', 'connectionTimeout', 'sendTimeout', 'receiveTimeout', 'badCertificate', 'badResponse', 'cancel', 'connectionError', 'unknown']);
  dart.defineLazy(dio_exception.DioExceptionType, {
    /*dio_exception.DioExceptionType.values*/get values() {
      return C[6] || CT.C6;
    },
    /*dio_exception.DioExceptionType.connectionTimeout*/get connectionTimeout() {
      return C[7] || CT.C7;
    },
    /*dio_exception.DioExceptionType.sendTimeout*/get sendTimeout() {
      return C[8] || CT.C8;
    },
    /*dio_exception.DioExceptionType.receiveTimeout*/get receiveTimeout() {
      return C[9] || CT.C9;
    },
    /*dio_exception.DioExceptionType.badCertificate*/get badCertificate() {
      return C[10] || CT.C10;
    },
    /*dio_exception.DioExceptionType.badResponse*/get badResponse() {
      return C[11] || CT.C11;
    },
    /*dio_exception.DioExceptionType.cancel*/get cancel() {
      return C[12] || CT.C12;
    },
    /*dio_exception.DioExceptionType.connectionError*/get connectionError() {
      return C[13] || CT.C13;
    },
    /*dio_exception.DioExceptionType.unknown*/get unknown() {
      return C[14] || CT.C14;
    }
  }, false);
  var requestOptions$ = dart.privateName(dio_exception, "DioException.requestOptions");
  var response$0 = dart.privateName(dio_exception, "DioException.response");
  var type$ = dart.privateName(dio_exception, "DioException.type");
  var error$ = dart.privateName(dio_exception, "DioException.error");
  var stackTrace$ = dart.privateName(dio_exception, "DioException.stackTrace");
  var message$ = dart.privateName(dio_exception, "DioException.message");
  dio_exception.DioException = class DioException extends core.Object {
    get requestOptions() {
      return this[requestOptions$];
    }
    set requestOptions(value) {
      super.requestOptions = value;
    }
    get response() {
      return this[response$0];
    }
    set response(value) {
      super.response = value;
    }
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get error() {
      return this[error$];
    }
    set error(value) {
      super.error = value;
    }
    get stackTrace() {
      return this[stackTrace$];
    }
    set stackTrace(value) {
      super.stackTrace = value;
    }
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](opts) {
      let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
      let response = opts && 'response' in opts ? opts.response : null;
      let type = opts && 'type' in opts ? opts.type : C[14] || CT.C14;
      let error = opts && 'error' in opts ? opts.error : null;
      let stackTrace = opts && 'stackTrace' in opts ? opts.stackTrace : null;
      let message = opts && 'message' in opts ? opts.message : null;
      return new dio_exception.DioException.new({requestOptions: requestOptions, response: response, type: type, error: error, stackTrace: stackTrace, message: message});
    }
    static badResponse(opts) {
      let statusCode = opts && 'statusCode' in opts ? opts.statusCode : null;
      let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
      let response = opts && 'response' in opts ? opts.response : null;
      return new dio_exception.DioException.new({type: dio_exception.DioExceptionType.badResponse, message: dio_exception.DioException._badResponseExceptionMessage(statusCode), requestOptions: requestOptions, response: response, error: null});
    }
    static ['_#badResponse#tearOff'](opts) {
      let statusCode = opts && 'statusCode' in opts ? opts.statusCode : null;
      let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
      let response = opts && 'response' in opts ? opts.response : null;
      return dio_exception.DioException.badResponse({statusCode: statusCode, requestOptions: requestOptions, response: response});
    }
    static connectionTimeout(opts) {
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
      let error = opts && 'error' in opts ? opts.error : null;
      return new dio_exception.DioException.new({type: dio_exception.DioExceptionType.connectionTimeout, message: "The request connection took longer than " + dart.str(timeout) + " " + "and it was aborted. " + "To get rid of this exception, try raising the " + "RequestOptions.connectTimeout above the duration of " + dart.str(timeout) + " or " + "improve the response time of the server.", requestOptions: requestOptions, response: null, error: error});
    }
    static ['_#connectionTimeout#tearOff'](opts) {
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
      let error = opts && 'error' in opts ? opts.error : null;
      return dio_exception.DioException.connectionTimeout({timeout: timeout, requestOptions: requestOptions, error: error});
    }
    static sendTimeout(opts) {
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
      return new dio_exception.DioException.new({type: dio_exception.DioExceptionType.sendTimeout, message: "The request took longer than " + dart.str(timeout) + " to send data. " + "It was aborted. " + "To get rid of this exception, try raising the " + "RequestOptions.sendTimeout above the duration of " + dart.str(timeout) + " or " + "improve the response time of the server.", requestOptions: requestOptions, response: null, error: null});
    }
    static ['_#sendTimeout#tearOff'](opts) {
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
      return dio_exception.DioException.sendTimeout({timeout: timeout, requestOptions: requestOptions});
    }
    static receiveTimeout(opts) {
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
      let error = opts && 'error' in opts ? opts.error : null;
      return new dio_exception.DioException.new({type: dio_exception.DioExceptionType.receiveTimeout, message: "The request took longer than " + dart.str(timeout) + " to receive data. " + "It was aborted. " + "To get rid of this exception, try raising the " + "RequestOptions.receiveTimeout above the duration of " + dart.str(timeout) + " or " + "improve the response time of the server.", requestOptions: requestOptions, response: null, error: error});
    }
    static ['_#receiveTimeout#tearOff'](opts) {
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
      let error = opts && 'error' in opts ? opts.error : null;
      return dio_exception.DioException.receiveTimeout({timeout: timeout, requestOptions: requestOptions, error: error});
    }
    static requestCancelled(opts) {
      let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
      let reason = opts && 'reason' in opts ? opts.reason : null;
      let stackTrace = opts && 'stackTrace' in opts ? opts.stackTrace : null;
      return new dio_exception.DioException.new({type: dio_exception.DioExceptionType.cancel, message: "The request was manually cancelled by the user.", requestOptions: requestOptions, response: null, error: reason, stackTrace: stackTrace});
    }
    static ['_#requestCancelled#tearOff'](opts) {
      let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
      let reason = opts && 'reason' in opts ? opts.reason : null;
      let stackTrace = opts && 'stackTrace' in opts ? opts.stackTrace : null;
      return dio_exception.DioException.requestCancelled({requestOptions: requestOptions, reason: reason, stackTrace: stackTrace});
    }
    static connectionError(opts) {
      let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
      let reason = opts && 'reason' in opts ? opts.reason : null;
      let error = opts && 'error' in opts ? opts.error : null;
      return new dio_exception.DioException.new({type: dio_exception.DioExceptionType.connectionError, message: "The connection errored: " + reason + " " + "This indicates an error which most likely cannot be solved by the library.", requestOptions: requestOptions, response: null, error: error});
    }
    static ['_#connectionError#tearOff'](opts) {
      let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
      let reason = opts && 'reason' in opts ? opts.reason : null;
      let error = opts && 'error' in opts ? opts.error : null;
      return dio_exception.DioException.connectionError({requestOptions: requestOptions, reason: reason, error: error});
    }
    copyWith(opts) {
      let t11, t11$, t11$0, t11$1, t11$2, t11$3;
      let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
      let response = opts && 'response' in opts ? opts.response : null;
      let type = opts && 'type' in opts ? opts.type : null;
      let error = opts && 'error' in opts ? opts.error : null;
      let stackTrace = opts && 'stackTrace' in opts ? opts.stackTrace : null;
      let message = opts && 'message' in opts ? opts.message : null;
      return new dio_exception.DioException.new({requestOptions: (t11 = requestOptions, t11 == null ? this.requestOptions : t11), response: (t11$ = response, t11$ == null ? this.response : t11$), type: (t11$0 = type, t11$0 == null ? this.type : t11$0), error: (t11$1 = error, t11$1 == null ? this.error : t11$1), stackTrace: (t11$2 = stackTrace, t11$2 == null ? this.stackTrace : t11$2), message: (t11$3 = message, t11$3 == null ? this.message : t11$3)});
    }
    toString() {
      let msg = "DioException [" + dio_exception['_DioExceptionTypeExtension|toPrettyDescription'](this.type) + "]: " + dart.str(this.message);
      if (this.error != null) {
        msg = msg + ("\nError: " + dart.str(this.error));
      }
      return msg;
    }
    static _badResponseExceptionMessage(statusCode) {
      let message = null;
      if (statusCode >= 100 && statusCode < 200) {
        message = "This is an informational response - the request was received, continuing processing";
      } else if (statusCode >= 200 && statusCode < 300) {
        message = "The request was successfully received, understood, and accepted";
      } else if (statusCode >= 300 && statusCode < 400) {
        message = "Redirection: further action needs to be taken in order to complete the request";
      } else if (statusCode >= 400 && statusCode < 500) {
        message = "Client error - the request contains bad syntax or cannot be fulfilled";
      } else if (statusCode >= 500 && statusCode < 600) {
        message = "Server error - the server failed to fulfil an apparently valid request";
      } else {
        message = "A response with a status code that is not within the range of inclusive 100 to exclusive 600" + "is a non-standard response, possibly due to the server's software";
      }
      let buffer = new core.StringBuffer.new();
      buffer.writeln("This exception was thrown because the response has a status code of " + dart.str(statusCode) + " " + "and RequestOptions.validateStatus was configured to throw for this status code.");
      buffer.writeln("The status code of " + dart.str(statusCode) + " has the following meaning: \"" + message + "\"");
      buffer.writeln("Read more about status codes at https://developer.mozilla.org/en-US/docs/Web/HTTP/Status");
      buffer.writeln("In order to resolve this exception you typically have either to verify " + "and fix your request code or you have to fix the server code.");
      return buffer.toString();
    }
  };
  (dio_exception.DioException.new = function(opts) {
    let t11, t11$, t11$0;
    let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
    let response = opts && 'response' in opts ? opts.response : null;
    let type = opts && 'type' in opts ? opts.type : C[14] || CT.C14;
    let error = opts && 'error' in opts ? opts.error : null;
    let stackTrace = opts && 'stackTrace' in opts ? opts.stackTrace : null;
    let message = opts && 'message' in opts ? opts.message : null;
    this[requestOptions$] = requestOptions;
    this[response$0] = response;
    this[type$] = type;
    this[error$] = error;
    this[message$] = message;
    this[stackTrace$] = stackTrace === core.StackTrace.empty ? (t11 = requestOptions.sourceStackTrace, t11 == null ? core.StackTrace.current : t11) : (t11$0 = (t11$ = stackTrace, t11$ == null ? requestOptions.sourceStackTrace : t11$), t11$0 == null ? core.StackTrace.current : t11$0);
    ;
  }).prototype = dio_exception.DioException.prototype;
  dart.addTypeTests(dio_exception.DioException);
  dart.addTypeCaches(dio_exception.DioException);
  dio_exception.DioException[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(dio_exception.DioException, () => ({
    __proto__: dart.getMethods(dio_exception.DioException.__proto__),
    copyWith: dart.fnType(dio_exception.DioException, [], {error: dart.nullable(core.Object), message: dart.nullable(core.String), requestOptions: dart.nullable(options$.RequestOptions), response: dart.nullable(response$.Response), stackTrace: dart.nullable(core.StackTrace), type: dart.nullable(dio_exception.DioExceptionType)}, {})
  }));
  dart.setStaticMethodSignature(dio_exception.DioException, () => ['badResponse', 'connectionTimeout', 'sendTimeout', 'receiveTimeout', 'requestCancelled', 'connectionError', '_badResponseExceptionMessage']);
  dart.setLibraryUri(dio_exception.DioException, I[36]);
  dart.setFieldSignature(dio_exception.DioException, () => ({
    __proto__: dart.getFields(dio_exception.DioException.__proto__),
    requestOptions: dart.finalFieldType(options$.RequestOptions),
    response: dart.finalFieldType(dart.nullable(response$.Response)),
    type: dart.finalFieldType(dio_exception.DioExceptionType),
    error: dart.finalFieldType(dart.nullable(core.Object)),
    stackTrace: dart.finalFieldType(core.StackTrace),
    message: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(dio_exception.DioException, ['toString']);
  dio_exception['_DioExceptionTypeExtension|toPrettyDescription'] = function _DioExceptionTypeExtension$124toPrettyDescription($this) {
    switch ($this) {
      case C[7] || CT.C7:
        {
          return "connection timeout";
        }
      case C[8] || CT.C8:
        {
          return "send timeout";
        }
      case C[9] || CT.C9:
        {
          return "receive timeout";
        }
      case C[10] || CT.C10:
        {
          return "bad certificate";
        }
      case C[11] || CT.C11:
        {
          return "bad response";
        }
      case C[12] || CT.C12:
        {
          return "request cancelled";
        }
      case C[13] || CT.C13:
        {
          return "connection error";
        }
      case C[14] || CT.C14:
        {
          return "unknown";
        }
    }
  };
  dio_exception['_DioExceptionTypeExtension|get#toPrettyDescription'] = function _DioExceptionTypeExtension$124get$35toPrettyDescription($this) {
    return dart.fn(() => dio_exception['_DioExceptionTypeExtension|toPrettyDescription']($this), T$.VoidToString());
  };
  var transformer$ = dart.privateName(dio_mixin, "DioMixin.transformer");
  var __DioMixin_options = dart.privateName(dio_mixin, "_#DioMixin#options");
  var _interceptors$ = dart.privateName(dio_mixin, "_interceptors");
  var __DioMixin_httpClientAdapter = dart.privateName(dio_mixin, "_#DioMixin#httpClientAdapter");
  var _closed = dart.privateName(dio_mixin, "_closed");
  var _handleRequest = dart.privateName(dio_mixin, "_handleRequest");
  var _dispatchRequest = dart.privateName(dio_mixin, "_dispatchRequest");
  var _handleResponse = dart.privateName(dio_mixin, "_handleResponse");
  var _handleError = dart.privateName(dio_mixin, "_handleError");
  var _transformData = dart.privateName(dio_mixin, "_transformData");
  var _isValidToken = dart.privateName(dio_mixin, "_isValidToken");
  dio_mixin.DioMixin = class DioMixin extends core.Object {
    get transformer() {
      return this[transformer$];
    }
    set transformer(value) {
      this[transformer$] = value;
    }
    get options() {
      let t13;
      t13 = this[__DioMixin_options];
      return t13 == null ? dart.throw(new _internal.LateError.fieldNI("options")) : t13;
    }
    set options(options$35param) {
      this[__DioMixin_options] = options$35param;
    }
    get interceptors() {
      return this[_interceptors$];
    }
    get httpClientAdapter() {
      let t13;
      t13 = this[__DioMixin_httpClientAdapter];
      return t13 == null ? dart.throw(new _internal.LateError.fieldNI("httpClientAdapter")) : t13;
    }
    set httpClientAdapter(httpClientAdapter$35param) {
      this[__DioMixin_httpClientAdapter] = httpClientAdapter$35param;
    }
    close(opts) {
      let force = opts && 'force' in opts ? opts.force : false;
      this[_closed] = true;
      this.httpClientAdapter.close({force: force});
    }
    get(T, path, opts) {
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return this.request(T, path, {data: data, queryParameters: queryParameters, options: dio_mixin.DioMixin.checkOptions("GET", options), onReceiveProgress: onReceiveProgress, cancelToken: cancelToken});
    }
    getUri(T, uri, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return this.requestUri(T, uri, {data: data, options: dio_mixin.DioMixin.checkOptions("GET", options), onReceiveProgress: onReceiveProgress, cancelToken: cancelToken});
    }
    post(T, path, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return this.request(T, path, {data: data, options: dio_mixin.DioMixin.checkOptions("POST", options), queryParameters: queryParameters, cancelToken: cancelToken, onSendProgress: onSendProgress, onReceiveProgress: onReceiveProgress});
    }
    postUri(T, uri, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return this.requestUri(T, uri, {data: data, options: dio_mixin.DioMixin.checkOptions("POST", options), cancelToken: cancelToken, onSendProgress: onSendProgress, onReceiveProgress: onReceiveProgress});
    }
    put(T, path, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return this.request(T, path, {data: data, queryParameters: queryParameters, options: dio_mixin.DioMixin.checkOptions("PUT", options), cancelToken: cancelToken, onSendProgress: onSendProgress, onReceiveProgress: onReceiveProgress});
    }
    putUri(T, uri, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return this.requestUri(T, uri, {data: data, options: dio_mixin.DioMixin.checkOptions("PUT", options), cancelToken: cancelToken, onSendProgress: onSendProgress, onReceiveProgress: onReceiveProgress});
    }
    head(T, path, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      return this.request(T, path, {data: data, queryParameters: queryParameters, options: dio_mixin.DioMixin.checkOptions("HEAD", options), cancelToken: cancelToken});
    }
    headUri(T, uri, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      return this.requestUri(T, uri, {data: data, options: dio_mixin.DioMixin.checkOptions("HEAD", options), cancelToken: cancelToken});
    }
    delete(T, path, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      return this.request(T, path, {data: data, queryParameters: queryParameters, options: dio_mixin.DioMixin.checkOptions("DELETE", options), cancelToken: cancelToken});
    }
    deleteUri(T, uri, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      return this.requestUri(T, uri, {data: data, options: dio_mixin.DioMixin.checkOptions("DELETE", options), cancelToken: cancelToken});
    }
    patch(T, path, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return this.request(T, path, {data: data, queryParameters: queryParameters, options: dio_mixin.DioMixin.checkOptions("PATCH", options), cancelToken: cancelToken, onSendProgress: onSendProgress, onReceiveProgress: onReceiveProgress});
    }
    patchUri(T, uri, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return this.requestUri(T, uri, {data: data, options: dio_mixin.DioMixin.checkOptions("PATCH", options), cancelToken: cancelToken, onSendProgress: onSendProgress, onReceiveProgress: onReceiveProgress});
    }
    downloadUri(uri, savePath, opts) {
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let deleteOnError = opts && 'deleteOnError' in opts ? opts.deleteOnError : true;
      let lengthHeader = opts && 'lengthHeader' in opts ? opts.lengthHeader : "content-length";
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      return this.download(uri.toString(), savePath, {onReceiveProgress: onReceiveProgress, lengthHeader: lengthHeader, deleteOnError: deleteOnError, cancelToken: cancelToken, data: data, options: options});
    }
    download(urlPath, savePath, opts) {
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let deleteOnError = opts && 'deleteOnError' in opts ? opts.deleteOnError : true;
      let lengthHeader = opts && 'lengthHeader' in opts ? opts.lengthHeader : "content-length";
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      dart.throw(new core.UnimplementedError.new());
    }
    requestUri(T, uri, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return this.request(T, uri.toString(), {data: data, cancelToken: cancelToken, options: options, onSendProgress: onSendProgress, onReceiveProgress: onReceiveProgress});
    }
    request(T, path, opts) {
      let t13;
      let data = opts && 'data' in opts ? opts.data : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      let requestOptions = (t13 = options, t13 == null ? new options$.Options.new() : t13).compose(this.options, path, {data: data, queryParameters: queryParameters, onReceiveProgress: onReceiveProgress, onSendProgress: onSendProgress, cancelToken: cancelToken, sourceStackTrace: core.StackTrace.current});
      if (this[_closed]) {
        dart.throw(dio_exception.DioException.connectionError({reason: "Dio can't establish a new connection after it was closed.", requestOptions: requestOptions}));
      }
      return this.fetch(T, requestOptions);
    }
    fetch(T, requestOptions) {
      return async.async(response$.Response$(T), (function* fetch() {
        if (!dart.wrapType(T)._equals(dart.wrapType(dart.dynamic)) && !(requestOptions.responseType === options$.ResponseType.bytes || requestOptions.responseType === options$.ResponseType.stream)) {
          if (dart.wrapType(T)._equals(dart.wrapType(core.String))) {
            requestOptions.responseType = options$.ResponseType.plain;
          } else {
            requestOptions.responseType = options$.ResponseType.json;
          }
        }
        function requestInterceptorWrapper(cb) {
          return dart.fn(incomingState => {
            let state = dio_mixin.InterceptorState.as(incomingState);
            if (state.type === dio_mixin.InterceptorResultType.next) {
              return dio_mixin.DioMixin.listenCancelForAsyncTask(dart.dynamic, requestOptions.cancelToken, async.Future.new(dart.fn(() => async.async(dio_mixin.InterceptorState, function*() {
                let handler = new dio_mixin.RequestInterceptorHandler.new();
                cb(options$.RequestOptions.as(state.data), handler);
                return handler.future;
              }), T$.VoidToFutureOfInterceptorState())));
            }
            return state;
          }, T$.dynamicToObject());
        }
        dart.fn(requestInterceptorWrapper, T$.FnToFn());
        function responseInterceptorWrapper(cb) {
          return dart.fn(incomingState => {
            let state = dio_mixin.InterceptorState.as(incomingState);
            if (state.type === dio_mixin.InterceptorResultType.next || state.type === dio_mixin.InterceptorResultType.resolveCallFollowing) {
              return dio_mixin.DioMixin.listenCancelForAsyncTask(dart.dynamic, requestOptions.cancelToken, async.Future.new(dart.fn(() => async.async(dio_mixin.InterceptorState, function*() {
                let handler = new dio_mixin.ResponseInterceptorHandler.new();
                cb(response$.Response.as(state.data), handler);
                return handler.future;
              }), T$.VoidToFutureOfInterceptorState())));
            }
            return state;
          }, T$.dynamicToObject());
        }
        dart.fn(responseInterceptorWrapper, T$.FnToFn$1());
        function errorInterceptorWrapper(cb) {
          return dart.fn(error => {
            let state = dio_mixin.InterceptorState.is(error) ? error : new (T$.InterceptorStateOfDioException()).new(dio_mixin.DioMixin.assureDioException(core.Object.as(error), requestOptions));
            function handleError() {
              return async.async(dio_mixin.InterceptorState, function* handleError() {
                let handler = new dio_mixin.ErrorInterceptorHandler.new();
                cb(dio_exception.DioException.as(state.data), handler);
                return handler.future;
              });
            }
            dart.fn(handleError, T$.VoidToFutureOfInterceptorState());
            if (dio_exception.DioException.is(state.data) && dart.equals(dart.dload(state.data, 'type'), dio_exception.DioExceptionType.cancel)) {
              return handleError();
            }
            if (state.type === dio_mixin.InterceptorResultType.next || state.type === dio_mixin.InterceptorResultType.rejectCallFollowing) {
              return dio_mixin.DioMixin.listenCancelForAsyncTask(dart.dynamic, requestOptions.cancelToken, async.Future.new(handleError));
            }
            dart.throw(error);
          }, T$.dynamicToFuture());
        }
        dart.fn(errorInterceptorWrapper, T$.FnToFn$2());
        let future = async.Future.new(dart.fn(() => new (T$.InterceptorStateOfRequestOptions()).new(requestOptions), T$.VoidToInterceptorStateOfRequestOptions()));
        for (let interceptor of this.interceptors) {
          let fun = dio_mixin.QueuedInterceptor.is(interceptor) ? dart.bind(interceptor, _handleRequest) : dart.bind(interceptor, 'onRequest');
          future = future.then(dart.dynamic, requestInterceptorWrapper(fun));
        }
        future = future.then(dart.dynamic, requestInterceptorWrapper(dart.fn((reqOpt, handler) => async.async(dart.void, (function*() {
          requestOptions = reqOpt;
          try {
            let value = (yield this[_dispatchRequest](T, reqOpt));
            handler.resolve(value, true);
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (dio_exception.DioException.is(e)) {
              handler.reject(e, true);
            } else
              throw e$;
          }
        }).bind(this)), T$.RequestOptionsAndRequestInterceptorHandlerToFutureOfvoid())));
        for (let interceptor of this.interceptors) {
          let fun = dio_mixin.QueuedInterceptor.is(interceptor) ? dart.bind(interceptor, _handleResponse) : dart.bind(interceptor, 'onResponse');
          future = future.then(dart.dynamic, responseInterceptorWrapper(fun));
        }
        for (let interceptor of this.interceptors) {
          let fun = dio_mixin.QueuedInterceptor.is(interceptor) ? dart.bind(interceptor, _handleError) : dart.bind(interceptor, 'onError');
          future = future.catchError(errorInterceptorWrapper(fun));
        }
        try {
          let data = (yield future);
          return dio_mixin.DioMixin.assureResponse(T, core.Object.as(dio_mixin.InterceptorState.is(data) ? data.data : data), requestOptions);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            let isState = dio_mixin.InterceptorState.is(e);
            if (isState) {
              if (e.type === dio_mixin.InterceptorResultType.resolve) {
                return dio_mixin.DioMixin.assureResponse(T, core.Object.as(e.data), requestOptions);
              }
            }
            dart.throw(dio_mixin.DioMixin.assureDioException(core.Object.as(isState ? e.data : e), requestOptions));
          } else
            throw e$;
        }
      }).bind(this));
    }
    [_dispatchRequest](T, reqOpt) {
      return async.async(response$.Response, (function* _dispatchRequest() {
        let t15, t15$, t16, t15$0;
        let cancelToken = reqOpt.cancelToken;
        try {
          let stream = (yield this[_transformData](reqOpt));
          let responseBody = (yield this.httpClientAdapter.fetch(reqOpt, stream, (t15 = cancelToken, t15 == null ? null : t15.whenCancel)));
          let headers = new headers$.Headers.fromMap(responseBody.headers, {preserveHeaderCase: reqOpt.preserveHeaderCase});
          responseBody.headers = headers.map;
          let ret = new response$.Response.new({headers: headers, requestOptions: reqOpt, redirects: (t15$ = responseBody.redirects, t15$ == null ? T$.JSArrayOfRedirectRecord().of([]) : t15$), isRedirect: responseBody.isRedirect, statusCode: responseBody.statusCode, statusMessage: responseBody.statusMessage, extra: responseBody.extra});
          let statusOk = (t15$0 = reqOpt, t16 = responseBody.statusCode, t15$0.validateStatus(t16));
          if (statusOk || reqOpt.receiveDataWhenStatusError === true) {
            responseBody.stream = response_stream_handler.handleResponseStream(reqOpt, responseBody);
            let data = (yield this.transformer.transformResponse(reqOpt, responseBody));
            if (typeof data == 'string' && data[$isEmpty] && !dart.wrapType(T)._equals(dart.wrapType(dart.dynamic)) && !dart.wrapType(T)._equals(dart.wrapType(core.String)) && reqOpt.responseType === options$.ResponseType.json) {
              data = null;
            }
            ret.data = data;
          } else {
            responseBody.close();
          }
          dio_mixin.DioMixin.checkCancelled(cancelToken);
          if (statusOk) {
            return ret;
          } else {
            dart.throw(dio_exception.DioException.badResponse({statusCode: responseBody.statusCode, requestOptions: reqOpt, response: ret}));
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(dio_mixin.DioMixin.assureDioException(e, reqOpt));
          } else
            throw e$;
        }
      }).bind(this));
    }
    [_isValidToken](token) {
      dio_mixin._checkNotNullable(core.String, token, "token");
      let validChars = "                                 ! #$%&'  *+ -. 0123456789       ABCDEFGHIJKLMNOPQRSTUVWXYZ   ^_`abcdefghijklmnopqrstuvwxyz | ~ ";
      for (let codeUnit of token[$codeUnits]) {
        if (codeUnit >= validChars.length || validChars[$codeUnitAt](codeUnit) === 32) {
          return false;
        }
      }
      return true;
    }
    [_transformData](options) {
      return async.async(T$.StreamNOfUint8List(), (function* _transformData() {
        if (!this[_isValidToken](options.method)) {
          dart.throw(new core.ArgumentError.value(options.method, "method"));
        }
        let data = options.data;
        if (data != null) {
          let stream = null;
          let length = null;
          if (async.Stream.is(data)) {
            if (!T$.StreamOfListOfint().is(data)) {
              dart.throw(new core.ArgumentError.value(dart.runtimeType(data), "data", "Stream type must be `Stream<List<int>>`"));
            }
            stream = data;
            options.headers[$keys][$any](dart.fn(key => {
              if (key[$toLowerCase]() === "content-length") {
                length = core.int.parse(dart.toString(options.headers[$_get](key)));
                return true;
              }
              return false;
            }, T$.StringTobool()));
          } else if (form_data.FormData.is(data)) {
            options.headers[$_set]("content-type", "multipart/form-data" + "; " + "boundary=" + data.boundary);
            stream = data.finalize();
            length = data.length;
            options.headers[$_set]("content-length", dart.toString(length));
          } else {
            let bytes = null;
            if (typed_data.Uint8List.is(data)) {
              bytes = data;
            } else {
              let transformed = (yield this.transformer.transformRequest(options));
              if (options.requestEncoder != null) {
                let encoded = dart.nullCheck(options.requestEncoder)(transformed, options);
                if (async.Future.is(encoded)) {
                  bytes = (yield encoded);
                } else {
                  bytes = encoded;
                }
              } else {
                bytes = convert.utf8.encode(transformed);
              }
            }
            length = bytes[$length];
            options.headers[$_set]("content-length", dart.toString(length));
            let group = T$.JSArrayOfListOfint().of([]);
            let groupCount = (bytes[$length] / 1024)[$ceil]();
            for (let i = 0; i < groupCount; i = i + 1) {
              let start = i * 1024;
              group[$add](bytes[$sublist](start, math.min(core.int, start + 1024, bytes[$length])));
            }
            stream = T$.StreamOfListOfint().fromIterable(group);
          }
          return browser_progress_stream.addProgress(stream, length, options);
        }
        return null;
      }).bind(this));
    }
    static checkCancelled(cancelToken) {
      let t16;
      let error = (t16 = cancelToken, t16 == null ? null : t16.cancelError);
      if (error != null) {
        dart.throw(error);
      }
    }
    static listenCancelForAsyncTask(T, cancelToken, future) {
      if (cancelToken == null) {
        return future;
      }
      return async.Future.any(T, _interceptors.JSArray$(async.Future$(T)).of([future, cancelToken.whenCancel.then(T, dart.fn(e => dart.throw(e), T$.DioExceptionToNever()))]));
    }
    static checkOptions(method, options) {
      options == null ? options = new options$.Options.new() : null;
      options.method = method;
      return options;
    }
    static assureDioException(error, requestOptions) {
      if (dio_exception.DioException.is(error)) {
        return error;
      }
      return new dio_exception.DioException.new({requestOptions: requestOptions, error: error});
    }
    static assureResponse(T, response, requestOptions) {
      if (!response$.Response.is(response)) {
        return new (response$.Response$(T)).new({data: T.as(response), requestOptions: requestOptions});
      } else if (!response$.Response$(T).is(response)) {
        let data = dart.nullable(T).as(response.data);
        let headers = null;
        if (adapter.ResponseBody.is(data)) {
          headers = new headers$.Headers.fromMap(data.headers, {preserveHeaderCase: requestOptions.preserveHeaderCase});
        } else {
          headers = response.headers;
        }
        return new (response$.Response$(T)).new({data: data, headers: headers, requestOptions: response.requestOptions, statusCode: response.statusCode, isRedirect: response.isRedirect, redirects: response.redirects, statusMessage: response.statusMessage, extra: response.extra});
      }
      return response;
    }
  };
  (dio_mixin.DioMixin.new = function() {
    this[__DioMixin_options] = null;
    this[_interceptors$] = new dio_mixin.Interceptors.new();
    this[__DioMixin_httpClientAdapter] = null;
    this[transformer$] = new background_transformer.BackgroundTransformer.new();
    this[_closed] = false;
    ;
  }).prototype = dio_mixin.DioMixin.prototype;
  dart.addTypeTests(dio_mixin.DioMixin);
  dart.addTypeCaches(dio_mixin.DioMixin);
  dio_mixin.DioMixin[dart.implements] = () => [dio$.Dio];
  dart.setMethodSignature(dio_mixin.DioMixin, () => ({
    __proto__: dart.getMethods(dio_mixin.DioMixin.__proto__),
    close: dart.fnType(dart.void, [], {force: core.bool}, {}),
    get: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.nullable(core.Object), onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    getUri: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.Uri], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.nullable(core.Object), onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options)}, {}], T => [dart.nullable(core.Object)]),
    post: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.nullable(core.Object), onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    postUri: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.Uri], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.nullable(core.Object), onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options)}, {}], T => [dart.nullable(core.Object)]),
    put: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.nullable(core.Object), onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    putUri: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.Uri], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.nullable(core.Object), onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options)}, {}], T => [dart.nullable(core.Object)]),
    head: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.nullable(core.Object), options: dart.nullable(options$.Options), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    headUri: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.Uri], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.nullable(core.Object), options: dart.nullable(options$.Options)}, {}], T => [dart.nullable(core.Object)]),
    delete: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.nullable(core.Object), options: dart.nullable(options$.Options), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    deleteUri: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.Uri], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.nullable(core.Object), options: dart.nullable(options$.Options)}, {}], T => [dart.nullable(core.Object)]),
    patch: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.nullable(core.Object), onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    patchUri: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.Uri], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.nullable(core.Object), onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options)}, {}], T => [dart.nullable(core.Object)]),
    downloadUri: dart.fnType(async.Future$(response$.Response), [core.Uri, dart.dynamic], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.nullable(core.Object), deleteOnError: core.bool, lengthHeader: core.String, onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options)}, {}),
    download: dart.fnType(async.Future$(response$.Response), [core.String, dart.dynamic], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.nullable(core.Object), deleteOnError: core.bool, lengthHeader: core.String, onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    requestUri: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.Uri], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.nullable(core.Object), onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options)}, {}], T => [dart.nullable(core.Object)]),
    request: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.nullable(core.Object), onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    fetch: dart.gFnType(T => [async.Future$(response$.Response$(T)), [options$.RequestOptions]], T => [dart.nullable(core.Object)]),
    [_dispatchRequest]: dart.gFnType(T => [async.Future$(response$.Response), [options$.RequestOptions]], T => [dart.nullable(core.Object)]),
    [_isValidToken]: dart.fnType(core.bool, [core.String]),
    [_transformData]: dart.fnType(async.Future$(dart.nullable(async.Stream$(typed_data.Uint8List))), [options$.RequestOptions])
  }));
  dart.setStaticMethodSignature(dio_mixin.DioMixin, () => ['checkCancelled', 'listenCancelForAsyncTask', 'checkOptions', 'assureDioException', 'assureResponse']);
  dart.setGetterSignature(dio_mixin.DioMixin, () => ({
    __proto__: dart.getGetters(dio_mixin.DioMixin.__proto__),
    options: options$.BaseOptions,
    interceptors: dio_mixin.Interceptors,
    httpClientAdapter: adapter.HttpClientAdapter
  }));
  dart.setSetterSignature(dio_mixin.DioMixin, () => ({
    __proto__: dart.getSetters(dio_mixin.DioMixin.__proto__),
    options: options$.BaseOptions,
    httpClientAdapter: adapter.HttpClientAdapter
  }));
  dart.setLibraryUri(dio_mixin.DioMixin, I[37]);
  dart.setFieldSignature(dio_mixin.DioMixin, () => ({
    __proto__: dart.getFields(dio_mixin.DioMixin.__proto__),
    [__DioMixin_options]: dart.fieldType(dart.nullable(options$.BaseOptions)),
    [_interceptors$]: dart.finalFieldType(dio_mixin.Interceptors),
    [__DioMixin_httpClientAdapter]: dart.fieldType(dart.nullable(adapter.HttpClientAdapter)),
    transformer: dart.fieldType(transformer.Transformer),
    [_closed]: dart.fieldType(core.bool)
  }));
  var _name$ = dart.privateName(dio_mixin, "_name");
  const _is_NotNullableError_default = Symbol('_is_NotNullableError_default');
  dio_mixin.NotNullableError$ = dart.generic(T => {
    class NotNullableError extends core.Error {
      static ['_#new#tearOff'](T, _name) {
        return new (dio_mixin.NotNullableError$(T)).new(_name);
      }
      toString() {
        return "Null is not a valid value for '" + this[_name$] + "' of type '" + dart.str(dart.wrapType(T)) + "'";
      }
    }
    (NotNullableError.new = function(_name) {
      this[_name$] = _name;
      NotNullableError.__proto__.new.call(this);
      ;
    }).prototype = NotNullableError.prototype;
    dart.addTypeTests(NotNullableError);
    NotNullableError.prototype[_is_NotNullableError_default] = true;
    dart.addTypeCaches(NotNullableError);
    NotNullableError[dart.implements] = () => [core.TypeError];
    dart.setLibraryUri(NotNullableError, I[37]);
    dart.setFieldSignature(NotNullableError, () => ({
      __proto__: dart.getFields(NotNullableError.__proto__),
      [_name$]: dart.finalFieldType(core.String)
    }));
    dart.defineExtensionMethods(NotNullableError, ['toString']);
    return NotNullableError;
  });
  dio_mixin.NotNullableError = dio_mixin.NotNullableError$();
  dart.addTypeTests(dio_mixin.NotNullableError, _is_NotNullableError_default);
  dio_mixin.InterceptorResultType = class InterceptorResultType extends core._Enum {
    [_enumToString]() {
      return "InterceptorResultType." + this[_name];
    }
  };
  (dio_mixin.InterceptorResultType.new = function(index, name) {
    dio_mixin.InterceptorResultType.__proto__.new.call(this, index, name);
    ;
  }).prototype = dio_mixin.InterceptorResultType.prototype;
  dart.addTypeTests(dio_mixin.InterceptorResultType);
  dart.addTypeCaches(dio_mixin.InterceptorResultType);
  dart.setMethodSignature(dio_mixin.InterceptorResultType, () => ({
    __proto__: dart.getMethods(dio_mixin.InterceptorResultType.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(dio_mixin.InterceptorResultType, I[37]);
  dart.setStaticFieldSignature(dio_mixin.InterceptorResultType, () => ['values', 'next', 'resolve', 'resolveCallFollowing', 'reject', 'rejectCallFollowing']);
  dart.defineLazy(dio_mixin.InterceptorResultType, {
    /*dio_mixin.InterceptorResultType.values*/get values() {
      return C[15] || CT.C15;
    },
    /*dio_mixin.InterceptorResultType.next*/get next() {
      return C[16] || CT.C16;
    },
    /*dio_mixin.InterceptorResultType.resolve*/get resolve() {
      return C[17] || CT.C17;
    },
    /*dio_mixin.InterceptorResultType.resolveCallFollowing*/get resolveCallFollowing() {
      return C[18] || CT.C18;
    },
    /*dio_mixin.InterceptorResultType.reject*/get reject() {
      return C[19] || CT.C19;
    },
    /*dio_mixin.InterceptorResultType.rejectCallFollowing*/get rejectCallFollowing() {
      return C[20] || CT.C20;
    }
  }, false);
  var data$ = dart.privateName(dio_mixin, "InterceptorState.data");
  var type$0 = dart.privateName(dio_mixin, "InterceptorState.type");
  const _is_InterceptorState_default = Symbol('_is_InterceptorState_default');
  dio_mixin.InterceptorState$ = dart.generic(T => {
    class InterceptorState extends core.Object {
      get data() {
        return this[data$];
      }
      set data(value) {
        super.data = value;
      }
      get type() {
        return this[type$0];
      }
      set type(value) {
        super.type = value;
      }
      static ['_#new#tearOff'](T, data, type = C[16] || CT.C16) {
        return new (dio_mixin.InterceptorState$(T)).new(data, type);
      }
    }
    (InterceptorState.new = function(data, type = C[16] || CT.C16) {
      this[data$] = data;
      this[type$0] = type;
      ;
    }).prototype = InterceptorState.prototype;
    dart.addTypeTests(InterceptorState);
    InterceptorState.prototype[_is_InterceptorState_default] = true;
    dart.addTypeCaches(InterceptorState);
    dart.setLibraryUri(InterceptorState, I[37]);
    dart.setFieldSignature(InterceptorState, () => ({
      __proto__: dart.getFields(InterceptorState.__proto__),
      data: dart.finalFieldType(T),
      type: dart.finalFieldType(dio_mixin.InterceptorResultType)
    }));
    return InterceptorState;
  });
  dio_mixin.InterceptorState = dio_mixin.InterceptorState$();
  dart.addTypeTests(dio_mixin.InterceptorState, _is_InterceptorState_default);
  var _completer$ = dart.privateName(dio_mixin, "_completer");
  var _processNextInQueue = dart.privateName(dio_mixin, "_processNextInQueue");
  var _throwIfCompleted = dart.privateName(dio_mixin, "_throwIfCompleted");
  dio_mixin._BaseHandler = class _BaseHandler extends core.Object {
    get future() {
      return this[_completer$].future;
    }
    get isCompleted() {
      return this[_completer$].isCompleted;
    }
    [_throwIfCompleted]() {
      if (this[_completer$].isCompleted) {
        dart.throw(new core.StateError.new("The `handler` has already been called, " + "make sure each handler gets called only once."));
      }
    }
  };
  (dio_mixin._BaseHandler.new = function() {
    this[_completer$] = T$.CompleterOfInterceptorState().new();
    this[_processNextInQueue] = null;
    ;
  }).prototype = dio_mixin._BaseHandler.prototype;
  dart.addTypeTests(dio_mixin._BaseHandler);
  dart.addTypeCaches(dio_mixin._BaseHandler);
  dart.setMethodSignature(dio_mixin._BaseHandler, () => ({
    __proto__: dart.getMethods(dio_mixin._BaseHandler.__proto__),
    [_throwIfCompleted]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(dio_mixin._BaseHandler, () => ({
    __proto__: dart.getGetters(dio_mixin._BaseHandler.__proto__),
    future: async.Future$(dio_mixin.InterceptorState),
    isCompleted: core.bool
  }));
  dart.setLibraryUri(dio_mixin._BaseHandler, I[37]);
  dart.setFieldSignature(dio_mixin._BaseHandler, () => ({
    __proto__: dart.getFields(dio_mixin._BaseHandler.__proto__),
    [_completer$]: dart.finalFieldType(async.Completer$(dio_mixin.InterceptorState)),
    [_processNextInQueue]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  dio_mixin.RequestInterceptorHandler = class RequestInterceptorHandler extends dio_mixin._BaseHandler {
    next(requestOptions) {
      let t18;
      this[_throwIfCompleted]();
      this[_completer$].complete(new (T$.InterceptorStateOfRequestOptions()).new(requestOptions));
      t18 = this[_processNextInQueue];
      t18 == null ? null : t18();
    }
    resolve(response, callFollowingResponseInterceptor = false) {
      let t18;
      this[_throwIfCompleted]();
      this[_completer$].complete(new (T$.InterceptorStateOfResponse()).new(response, callFollowingResponseInterceptor ? dio_mixin.InterceptorResultType.resolveCallFollowing : dio_mixin.InterceptorResultType.resolve));
      t18 = this[_processNextInQueue];
      t18 == null ? null : t18();
    }
    reject(error, callFollowingErrorInterceptor = false) {
      let t18;
      this[_throwIfCompleted]();
      this[_completer$].completeError(new (T$.InterceptorStateOfDioException()).new(error, callFollowingErrorInterceptor ? dio_mixin.InterceptorResultType.rejectCallFollowing : dio_mixin.InterceptorResultType.reject), error.stackTrace);
      t18 = this[_processNextInQueue];
      t18 == null ? null : t18();
    }
    static ['_#new#tearOff']() {
      return new dio_mixin.RequestInterceptorHandler.new();
    }
  };
  (dio_mixin.RequestInterceptorHandler.new = function() {
    dio_mixin.RequestInterceptorHandler.__proto__.new.call(this);
    ;
  }).prototype = dio_mixin.RequestInterceptorHandler.prototype;
  dart.addTypeTests(dio_mixin.RequestInterceptorHandler);
  dart.addTypeCaches(dio_mixin.RequestInterceptorHandler);
  dart.setMethodSignature(dio_mixin.RequestInterceptorHandler, () => ({
    __proto__: dart.getMethods(dio_mixin.RequestInterceptorHandler.__proto__),
    next: dart.fnType(dart.void, [options$.RequestOptions]),
    resolve: dart.fnType(dart.void, [response$.Response], [core.bool]),
    reject: dart.fnType(dart.void, [dio_exception.DioException], [core.bool])
  }));
  dart.setLibraryUri(dio_mixin.RequestInterceptorHandler, I[37]);
  dio_mixin.ResponseInterceptorHandler = class ResponseInterceptorHandler extends dio_mixin._BaseHandler {
    next(response) {
      let t18;
      this[_throwIfCompleted]();
      this[_completer$].complete(new (T$.InterceptorStateOfResponse()).new(response));
      t18 = this[_processNextInQueue];
      t18 == null ? null : t18();
    }
    resolve(response) {
      let t18;
      this[_throwIfCompleted]();
      this[_completer$].complete(new (T$.InterceptorStateOfResponse()).new(response, dio_mixin.InterceptorResultType.resolve));
      t18 = this[_processNextInQueue];
      t18 == null ? null : t18();
    }
    reject(error, callFollowingErrorInterceptor = false) {
      let t18;
      this[_throwIfCompleted]();
      this[_completer$].completeError(new (T$.InterceptorStateOfDioException()).new(error, callFollowingErrorInterceptor ? dio_mixin.InterceptorResultType.rejectCallFollowing : dio_mixin.InterceptorResultType.reject), error.stackTrace);
      t18 = this[_processNextInQueue];
      t18 == null ? null : t18();
    }
    static ['_#new#tearOff']() {
      return new dio_mixin.ResponseInterceptorHandler.new();
    }
  };
  (dio_mixin.ResponseInterceptorHandler.new = function() {
    dio_mixin.ResponseInterceptorHandler.__proto__.new.call(this);
    ;
  }).prototype = dio_mixin.ResponseInterceptorHandler.prototype;
  dart.addTypeTests(dio_mixin.ResponseInterceptorHandler);
  dart.addTypeCaches(dio_mixin.ResponseInterceptorHandler);
  dart.setMethodSignature(dio_mixin.ResponseInterceptorHandler, () => ({
    __proto__: dart.getMethods(dio_mixin.ResponseInterceptorHandler.__proto__),
    next: dart.fnType(dart.void, [response$.Response]),
    resolve: dart.fnType(dart.void, [response$.Response]),
    reject: dart.fnType(dart.void, [dio_exception.DioException], [core.bool])
  }));
  dart.setLibraryUri(dio_mixin.ResponseInterceptorHandler, I[37]);
  dio_mixin.ErrorInterceptorHandler = class ErrorInterceptorHandler extends dio_mixin._BaseHandler {
    next(error) {
      let t18;
      this[_throwIfCompleted]();
      this[_completer$].completeError(new (T$.InterceptorStateOfDioException()).new(error), error.stackTrace);
      t18 = this[_processNextInQueue];
      t18 == null ? null : t18();
    }
    resolve(response) {
      let t18;
      this[_throwIfCompleted]();
      this[_completer$].complete(new (T$.InterceptorStateOfResponse()).new(response, dio_mixin.InterceptorResultType.resolve));
      t18 = this[_processNextInQueue];
      t18 == null ? null : t18();
    }
    reject(error) {
      let t18;
      this[_throwIfCompleted]();
      this[_completer$].completeError(new (T$.InterceptorStateOfDioException()).new(error, dio_mixin.InterceptorResultType.reject), error.stackTrace);
      t18 = this[_processNextInQueue];
      t18 == null ? null : t18();
    }
    static ['_#new#tearOff']() {
      return new dio_mixin.ErrorInterceptorHandler.new();
    }
  };
  (dio_mixin.ErrorInterceptorHandler.new = function() {
    dio_mixin.ErrorInterceptorHandler.__proto__.new.call(this);
    ;
  }).prototype = dio_mixin.ErrorInterceptorHandler.prototype;
  dart.addTypeTests(dio_mixin.ErrorInterceptorHandler);
  dart.addTypeCaches(dio_mixin.ErrorInterceptorHandler);
  dart.setMethodSignature(dio_mixin.ErrorInterceptorHandler, () => ({
    __proto__: dart.getMethods(dio_mixin.ErrorInterceptorHandler.__proto__),
    next: dart.fnType(dart.void, [dio_exception.DioException]),
    resolve: dart.fnType(dart.void, [response$.Response]),
    reject: dart.fnType(dart.void, [dio_exception.DioException])
  }));
  dart.setLibraryUri(dio_mixin.ErrorInterceptorHandler, I[37]);
  dio_mixin.Interceptor = class Interceptor extends core.Object {
    static ['_#new#tearOff']() {
      return new dio_mixin.Interceptor.new();
    }
    onRequest(options, handler) {
      handler.next(options);
    }
    onResponse(response, handler) {
      handler.next(response);
    }
    onError(err, handler) {
      handler.next(err);
    }
  };
  (dio_mixin.Interceptor.new = function() {
    ;
  }).prototype = dio_mixin.Interceptor.prototype;
  dart.addTypeTests(dio_mixin.Interceptor);
  dart.addTypeCaches(dio_mixin.Interceptor);
  dart.setMethodSignature(dio_mixin.Interceptor, () => ({
    __proto__: dart.getMethods(dio_mixin.Interceptor.__proto__),
    onRequest: dart.fnType(dart.void, [options$.RequestOptions, dio_mixin.RequestInterceptorHandler]),
    onResponse: dart.fnType(dart.void, [response$.Response, dio_mixin.ResponseInterceptorHandler]),
    onError: dart.fnType(dart.void, [dio_exception.DioException, dio_mixin.ErrorInterceptorHandler])
  }));
  dart.setLibraryUri(dio_mixin.Interceptor, I[37]);
  var _onRequest = dart.privateName(dio_mixin, "_InterceptorWrapperMixin._onRequest");
  var _onResponse = dart.privateName(dio_mixin, "_InterceptorWrapperMixin._onResponse");
  var _onError = dart.privateName(dio_mixin, "_InterceptorWrapperMixin._onError");
  var _onRequest$ = dart.privateName(dio_mixin, "_onRequest");
  var _onResponse$ = dart.privateName(dio_mixin, "_onResponse");
  var _onError$ = dart.privateName(dio_mixin, "_onError");
  dio_mixin._InterceptorWrapperMixin = class _InterceptorWrapperMixin extends dio_mixin.Interceptor {};
  dio_mixin._InterceptorWrapperMixin[dart.mixinOn] = Interceptor => class _InterceptorWrapperMixin extends Interceptor {
    get [_onRequest$]() {
      return this[_onRequest];
    }
    set [_onRequest$](value) {
      this[_onRequest] = value;
    }
    get [_onResponse$]() {
      return this[_onResponse];
    }
    set [_onResponse$](value) {
      this[_onResponse] = value;
    }
    get [_onError$]() {
      return this[_onError];
    }
    set [_onError$](value) {
      this[_onError] = value;
    }
    onRequest(options, handler) {
      if (this[_onRequest$] != null) {
        dart.nullCheck(this[_onRequest$])(options, handler);
      } else {
        handler.next(options);
      }
    }
    onResponse(response, handler) {
      if (this[_onResponse$] != null) {
        dart.nullCheck(this[_onResponse$])(response, handler);
      } else {
        handler.next(response);
      }
    }
    onError(err, handler) {
      if (this[_onError$] != null) {
        dart.nullCheck(this[_onError$])(err, handler);
      } else {
        handler.next(err);
      }
    }
  };
  (dio_mixin._InterceptorWrapperMixin[dart.mixinNew] = function() {
    this[_onRequest] = null;
    this[_onResponse] = null;
    this[_onError] = null;
  }).prototype = dio_mixin._InterceptorWrapperMixin.prototype;
  dart.addTypeTests(dio_mixin._InterceptorWrapperMixin);
  dart.addTypeCaches(dio_mixin._InterceptorWrapperMixin);
  dio_mixin._InterceptorWrapperMixin[dart.implements] = () => [dio_mixin.Interceptor];
  dart.setLibraryUri(dio_mixin._InterceptorWrapperMixin, I[37]);
  dart.setFieldSignature(dio_mixin._InterceptorWrapperMixin, () => ({
    __proto__: dart.getFields(dio_mixin._InterceptorWrapperMixin.__proto__),
    [_onRequest$]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [options$.RequestOptions, dio_mixin.RequestInterceptorHandler]))),
    [_onResponse$]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [response$.Response, dio_mixin.ResponseInterceptorHandler]))),
    [_onError$]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [dio_exception.DioException, dio_mixin.ErrorInterceptorHandler])))
  }));
  var __onRequest = dart.privateName(dio_mixin, "__onRequest");
  var __onResponse = dart.privateName(dio_mixin, "__onResponse");
  var __onError = dart.privateName(dio_mixin, "__onError");
  const Interceptor__InterceptorWrapperMixin$36 = class Interceptor__InterceptorWrapperMixin extends dio_mixin.Interceptor {};
  (Interceptor__InterceptorWrapperMixin$36.new = function() {
    dio_mixin._InterceptorWrapperMixin[dart.mixinNew].call(this);
    Interceptor__InterceptorWrapperMixin$36.__proto__.new.call(this);
  }).prototype = Interceptor__InterceptorWrapperMixin$36.prototype;
  dart.applyMixin(Interceptor__InterceptorWrapperMixin$36, dio_mixin._InterceptorWrapperMixin);
  dio_mixin.InterceptorsWrapper = class InterceptorsWrapper extends Interceptor__InterceptorWrapperMixin$36 {
    static ['_#new#tearOff'](opts) {
      let onRequest = opts && 'onRequest' in opts ? opts.onRequest : null;
      let onResponse = opts && 'onResponse' in opts ? opts.onResponse : null;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return new dio_mixin.InterceptorsWrapper.new({onRequest: onRequest, onResponse: onResponse, onError: onError});
    }
    get [_onRequest$]() {
      return this[__onRequest];
    }
    set [_onRequest$](value) {
      super[_onRequest$] = value;
    }
    get [_onResponse$]() {
      return this[__onResponse];
    }
    set [_onResponse$](value) {
      super[_onResponse$] = value;
    }
    get [_onError$]() {
      return this[__onError];
    }
    set [_onError$](value) {
      super[_onError$] = value;
    }
  };
  (dio_mixin.InterceptorsWrapper.new = function(opts) {
    let onRequest = opts && 'onRequest' in opts ? opts.onRequest : null;
    let onResponse = opts && 'onResponse' in opts ? opts.onResponse : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    this[__onRequest] = onRequest;
    this[__onResponse] = onResponse;
    this[__onError] = onError;
    dio_mixin.InterceptorsWrapper.__proto__.new.call(this);
    ;
  }).prototype = dio_mixin.InterceptorsWrapper.prototype;
  dart.addTypeTests(dio_mixin.InterceptorsWrapper);
  dart.addTypeCaches(dio_mixin.InterceptorsWrapper);
  dart.setLibraryUri(dio_mixin.InterceptorsWrapper, I[37]);
  dart.setFieldSignature(dio_mixin.InterceptorsWrapper, () => ({
    __proto__: dart.getFields(dio_mixin.InterceptorsWrapper.__proto__),
    [__onRequest]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [options$.RequestOptions, dio_mixin.RequestInterceptorHandler]))),
    [__onResponse]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [response$.Response, dio_mixin.ResponseInterceptorHandler]))),
    [__onError]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [dio_exception.DioException, dio_mixin.ErrorInterceptorHandler])))
  }));
  var _list = dart.privateName(dio_mixin, "_list");
  dio_mixin.Interceptors = class Interceptors extends collection.ListMixin$(dio_mixin.Interceptor) {
    get length() {
      return this[_list][$length];
    }
    set length(newLength) {
      this[_list][$length] = newLength;
    }
    _get(index) {
      return dart.nullCheck(this[_list][$_get](index));
    }
    _set(index, value$) {
      let value = value$;
      dio_mixin.Interceptor.as(value);
      if (this[_list][$length] === index) {
        this[_list][$add](value);
      } else {
        this[_list][$_set](index, value);
      }
      return value$;
    }
    clear(opts) {
      let keepImplyContentTypeInterceptor = opts && 'keepImplyContentTypeInterceptor' in opts ? opts.keepImplyContentTypeInterceptor : true;
      if (keepImplyContentTypeInterceptor) {
        this[_list][$removeWhere](dart.fn(e => !imply_content_type.ImplyContentTypeInterceptor.is(e), T$.InterceptorNTobool()));
      } else {
        super[$clear]();
      }
    }
    removeImplyContentTypeInterceptor() {
      this[_list][$removeWhere](dart.fn(e => imply_content_type.ImplyContentTypeInterceptor.is(e), T$.InterceptorNTobool()));
    }
    static ['_#new#tearOff']() {
      return new dio_mixin.Interceptors.new();
    }
  };
  (dio_mixin.Interceptors.new = function() {
    this[_list] = T$.JSArrayOfInterceptorN().of([C[21] || CT.C21]);
    ;
  }).prototype = dio_mixin.Interceptors.prototype;
  dart.addTypeTests(dio_mixin.Interceptors);
  dart.addTypeCaches(dio_mixin.Interceptors);
  dart.setMethodSignature(dio_mixin.Interceptors, () => ({
    __proto__: dart.getMethods(dio_mixin.Interceptors.__proto__),
    _get: dart.fnType(dio_mixin.Interceptor, [core.int]),
    [$_get]: dart.fnType(dio_mixin.Interceptor, [core.int]),
    _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, [], {keepImplyContentTypeInterceptor: core.bool}, {}),
    [$clear]: dart.fnType(dart.void, [], {keepImplyContentTypeInterceptor: core.bool}, {}),
    removeImplyContentTypeInterceptor: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(dio_mixin.Interceptors, () => ({
    __proto__: dart.getGetters(dio_mixin.Interceptors.__proto__),
    length: core.int,
    [$length]: core.int
  }));
  dart.setSetterSignature(dio_mixin.Interceptors, () => ({
    __proto__: dart.getSetters(dio_mixin.Interceptors.__proto__),
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(dio_mixin.Interceptors, I[37]);
  dart.setFieldSignature(dio_mixin.Interceptors, () => ({
    __proto__: dart.getFields(dio_mixin.Interceptors.__proto__),
    [_list]: dart.finalFieldType(core.List$(dart.nullable(dio_mixin.Interceptor)))
  }));
  dart.defineExtensionMethods(dio_mixin.Interceptors, ['_get', '_set', 'clear']);
  dart.defineExtensionAccessors(dio_mixin.Interceptors, ['length']);
  var data$0 = dart.privateName(dio_mixin, "_InterceptorParams.data");
  var handler$ = dart.privateName(dio_mixin, "_InterceptorParams.handler");
  const _is__InterceptorParams_default = Symbol('_is__InterceptorParams_default');
  dio_mixin._InterceptorParams$ = dart.generic((T, V) => {
    class _InterceptorParams extends core.Object {
      get data() {
        return this[data$0];
      }
      set data(value) {
        super.data = value;
      }
      get handler() {
        return this[handler$];
      }
      set handler(value) {
        super.handler = value;
      }
      static ['_#new#tearOff'](T, V, data, handler) {
        return new (dio_mixin._InterceptorParams$(T, V)).new(data, handler);
      }
    }
    (_InterceptorParams.new = function(data, handler) {
      this[data$0] = data;
      this[handler$] = handler;
      ;
    }).prototype = _InterceptorParams.prototype;
    dart.addTypeTests(_InterceptorParams);
    _InterceptorParams.prototype[_is__InterceptorParams_default] = true;
    dart.addTypeCaches(_InterceptorParams);
    dart.setLibraryUri(_InterceptorParams, I[37]);
    dart.setFieldSignature(_InterceptorParams, () => ({
      __proto__: dart.getFields(_InterceptorParams.__proto__),
      data: dart.finalFieldType(T),
      handler: dart.finalFieldType(V)
    }));
    return _InterceptorParams;
  });
  dio_mixin._InterceptorParams = dio_mixin._InterceptorParams$();
  dart.addTypeTests(dio_mixin._InterceptorParams, _is__InterceptorParams_default);
  var queue = dart.privateName(dio_mixin, "_TaskQueue.queue");
  const _is__TaskQueue_default = Symbol('_is__TaskQueue_default');
  dio_mixin._TaskQueue$ = dart.generic((T, V) => {
    var __t$_InterceptorParamsOfT$V = () => (__t$_InterceptorParamsOfT$V = dart.constFn(dio_mixin._InterceptorParams$(T, V)))();
    var __t$ListQueueOf_InterceptorParamsOfT$V = () => (__t$ListQueueOf_InterceptorParamsOfT$V = dart.constFn(collection.ListQueue$(__t$_InterceptorParamsOfT$V())))();
    class _TaskQueue extends core.Object {
      get queue() {
        return this[queue];
      }
      set queue(value) {
        super.queue = value;
      }
      static ['_#new#tearOff'](T, V) {
        return new (dio_mixin._TaskQueue$(T, V)).new();
      }
    }
    (_TaskQueue.new = function() {
      this[queue] = new (__t$ListQueueOf_InterceptorParamsOfT$V()).new();
      this.processing = false;
      ;
    }).prototype = _TaskQueue.prototype;
    dart.addTypeTests(_TaskQueue);
    _TaskQueue.prototype[_is__TaskQueue_default] = true;
    dart.addTypeCaches(_TaskQueue);
    dart.setLibraryUri(_TaskQueue, I[37]);
    dart.setFieldSignature(_TaskQueue, () => ({
      __proto__: dart.getFields(_TaskQueue.__proto__),
      queue: dart.finalFieldType(collection.Queue$(dio_mixin._InterceptorParams$(T, V))),
      processing: dart.fieldType(core.bool)
    }));
    return _TaskQueue;
  });
  dio_mixin._TaskQueue = dio_mixin._TaskQueue$();
  dart.addTypeTests(dio_mixin._TaskQueue, _is__TaskQueue_default);
  var _requestQueue = dart.privateName(dio_mixin, "_requestQueue");
  var _responseQueue = dart.privateName(dio_mixin, "_responseQueue");
  var _errorQueue = dart.privateName(dio_mixin, "_errorQueue");
  var _handleQueue = dart.privateName(dio_mixin, "_handleQueue");
  dio_mixin.QueuedInterceptor = class QueuedInterceptor extends dio_mixin.Interceptor {
    [_handleRequest](options, handler) {
      this[_handleQueue](options$.RequestOptions, dio_mixin.RequestInterceptorHandler, this[_requestQueue], options, handler, dart.bind(this, 'onRequest'));
    }
    [_handleResponse](response, handler) {
      this[_handleQueue](response$.Response, dio_mixin.ResponseInterceptorHandler, this[_responseQueue], response, handler, dart.bind(this, 'onResponse'));
    }
    [_handleError](error, handler) {
      this[_handleQueue](dio_exception.DioException, dio_mixin.ErrorInterceptorHandler, this[_errorQueue], error, handler, dart.bind(this, 'onError'));
    }
    [_handleQueue](T, V, taskQueue, data, handler, callback) {
      let task = new (dio_mixin._InterceptorParams$(T, V)).new(data, handler);
      task.handler[_processNextInQueue] = dart.fn(() => {
        if (taskQueue.queue[$isNotEmpty]) {
          let next = taskQueue.queue.removeFirst();
          if (!(next.handler[_processNextInQueue] != null)) dart.assertFailed(null, I[38], 412, 16, "next.handler._processNextInQueue != null");
          callback(next.data, next.handler);
        } else {
          taskQueue.processing = false;
        }
      }, T$.VoidTovoid());
      taskQueue.queue.add(task);
      if (!taskQueue.processing) {
        taskQueue.processing = true;
        let task = taskQueue.queue.removeFirst();
        try {
          callback(task.data, task.handler);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.nullCheck(task.handler[_processNextInQueue])();
          } else
            throw e$;
        }
      }
    }
    static ['_#new#tearOff']() {
      return new dio_mixin.QueuedInterceptor.new();
    }
  };
  (dio_mixin.QueuedInterceptor.new = function() {
    this[_requestQueue] = new (T$._TaskQueueOfRequestOptions$RequestInterceptorHandler()).new();
    this[_responseQueue] = new (T$._TaskQueueOfResponse$ResponseInterceptorHandler()).new();
    this[_errorQueue] = new (T$._TaskQueueOfDioException$ErrorInterceptorHandler()).new();
    dio_mixin.QueuedInterceptor.__proto__.new.call(this);
    ;
  }).prototype = dio_mixin.QueuedInterceptor.prototype;
  dart.addTypeTests(dio_mixin.QueuedInterceptor);
  dart.addTypeCaches(dio_mixin.QueuedInterceptor);
  dart.setMethodSignature(dio_mixin.QueuedInterceptor, () => ({
    __proto__: dart.getMethods(dio_mixin.QueuedInterceptor.__proto__),
    [_handleRequest]: dart.fnType(dart.void, [options$.RequestOptions, dio_mixin.RequestInterceptorHandler]),
    [_handleResponse]: dart.fnType(dart.void, [response$.Response, dio_mixin.ResponseInterceptorHandler]),
    [_handleError]: dart.fnType(dart.void, [dio_exception.DioException, dio_mixin.ErrorInterceptorHandler]),
    [_handleQueue]: dart.gFnType((T, V) => [dart.void, [dio_mixin._TaskQueue$(T, V), T, V, dart.fnType(dart.void, [T, V])]], (T, V) => [dart.nullable(core.Object), dio_mixin._BaseHandler])
  }));
  dart.setLibraryUri(dio_mixin.QueuedInterceptor, I[37]);
  dart.setFieldSignature(dio_mixin.QueuedInterceptor, () => ({
    __proto__: dart.getFields(dio_mixin.QueuedInterceptor.__proto__),
    [_requestQueue]: dart.finalFieldType(dio_mixin._TaskQueue$(options$.RequestOptions, dio_mixin.RequestInterceptorHandler)),
    [_responseQueue]: dart.finalFieldType(dio_mixin._TaskQueue$(response$.Response, dio_mixin.ResponseInterceptorHandler)),
    [_errorQueue]: dart.finalFieldType(dio_mixin._TaskQueue$(dio_exception.DioException, dio_mixin.ErrorInterceptorHandler))
  }));
  const QueuedInterceptor__InterceptorWrapperMixin$36 = class QueuedInterceptor__InterceptorWrapperMixin extends dio_mixin.QueuedInterceptor {};
  (QueuedInterceptor__InterceptorWrapperMixin$36.new = function() {
    dio_mixin._InterceptorWrapperMixin[dart.mixinNew].call(this);
    QueuedInterceptor__InterceptorWrapperMixin$36.__proto__.new.call(this);
  }).prototype = QueuedInterceptor__InterceptorWrapperMixin$36.prototype;
  dart.applyMixin(QueuedInterceptor__InterceptorWrapperMixin$36, dio_mixin._InterceptorWrapperMixin);
  dio_mixin.QueuedInterceptorsWrapper = class QueuedInterceptorsWrapper extends QueuedInterceptor__InterceptorWrapperMixin$36 {
    static ['_#new#tearOff'](opts) {
      let onRequest = opts && 'onRequest' in opts ? opts.onRequest : null;
      let onResponse = opts && 'onResponse' in opts ? opts.onResponse : null;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return new dio_mixin.QueuedInterceptorsWrapper.new({onRequest: onRequest, onResponse: onResponse, onError: onError});
    }
    get [_onRequest$]() {
      return this[__onRequest];
    }
    set [_onRequest$](value) {
      super[_onRequest$] = value;
    }
    get [_onResponse$]() {
      return this[__onResponse];
    }
    set [_onResponse$](value) {
      super[_onResponse$] = value;
    }
    get [_onError$]() {
      return this[__onError];
    }
    set [_onError$](value) {
      super[_onError$] = value;
    }
  };
  (dio_mixin.QueuedInterceptorsWrapper.new = function(opts) {
    let onRequest = opts && 'onRequest' in opts ? opts.onRequest : null;
    let onResponse = opts && 'onResponse' in opts ? opts.onResponse : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    this[__onRequest] = onRequest;
    this[__onResponse] = onResponse;
    this[__onError] = onError;
    dio_mixin.QueuedInterceptorsWrapper.__proto__.new.call(this);
    ;
  }).prototype = dio_mixin.QueuedInterceptorsWrapper.prototype;
  dart.addTypeTests(dio_mixin.QueuedInterceptorsWrapper);
  dart.addTypeCaches(dio_mixin.QueuedInterceptorsWrapper);
  dart.setLibraryUri(dio_mixin.QueuedInterceptorsWrapper, I[37]);
  dart.setFieldSignature(dio_mixin.QueuedInterceptorsWrapper, () => ({
    __proto__: dart.getFields(dio_mixin.QueuedInterceptorsWrapper.__proto__),
    [__onRequest]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [options$.RequestOptions, dio_mixin.RequestInterceptorHandler]))),
    [__onResponse]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [response$.Response, dio_mixin.ResponseInterceptorHandler]))),
    [__onError]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [dio_exception.DioException, dio_mixin.ErrorInterceptorHandler])))
  }));
  dio_mixin._checkNotNullable = function _checkNotNullable(T, value, name) {
    if (value === null) {
      dart.throw(new (dio_mixin.NotNullableError$(T)).new(name));
    }
    return value;
  };
  var boundaryName$ = dart.privateName(form_data, "FormData.boundaryName");
  var camelCaseContentDisposition$ = dart.privateName(form_data, "FormData.camelCaseContentDisposition");
  var fields = dart.privateName(form_data, "FormData.fields");
  var files = dart.privateName(form_data, "FormData.files");
  var __FormData__boundary = dart.privateName(form_data, "_#FormData#_boundary");
  var _isFinalized = dart.privateName(form_data, "_isFinalized");
  var _init = dart.privateName(form_data, "_init");
  var _boundary = dart.privateName(form_data, "_boundary");
  var _contentDispositionKey = dart.privateName(form_data, "_contentDispositionKey");
  var _browserEncode = dart.privateName(form_data, "_browserEncode");
  var _headerForField = dart.privateName(form_data, "_headerForField");
  var _headerForFile = dart.privateName(form_data, "_headerForFile");
  form_data.FormData = class FormData extends core.Object {
    get boundaryName() {
      return this[boundaryName$];
    }
    set boundaryName(value) {
      super.boundaryName = value;
    }
    get camelCaseContentDisposition() {
      return this[camelCaseContentDisposition$];
    }
    set camelCaseContentDisposition(value) {
      super.camelCaseContentDisposition = value;
    }
    get fields() {
      return this[fields];
    }
    set fields(value) {
      super.fields = value;
    }
    get files() {
      return this[files];
    }
    set files(value) {
      super.files = value;
    }
    static ['_#new#tearOff'](opts) {
      let boundaryName = opts && 'boundaryName' in opts ? opts.boundaryName : "--dio-boundary";
      let camelCaseContentDisposition = opts && 'camelCaseContentDisposition' in opts ? opts.camelCaseContentDisposition : false;
      return new form_data.FormData.new({boundaryName: boundaryName, camelCaseContentDisposition: camelCaseContentDisposition});
    }
    static ['_#fromMap#tearOff'](map, listFormat = C[22] || CT.C22, camelCaseContentDisposition = false, boundaryName = "--dio-boundary") {
      return new form_data.FormData.fromMap(map, listFormat, camelCaseContentDisposition, boundaryName);
    }
    [_init](opts) {
      let fromMap = opts && 'fromMap' in opts ? opts.fromMap : null;
      let listFormat = opts && 'listFormat' in opts ? opts.listFormat : C[22] || CT.C22;
      this[_boundary] = this.boundaryName + "-" + form_data._nextRandomId;
      if (fromMap != null) {
        utils.encodeMap(fromMap, dart.fn((key, value) => {
          let t19, t19$;
          if (multipart_file.MultipartFile.is(value)) {
            this.files[$add](new (T$.MapEntryOfString$MultipartFile()).__(key, value));
          } else {
            this.fields[$add](new (T$.MapEntryOfString$String()).__(key, (t19$ = (t19 = value, t19 == null ? null : dart.toString(t19)), t19$ == null ? "" : t19$)));
          }
          return null;
        }, T$.StringAndObjectNToNull()), {listFormat: listFormat, encode: false});
      }
    }
    get boundary() {
      return this[_boundary];
    }
    get [_boundary]() {
      let t19;
      t19 = this[__FormData__boundary];
      return t19 == null ? dart.throw(new _internal.LateError.fieldNI("_boundary")) : t19;
    }
    set [_boundary](_boundary$35param) {
      if (this[__FormData__boundary] == null)
        this[__FormData__boundary] = _boundary$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_boundary"));
    }
    get isFinalized() {
      return this[_isFinalized];
    }
    get [_contentDispositionKey]() {
      return this.camelCaseContentDisposition ? "Content-Disposition" : "content-disposition";
    }
    [_headerForField](name, value) {
      return this[_contentDispositionKey] + ": form-data; name=\"" + dart.str(this[_browserEncode](name)) + "\"" + "\r\n" + "\r\n";
    }
    [_headerForFile](entry) {
      let file = entry.value;
      let header = this[_contentDispositionKey] + ": form-data; name=\"" + dart.str(this[_browserEncode](entry.key)) + "\"";
      if (file.filename != null) {
        header = header + "; filename=\"" + dart.str(this[_browserEncode](file.filename)) + "\"";
      }
      header = header + "\r\n" + "content-type: " + dart.str(file.contentType);
      if (file.headers != null) {
        dart.nullCheck(file.headers)[$forEach](dart.fn((key, values) => {
          for (let value of values) {
            header = header + "\r\n" + key + ": " + value;
          }
        }, T$.StringAndListOfStringTovoid()));
      }
      return header + "\r\n" + "\r\n";
    }
    [_browserEncode](value) {
      let t19;
      t19 = value;
      return t19 == null ? null : t19[$replaceAll](core.RegExp.new("\\r\\n|\\r|\\n"), "%0D%0A")[$replaceAll]("\"", "%22");
    }
    get length() {
      let length = 0;
      for (let entry of this.fields) {
        length = length + ("--".length + this[_boundary].length + "\r\n".length + convert.utf8.encode(this[_headerForField](entry.key, entry.value))[$length] + convert.utf8.encode(entry.value)[$length] + "\r\n".length);
      }
      for (let file of this.files) {
        length = length + ("--".length + this[_boundary].length + "\r\n".length + convert.utf8.encode(this[_headerForFile](file))[$length] + file.value.length + "\r\n".length);
      }
      return length + "--".length + this[_boundary].length + ("--" + "\r\n").length;
    }
    finalize() {
      if (this.isFinalized) {
        dart.throw(new core.StateError.new("The FormData has already been finalized. " + "This typically means you are using " + "the same FormData in repeated requests."));
      }
      this[_isFinalized] = true;
      let controller = T$.StreamControllerOfUint8List().new({sync: false});
      function writeLine() {
        return controller.add(form_data._rnU8);
      }
      dart.fn(writeLine, T$.VoidTovoid());
      function writeUtf8(s) {
        return controller.add(form_data._effectiveU8Encoding(convert.utf8.encode(s)));
      }
      dart.fn(writeUtf8, T$.StringTovoid());
      for (let entry of this.fields) {
        writeUtf8("--" + this.boundary + "\r\n");
        writeUtf8(this[_headerForField](entry.key, entry.value));
        writeUtf8(entry.value);
        writeLine();
      }
      T$.FutureOfvoid().new(dart.fn(() => async.async(dart.void, (function*() {
        for (let file of this.files) {
          writeUtf8("--" + this.boundary + "\r\n");
          writeUtf8(this[_headerForFile](file));
          yield utils.writeStreamToSink(file.value.finalize(), controller);
          writeLine();
        }
      }).bind(this)), T$.VoidToFutureOfvoid())).then(core.Null, dart.fn(_ => {
        writeUtf8("--" + this.boundary + "--" + "\r\n");
      }, T$.voidToNull())).whenComplete(dart.fn(() => {
        controller.close();
      }, T$.VoidToNull()));
      return controller.stream;
    }
    readAsBytes() {
      return T$.FutureOfUint8List().sync(dart.fn(() => this.finalize().reduce(dart.fn((a, b) => _native_typed_data.NativeUint8List.fromList((() => {
        let t19 = T$.ListOfint().of(a);
        t19[$addAll](b);
        return t19;
      })()), T$.Uint8ListAndUint8ListToUint8List())), T$.VoidToFutureOfUint8List()));
    }
    clone() {
      let clone = new form_data.FormData.new();
      clone.fields[$addAll](this.fields);
      for (let file of this.files) {
        clone.files[$add](new (T$.MapEntryOfString$MultipartFile()).__(file.key, file.value.clone()));
      }
      return clone;
    }
  };
  (form_data.FormData.new = function(opts) {
    let boundaryName = opts && 'boundaryName' in opts ? opts.boundaryName : "--dio-boundary";
    let camelCaseContentDisposition = opts && 'camelCaseContentDisposition' in opts ? opts.camelCaseContentDisposition : false;
    this[__FormData__boundary] = null;
    this[fields] = T$.JSArrayOfMapEntryOfString$String().of([]);
    this[files] = T$.JSArrayOfMapEntryOfString$MultipartFile().of([]);
    this[_isFinalized] = false;
    this[boundaryName$] = boundaryName;
    this[camelCaseContentDisposition$] = camelCaseContentDisposition;
    this[_init]();
  }).prototype = form_data.FormData.prototype;
  (form_data.FormData.fromMap = function(map, listFormat = C[22] || CT.C22, camelCaseContentDisposition = false, boundaryName = "--dio-boundary") {
    this[__FormData__boundary] = null;
    this[fields] = T$.JSArrayOfMapEntryOfString$String().of([]);
    this[files] = T$.JSArrayOfMapEntryOfString$MultipartFile().of([]);
    this[_isFinalized] = false;
    this[camelCaseContentDisposition$] = camelCaseContentDisposition;
    this[boundaryName$] = boundaryName;
    this[_init]({fromMap: map, listFormat: listFormat});
  }).prototype = form_data.FormData.prototype;
  dart.addTypeTests(form_data.FormData);
  dart.addTypeCaches(form_data.FormData);
  dart.setMethodSignature(form_data.FormData, () => ({
    __proto__: dart.getMethods(form_data.FormData.__proto__),
    [_init]: dart.fnType(dart.void, [], {fromMap: dart.nullable(core.Map$(core.String, dart.dynamic)), listFormat: options$.ListFormat}, {}),
    [_headerForField]: dart.fnType(core.String, [core.String, core.String]),
    [_headerForFile]: dart.fnType(core.String, [core.MapEntry$(core.String, multipart_file.MultipartFile)]),
    [_browserEncode]: dart.fnType(dart.nullable(core.String), [dart.nullable(core.String)]),
    finalize: dart.fnType(async.Stream$(typed_data.Uint8List), []),
    readAsBytes: dart.fnType(async.Future$(typed_data.Uint8List), []),
    clone: dart.fnType(form_data.FormData, [])
  }));
  dart.setGetterSignature(form_data.FormData, () => ({
    __proto__: dart.getGetters(form_data.FormData.__proto__),
    boundary: core.String,
    [_boundary]: core.String,
    isFinalized: core.bool,
    [_contentDispositionKey]: core.String,
    length: core.int
  }));
  dart.setSetterSignature(form_data.FormData, () => ({
    __proto__: dart.getSetters(form_data.FormData.__proto__),
    [_boundary]: core.String
  }));
  dart.setLibraryUri(form_data.FormData, I[39]);
  dart.setFieldSignature(form_data.FormData, () => ({
    __proto__: dart.getFields(form_data.FormData.__proto__),
    boundaryName: dart.finalFieldType(core.String),
    camelCaseContentDisposition: dart.finalFieldType(core.bool),
    [__FormData__boundary]: dart.fieldType(dart.nullable(core.String)),
    fields: dart.finalFieldType(core.List$(core.MapEntry$(core.String, core.String))),
    files: dart.finalFieldType(core.List$(core.MapEntry$(core.String, multipart_file.MultipartFile))),
    [_isFinalized]: dart.fieldType(core.bool)
  }));
  form_data._effectiveU8Encoding = function _effectiveU8Encoding(encoded) {
    return typed_data.Uint8List.is(encoded) ? encoded : _native_typed_data.NativeUint8List.fromList(encoded);
  };
  dart.copyProperties(form_data, {
    get _nextRandomId() {
      return form_data._random.nextInt(4294967296)[$toString]()[$padLeft](10, "0");
    }
  });
  dart.defineLazy(form_data, {
    /*form_data._boundaryName*/get _boundaryName() {
      return "--dio-boundary";
    },
    /*form_data._rn*/get _rn() {
      return "\r\n";
    },
    /*form_data._rnU8*/get _rnU8() {
      return _native_typed_data.NativeUint8List.fromList(T$.JSArrayOfint().of([13, 10]));
    },
    /*form_data._secureRandomSeedBound*/get _secureRandomSeedBound() {
      return 4294967296;
    },
    /*form_data._random*/get _random() {
      return math.Random.new();
    }
  }, false);
  var preserveHeaderCase$ = dart.privateName(headers$, "Headers.preserveHeaderCase");
  var _map = dart.privateName(headers$, "_map");
  headers$.Headers = class Headers extends core.Object {
    get preserveHeaderCase() {
      return this[preserveHeaderCase$];
    }
    set preserveHeaderCase(value) {
      super.preserveHeaderCase = value;
    }
    static ['_#new#tearOff'](opts) {
      let preserveHeaderCase = opts && 'preserveHeaderCase' in opts ? opts.preserveHeaderCase : false;
      return new headers$.Headers.new({preserveHeaderCase: preserveHeaderCase});
    }
    static ['_#fromMap#tearOff'](map, opts) {
      let preserveHeaderCase = opts && 'preserveHeaderCase' in opts ? opts.preserveHeaderCase : false;
      return new headers$.Headers.fromMap(map, {preserveHeaderCase: preserveHeaderCase});
    }
    get map() {
      return this[_map];
    }
    _get(name) {
      return this[_map][$_get](name[$trim]());
    }
    value(name) {
      let arr = this._get(name);
      if (arr == null) return null;
      if (arr[$length] === 1) return arr[$first];
      dart.throw(core.Exception.new("\"" + name + "\" header has more than one value, please use Headers[name]"));
    }
    add(name, value) {
      let arr = this._get(name);
      if (arr == null) return this.set(name, value);
      arr[$add](value);
    }
    set(name, value) {
      if (value == null) return;
      name = name[$trim]();
      if (core.List.is(value)) {
        this[_map][$_set](name, value[$map](core.String, dart.fn(e => dart.str(e), T$.dynamicToString()))[$toList]());
      } else {
        this[_map][$_set](name, T$.JSArrayOfString().of([dart.str(value)[$trim]()]));
      }
    }
    remove(name, value) {
      let arr = this._get(name);
      if (arr == null) return;
      arr[$removeWhere](dart.fn(v => v === value, T$.StringTobool()));
    }
    removeAll(name) {
      this[_map][$remove](name);
    }
    clear() {
      this[_map][$clear]();
    }
    get isEmpty() {
      return this[_map][$isEmpty];
    }
    forEach(f) {
      for (let key of this[_map][$keys]) {
        f(key, dart.nullCheck(this._get(key)));
      }
    }
    toString() {
      let stringBuffer = new core.StringBuffer.new();
      this[_map][$forEach](dart.fn((key, value) => {
        for (let e of value) {
          stringBuffer.writeln(key + ": " + e);
        }
      }, T$.StringAndListOfStringTovoid()));
      return stringBuffer.toString();
    }
  };
  (headers$.Headers.new = function(opts) {
    let preserveHeaderCase = opts && 'preserveHeaderCase' in opts ? opts.preserveHeaderCase : false;
    this[preserveHeaderCase$] = preserveHeaderCase;
    this[_map] = utils.caseInsensitiveKeyMap(T$.ListOfString());
    ;
  }).prototype = headers$.Headers.prototype;
  (headers$.Headers.fromMap = function(map, opts) {
    let preserveHeaderCase = opts && 'preserveHeaderCase' in opts ? opts.preserveHeaderCase : false;
    this[preserveHeaderCase$] = preserveHeaderCase;
    this[_map] = utils.caseInsensitiveKeyMap(T$.ListOfString(), map[$map](core.String, T$.ListOfString(), dart.fn((k, v) => new (T$.MapEntryOfString$ListOfString()).__(k[$trim](), v), T$.StringAndListOfStringToMapEntryOfString$ListOfString())));
    ;
  }).prototype = headers$.Headers.prototype;
  dart.addTypeTests(headers$.Headers);
  dart.addTypeCaches(headers$.Headers);
  dart.setMethodSignature(headers$.Headers, () => ({
    __proto__: dart.getMethods(headers$.Headers.__proto__),
    _get: dart.fnType(dart.nullable(core.List$(core.String)), [core.String]),
    value: dart.fnType(dart.nullable(core.String), [core.String]),
    add: dart.fnType(dart.void, [core.String, core.String]),
    set: dart.fnType(dart.void, [core.String, dart.dynamic]),
    remove: dart.fnType(dart.void, [core.String, core.String]),
    removeAll: dart.fnType(dart.void, [core.String]),
    clear: dart.fnType(dart.void, []),
    forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [core.String, core.List$(core.String)])])
  }));
  dart.setGetterSignature(headers$.Headers, () => ({
    __proto__: dart.getGetters(headers$.Headers.__proto__),
    map: core.Map$(core.String, core.List$(core.String)),
    isEmpty: core.bool
  }));
  dart.setLibraryUri(headers$.Headers, I[40]);
  dart.setFieldSignature(headers$.Headers, () => ({
    __proto__: dart.getFields(headers$.Headers.__proto__),
    preserveHeaderCase: dart.finalFieldType(core.bool),
    [_map]: dart.finalFieldType(core.Map$(core.String, core.List$(core.String)))
  }));
  dart.setStaticFieldSignature(headers$.Headers, () => ['acceptHeader', 'contentEncodingHeader', 'contentLengthHeader', 'contentTypeHeader', 'wwwAuthenticateHeader', 'jsonContentType', 'formUrlEncodedContentType', 'textPlainContentType', 'multipartFormDataContentType', 'jsonMimeType']);
  dart.defineExtensionMethods(headers$.Headers, ['toString']);
  dart.defineLazy(headers$.Headers, {
    /*headers$.Headers.acceptHeader*/get acceptHeader() {
      return "accept";
    },
    /*headers$.Headers.contentEncodingHeader*/get contentEncodingHeader() {
      return "content-encoding";
    },
    /*headers$.Headers.contentLengthHeader*/get contentLengthHeader() {
      return "content-length";
    },
    /*headers$.Headers.contentTypeHeader*/get contentTypeHeader() {
      return "content-type";
    },
    /*headers$.Headers.wwwAuthenticateHeader*/get wwwAuthenticateHeader() {
      return "www-authenticate";
    },
    /*headers$.Headers.jsonContentType*/get jsonContentType() {
      return "application/json";
    },
    /*headers$.Headers.formUrlEncodedContentType*/get formUrlEncodedContentType() {
      return "application/x-www-form-urlencoded";
    },
    /*headers$.Headers.textPlainContentType*/get textPlainContentType() {
      return "text/plain";
    },
    /*headers$.Headers.multipartFormDataContentType*/get multipartFormDataContentType() {
      return "multipart/form-data";
    },
    /*headers$.Headers.jsonMimeType*/get jsonMimeType() {
      return media_type.MediaType.parse("application/json");
    }
  }, false);
  var request$ = dart.privateName(log, "LogInterceptor.request");
  var requestHeader$ = dart.privateName(log, "LogInterceptor.requestHeader");
  var requestBody$ = dart.privateName(log, "LogInterceptor.requestBody");
  var responseBody$ = dart.privateName(log, "LogInterceptor.responseBody");
  var responseHeader$ = dart.privateName(log, "LogInterceptor.responseHeader");
  var error$0 = dart.privateName(log, "LogInterceptor.error");
  var logPrint$ = dart.privateName(log, "LogInterceptor.logPrint");
  var _printKV = dart.privateName(log, "_printKV");
  var _printAll = dart.privateName(log, "_printAll");
  var _printResponse = dart.privateName(log, "_printResponse");
  log.LogInterceptor = class LogInterceptor extends dio_mixin.Interceptor {
    get request() {
      return this[request$];
    }
    set request(value) {
      this[request$] = value;
    }
    get requestHeader() {
      return this[requestHeader$];
    }
    set requestHeader(value) {
      this[requestHeader$] = value;
    }
    get requestBody() {
      return this[requestBody$];
    }
    set requestBody(value) {
      this[requestBody$] = value;
    }
    get responseBody() {
      return this[responseBody$];
    }
    set responseBody(value) {
      this[responseBody$] = value;
    }
    get responseHeader() {
      return this[responseHeader$];
    }
    set responseHeader(value) {
      this[responseHeader$] = value;
    }
    get error() {
      return this[error$0];
    }
    set error(value) {
      this[error$0] = value;
    }
    get logPrint() {
      return this[logPrint$];
    }
    set logPrint(value) {
      this[logPrint$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let request = opts && 'request' in opts ? opts.request : true;
      let requestHeader = opts && 'requestHeader' in opts ? opts.requestHeader : true;
      let requestBody = opts && 'requestBody' in opts ? opts.requestBody : false;
      let responseHeader = opts && 'responseHeader' in opts ? opts.responseHeader : true;
      let responseBody = opts && 'responseBody' in opts ? opts.responseBody : false;
      let error = opts && 'error' in opts ? opts.error : true;
      let logPrint = opts && 'logPrint' in opts ? opts.logPrint : C[23] || CT.C23;
      return new log.LogInterceptor.new({request: request, requestHeader: requestHeader, requestBody: requestBody, responseHeader: responseHeader, responseBody: responseBody, error: error, logPrint: logPrint});
    }
    onRequest(options, handler) {
      let t20, t20$, t20$0, t20$1;
      t20 = "*** Request ***";
      this.logPrint(t20);
      this[_printKV]("uri", options.uri);
      if (this.request) {
        this[_printKV]("method", options.method);
        this[_printKV]("responseType", options.responseType.toString());
        this[_printKV]("followRedirects", options.followRedirects);
        this[_printKV]("persistentConnection", options.persistentConnection);
        this[_printKV]("connectTimeout", options.connectTimeout);
        this[_printKV]("sendTimeout", options.sendTimeout);
        this[_printKV]("receiveTimeout", options.receiveTimeout);
        this[_printKV]("receiveDataWhenStatusError", options.receiveDataWhenStatusError);
        this[_printKV]("extra", options.extra);
      }
      if (this.requestHeader) {
        t20$ = "headers:";
        this.logPrint(t20$);
        options.headers[$forEach](dart.fn((key, v) => this[_printKV](" " + key, v), T$.StringAnddynamicTovoid()));
      }
      if (this.requestBody) {
        t20$0 = "data:";
        this.logPrint(t20$0);
        this[_printAll](options.data);
      }
      t20$1 = "";
      this.logPrint(t20$1);
      handler.next(options);
    }
    onResponse(response, handler) {
      let t20;
      t20 = "*** Response ***";
      this.logPrint(t20);
      this[_printResponse](response);
      handler.next(response);
    }
    onError(err, handler) {
      let t20, t20$, t20$0, t20$1;
      if (this.error) {
        t20 = "*** DioException ***:";
        this.logPrint(t20);
        t20$ = "uri: " + dart.str(err.requestOptions.uri);
        this.logPrint(t20$);
        t20$0 = dart.str(err);
        this.logPrint(t20$0);
        if (err.response != null) {
          this[_printResponse](dart.nullCheck(err.response));
        }
        t20$1 = "";
        this.logPrint(t20$1);
      }
      handler.next(err);
    }
    [_printResponse](response) {
      let t20, t20$, t20$0;
      this[_printKV]("uri", response.requestOptions.uri);
      if (this.responseHeader) {
        this[_printKV]("statusCode", response.statusCode);
        if (response.isRedirect === true) {
          this[_printKV]("redirect", response.realUri);
        }
        t20 = "headers:";
        this.logPrint(t20);
        response.headers.forEach(dart.fn((key, v) => this[_printKV](" " + key, v[$join]("\r\n\t")), T$.StringAndListOfStringTovoid()));
      }
      if (this.responseBody) {
        t20$ = "Response Text:";
        this.logPrint(t20$);
        this[_printAll](response.toString());
      }
      t20$0 = "";
      this.logPrint(t20$0);
    }
    [_printKV](key, v) {
      let t20;
      t20 = key + ": " + dart.str(v);
      this.logPrint(t20);
    }
    [_printAll](msg) {
      dart.toString(msg)[$split]("\n")[$forEach](this.logPrint);
    }
  };
  (log.LogInterceptor.new = function(opts) {
    let request = opts && 'request' in opts ? opts.request : true;
    let requestHeader = opts && 'requestHeader' in opts ? opts.requestHeader : true;
    let requestBody = opts && 'requestBody' in opts ? opts.requestBody : false;
    let responseHeader = opts && 'responseHeader' in opts ? opts.responseHeader : true;
    let responseBody = opts && 'responseBody' in opts ? opts.responseBody : false;
    let error = opts && 'error' in opts ? opts.error : true;
    let logPrint = opts && 'logPrint' in opts ? opts.logPrint : C[23] || CT.C23;
    this[request$] = request;
    this[requestHeader$] = requestHeader;
    this[requestBody$] = requestBody;
    this[responseHeader$] = responseHeader;
    this[responseBody$] = responseBody;
    this[error$0] = error;
    this[logPrint$] = logPrint;
    log.LogInterceptor.__proto__.new.call(this);
    ;
  }).prototype = log.LogInterceptor.prototype;
  dart.addTypeTests(log.LogInterceptor);
  dart.addTypeCaches(log.LogInterceptor);
  dart.setMethodSignature(log.LogInterceptor, () => ({
    __proto__: dart.getMethods(log.LogInterceptor.__proto__),
    [_printResponse]: dart.fnType(dart.void, [response$.Response]),
    [_printKV]: dart.fnType(dart.void, [core.String, dart.nullable(core.Object)]),
    [_printAll]: dart.fnType(dart.void, [dart.dynamic])
  }));
  dart.setLibraryUri(log.LogInterceptor, I[41]);
  dart.setFieldSignature(log.LogInterceptor, () => ({
    __proto__: dart.getFields(log.LogInterceptor.__proto__),
    request: dart.fieldType(core.bool),
    requestHeader: dart.fieldType(core.bool),
    requestBody: dart.fieldType(core.bool),
    responseBody: dart.fieldType(core.bool),
    responseHeader: dart.fieldType(core.bool),
    error: dart.fieldType(core.bool),
    logPrint: dart.fieldType(dart.fnType(dart.void, [core.Object]))
  }));
  log._debugPrint = function _debugPrint(object) {
    if (!dart.fn(() => {
      core.print(object);
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[42], 149, 10, "() {\n    print(object);\n    return true;\n  }()");
  };
  var length$ = dart.privateName(multipart_file, "MultipartFile.length");
  var filename$ = dart.privateName(multipart_file, "MultipartFile.filename");
  var headers$1 = dart.privateName(multipart_file, "MultipartFile.headers");
  var contentType$ = dart.privateName(multipart_file, "MultipartFile.contentType");
  var _isFinalized$ = dart.privateName(multipart_file, "_isFinalized");
  var _data = dart.privateName(multipart_file, "_data");
  multipart_file.MultipartFile = class MultipartFile extends core.Object {
    get length() {
      return this[length$];
    }
    set length(value) {
      super.length = value;
    }
    get filename() {
      return this[filename$];
    }
    set filename(value) {
      super.filename = value;
    }
    get headers() {
      return this[headers$1];
    }
    set headers(value) {
      super.headers = value;
    }
    get contentType() {
      return this[contentType$];
    }
    set contentType(value) {
      super.contentType = value;
    }
    static ['_#new#tearOff'](stream, length, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return new multipart_file.MultipartFile.new(stream, length, {filename: filename, contentType: contentType, headers: headers});
    }
    static ['_#fromStream#tearOff'](data, length, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return new multipart_file.MultipartFile.fromStream(data, length, {filename: filename, contentType: contentType, headers: headers});
    }
    static fromBytes(value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return new multipart_file.MultipartFile.fromStream(dart.fn(() => T$.StreamOfListOfint().fromIterable(T$.JSArrayOfListOfint().of([value])), T$.VoidToStreamOfListOfint()), value[$length], {filename: filename, contentType: contentType, headers: headers});
    }
    static ['_#fromBytes#tearOff'](value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return multipart_file.MultipartFile.fromBytes(value, {filename: filename, contentType: contentType, headers: headers});
    }
    static fromString(value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      contentType == null ? contentType = new media_type.MediaType.new("text", "plain") : null;
      let encoding = utils.encodingForCharset(contentType.parameters[$_get]("charset"), convert.utf8);
      contentType = contentType.change({parameters: new (T$.IdentityMapOfString$String()).from(["charset", encoding.name])});
      return multipart_file.MultipartFile.fromBytes(encoding.encode(value), {filename: filename, contentType: contentType, headers: headers});
    }
    static ['_#fromString#tearOff'](value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return multipart_file.MultipartFile.fromString(value, {filename: filename, contentType: contentType, headers: headers});
    }
    get isFinalized() {
      return this[_isFinalized$];
    }
    static fromFile(filePath, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return browser_multipart_file.multipartFileFromPath(filePath, {filename: filename, contentType: contentType, headers: headers});
    }
    static fromFileSync(filePath, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return browser_multipart_file.multipartFileFromPathSync(filePath, {filename: filename, contentType: contentType, headers: headers});
    }
    finalize() {
      if (this.isFinalized) {
        dart.throw(new core.StateError.new("The MultipartFile has already been finalized. " + "This typically means you are using " + "the same MultipartFile in repeated requests."));
      }
      this[_isFinalized$] = true;
      return this[_data]();
    }
    clone() {
      return new multipart_file.MultipartFile.fromStream(this[_data], this.length, {filename: this.filename, contentType: this.contentType, headers: this.headers});
    }
  };
  (multipart_file.MultipartFile.new = function(stream, length, opts) {
    let t20;
    let filename = opts && 'filename' in opts ? opts.filename : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    this[_isFinalized$] = false;
    this[length$] = length;
    this[filename$] = filename;
    this[_data] = dart.fn(() => stream, T$.VoidToStreamOfListOfint());
    this[headers$1] = utils.caseInsensitiveKeyMap(T$.ListOfString(), headers);
    this[contentType$] = (t20 = contentType, t20 == null ? new media_type.MediaType.new("application", "octet-stream") : t20);
    ;
  }).prototype = multipart_file.MultipartFile.prototype;
  (multipart_file.MultipartFile.fromStream = function(data, length, opts) {
    let t20;
    let filename = opts && 'filename' in opts ? opts.filename : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    this[_isFinalized$] = false;
    this[length$] = length;
    this[filename$] = filename;
    this[_data] = data;
    this[headers$1] = utils.caseInsensitiveKeyMap(T$.ListOfString(), headers);
    this[contentType$] = (t20 = contentType, t20 == null ? new media_type.MediaType.new("application", "octet-stream") : t20);
    ;
  }).prototype = multipart_file.MultipartFile.prototype;
  dart.addTypeTests(multipart_file.MultipartFile);
  dart.addTypeCaches(multipart_file.MultipartFile);
  dart.setMethodSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getMethods(multipart_file.MultipartFile.__proto__),
    finalize: dart.fnType(async.Stream$(core.List$(core.int)), []),
    clone: dart.fnType(multipart_file.MultipartFile, [])
  }));
  dart.setStaticMethodSignature(multipart_file.MultipartFile, () => ['fromBytes', 'fromString', 'fromFile', 'fromFileSync']);
  dart.setGetterSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getGetters(multipart_file.MultipartFile.__proto__),
    isFinalized: core.bool
  }));
  dart.setLibraryUri(multipart_file.MultipartFile, I[43]);
  dart.setFieldSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getFields(multipart_file.MultipartFile.__proto__),
    length: dart.finalFieldType(core.int),
    filename: dart.finalFieldType(dart.nullable(core.String)),
    headers: dart.finalFieldType(dart.nullable(core.Map$(core.String, core.List$(core.String)))),
    contentType: dart.finalFieldType(dart.nullable(media_type.MediaType)),
    [_data]: dart.finalFieldType(dart.fnType(async.Stream$(core.List$(core.int)), [])),
    [_isFinalized$]: dart.fieldType(core.bool)
  }));
  options$.ResponseType = class ResponseType extends core._Enum {
    [_enumToString]() {
      return "ResponseType." + this[_name];
    }
  };
  (options$.ResponseType.new = function(index, name) {
    options$.ResponseType.__proto__.new.call(this, index, name);
    ;
  }).prototype = options$.ResponseType.prototype;
  dart.addTypeTests(options$.ResponseType);
  dart.addTypeCaches(options$.ResponseType);
  dart.setMethodSignature(options$.ResponseType, () => ({
    __proto__: dart.getMethods(options$.ResponseType.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(options$.ResponseType, I[44]);
  dart.setStaticFieldSignature(options$.ResponseType, () => ['values', 'json', 'stream', 'plain', 'bytes']);
  dart.defineLazy(options$.ResponseType, {
    /*options$.ResponseType.values*/get values() {
      return C[24] || CT.C24;
    },
    /*options$.ResponseType.json*/get json() {
      return C[25] || CT.C25;
    },
    /*options$.ResponseType.stream*/get stream() {
      return C[26] || CT.C26;
    },
    /*options$.ResponseType.plain*/get plain() {
      return C[27] || CT.C27;
    },
    /*options$.ResponseType.bytes*/get bytes() {
      return C[28] || CT.C28;
    }
  }, false);
  options$.ListFormat = class ListFormat extends core._Enum {
    [_enumToString]() {
      return "ListFormat." + this[_name];
    }
  };
  (options$.ListFormat.new = function(index, name) {
    options$.ListFormat.__proto__.new.call(this, index, name);
    ;
  }).prototype = options$.ListFormat.prototype;
  dart.addTypeTests(options$.ListFormat);
  dart.addTypeCaches(options$.ListFormat);
  dart.setMethodSignature(options$.ListFormat, () => ({
    __proto__: dart.getMethods(options$.ListFormat.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(options$.ListFormat, I[44]);
  dart.setStaticFieldSignature(options$.ListFormat, () => ['values', 'csv', 'ssv', 'tsv', 'pipes', 'multi', 'multiCompatible']);
  dart.defineLazy(options$.ListFormat, {
    /*options$.ListFormat.values*/get values() {
      return C[29] || CT.C29;
    },
    /*options$.ListFormat.csv*/get csv() {
      return C[30] || CT.C30;
    },
    /*options$.ListFormat.ssv*/get ssv() {
      return C[31] || CT.C31;
    },
    /*options$.ListFormat.tsv*/get tsv() {
      return C[32] || CT.C32;
    },
    /*options$.ListFormat.pipes*/get pipes() {
      return C[33] || CT.C33;
    },
    /*options$.ListFormat.multi*/get multi() {
      return C[22] || CT.C22;
    },
    /*options$.ListFormat.multiCompatible*/get multiCompatible() {
      return C[34] || CT.C34;
    }
  }, false);
  var _$35OptionsMixin$35_baseUrl = dart.privateName(options$, "OptionsMixin._#OptionsMixin#_baseUrl");
  var _$35OptionsMixin$35queryParameters = dart.privateName(options$, "OptionsMixin._#OptionsMixin#queryParameters");
  var _connectTimeout = dart.privateName(options$, "OptionsMixin._connectTimeout");
  var __OptionsMixin__baseUrl = dart.privateName(options$, "_#OptionsMixin#_baseUrl");
  var __OptionsMixin_queryParameters = dart.privateName(options$, "_#OptionsMixin#queryParameters");
  var _connectTimeout$ = dart.privateName(options$, "_connectTimeout");
  var _baseUrl = dart.privateName(options$, "_baseUrl");
  options$.OptionsMixin = class OptionsMixin extends core.Object {};
  options$.OptionsMixin[dart.mixinOn] = Object => class OptionsMixin extends Object {
    get [__OptionsMixin__baseUrl]() {
      return this[_$35OptionsMixin$35_baseUrl];
    }
    set [__OptionsMixin__baseUrl](value) {
      this[_$35OptionsMixin$35_baseUrl] = value;
    }
    get [__OptionsMixin_queryParameters]() {
      return this[_$35OptionsMixin$35queryParameters];
    }
    set [__OptionsMixin_queryParameters](value) {
      this[_$35OptionsMixin$35queryParameters] = value;
    }
    get [_connectTimeout$]() {
      return this[_connectTimeout];
    }
    set [_connectTimeout$](value) {
      this[_connectTimeout] = value;
    }
    get baseUrl() {
      return this[_baseUrl];
    }
    get [_baseUrl]() {
      let t24;
      t24 = this[__OptionsMixin__baseUrl];
      return t24 == null ? dart.throw(new _internal.LateError.fieldNI("_baseUrl")) : t24;
    }
    set [_baseUrl](_baseUrl$35param) {
      this[__OptionsMixin__baseUrl] = _baseUrl$35param;
    }
    set baseUrl(value) {
      if (value[$isNotEmpty] && false && core.Uri.parse(value).host[$isEmpty]) {
        dart.throw(new core.ArgumentError.value(value, "baseUrl", "Must be a valid URL on platforms other than Web."));
      }
      this[_baseUrl] = value;
    }
    get queryParameters() {
      let t24;
      t24 = this[__OptionsMixin_queryParameters];
      return t24 == null ? dart.throw(new _internal.LateError.fieldNI("queryParameters")) : t24;
    }
    set queryParameters(queryParameters$35param) {
      this[__OptionsMixin_queryParameters] = queryParameters$35param;
    }
    get connectTimeout() {
      return this[_connectTimeout$];
    }
    set connectTimeout(value) {
      if (value != null && value.isNegative) {
        dart.throw(new core.StateError.new("connectTimeout should be positive"));
      }
      this[_connectTimeout$] = value;
    }
  };
  (options$.OptionsMixin[dart.mixinNew] = function() {
    this[_$35OptionsMixin$35_baseUrl] = null;
    this[_$35OptionsMixin$35queryParameters] = null;
    this[_connectTimeout] = null;
  }).prototype = options$.OptionsMixin.prototype;
  dart.addTypeTests(options$.OptionsMixin);
  dart.addTypeCaches(options$.OptionsMixin);
  options$.OptionsMixin[dart.implements] = () => [core.Object];
  dart.setGetterSignature(options$.OptionsMixin, () => ({
    __proto__: dart.getGetters(options$.OptionsMixin.__proto__),
    baseUrl: core.String,
    [_baseUrl]: core.String,
    queryParameters: core.Map$(core.String, dart.dynamic),
    connectTimeout: dart.nullable(core.Duration)
  }));
  dart.setSetterSignature(options$.OptionsMixin, () => ({
    __proto__: dart.getSetters(options$.OptionsMixin.__proto__),
    [_baseUrl]: core.String,
    baseUrl: core.String,
    queryParameters: core.Map$(core.String, dart.dynamic),
    connectTimeout: dart.nullable(core.Duration)
  }));
  dart.setLibraryUri(options$.OptionsMixin, I[44]);
  dart.setFieldSignature(options$.OptionsMixin, () => ({
    __proto__: dart.getFields(options$.OptionsMixin.__proto__),
    [__OptionsMixin__baseUrl]: dart.fieldType(dart.nullable(core.String)),
    [__OptionsMixin_queryParameters]: dart.fieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    [_connectTimeout$]: dart.fieldType(dart.nullable(core.Duration))
  }));
  var requestEncoder$ = dart.privateName(options$, "_RequestConfig.requestEncoder");
  var responseDecoder$ = dart.privateName(options$, "_RequestConfig.responseDecoder");
  var ___RequestConfig_method = dart.privateName(options$, "_#_RequestConfig#method");
  var ___RequestConfig__headers = dart.privateName(options$, "_#_RequestConfig#_headers");
  var ___RequestConfig_preserveHeaderCase = dart.privateName(options$, "_#_RequestConfig#preserveHeaderCase");
  var _defaultContentType = dart.privateName(options$, "_defaultContentType");
  var ___RequestConfig_responseType = dart.privateName(options$, "_#_RequestConfig#responseType");
  var ___RequestConfig_validateStatus = dart.privateName(options$, "_#_RequestConfig#validateStatus");
  var ___RequestConfig_receiveDataWhenStatusError = dart.privateName(options$, "_#_RequestConfig#receiveDataWhenStatusError");
  var ___RequestConfig_extra = dart.privateName(options$, "_#_RequestConfig#extra");
  var ___RequestConfig_followRedirects = dart.privateName(options$, "_#_RequestConfig#followRedirects");
  var ___RequestConfig_maxRedirects = dart.privateName(options$, "_#_RequestConfig#maxRedirects");
  var ___RequestConfig_persistentConnection = dart.privateName(options$, "_#_RequestConfig#persistentConnection");
  var ___RequestConfig_listFormat = dart.privateName(options$, "_#_RequestConfig#listFormat");
  var _receiveTimeout = dart.privateName(options$, "_receiveTimeout");
  var _sendTimeout = dart.privateName(options$, "_sendTimeout");
  var _headers = dart.privateName(options$, "_headers");
  options$._RequestConfig = class _RequestConfig extends core.Object {
    get requestEncoder() {
      return this[requestEncoder$];
    }
    set requestEncoder(value) {
      this[requestEncoder$] = value;
    }
    get responseDecoder() {
      return this[responseDecoder$];
    }
    set responseDecoder(value) {
      this[responseDecoder$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
      let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
      let method = opts && 'method' in opts ? opts.method : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let preserveHeaderCase = opts && 'preserveHeaderCase' in opts ? opts.preserveHeaderCase : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
      let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
      let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
      let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
      let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
      let responseType = opts && 'responseType' in opts ? opts.responseType : null;
      let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
      let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
      return new options$._RequestConfig.new({receiveTimeout: receiveTimeout, sendTimeout: sendTimeout, method: method, extra: extra, headers: headers, preserveHeaderCase: preserveHeaderCase, contentType: contentType, listFormat: listFormat, followRedirects: followRedirects, maxRedirects: maxRedirects, persistentConnection: persistentConnection, receiveDataWhenStatusError: receiveDataWhenStatusError, validateStatus: validateStatus, responseType: responseType, requestEncoder: requestEncoder, responseDecoder: responseDecoder});
    }
    get method() {
      let t24;
      t24 = this[___RequestConfig_method];
      return t24 == null ? dart.throw(new _internal.LateError.fieldNI("method")) : t24;
    }
    set method(method$35param) {
      this[___RequestConfig_method] = method$35param;
    }
    get headers() {
      return this[_headers];
    }
    get [_headers]() {
      let t24;
      t24 = this[___RequestConfig__headers];
      return t24 == null ? dart.throw(new _internal.LateError.fieldNI("_headers")) : t24;
    }
    set [_headers](_headers$35param) {
      this[___RequestConfig__headers] = _headers$35param;
    }
    set headers(headers) {
      this[_headers] = utils.caseInsensitiveKeyMap(dart.dynamic, headers);
      if (!this[_headers][$containsKey]("content-type") && this[_defaultContentType] != null) {
        this[_headers][$_set]("content-type", this[_defaultContentType]);
      }
    }
    get preserveHeaderCase() {
      let t24;
      t24 = this[___RequestConfig_preserveHeaderCase];
      return t24 == null ? dart.throw(new _internal.LateError.fieldNI("preserveHeaderCase")) : t24;
    }
    set preserveHeaderCase(preserveHeaderCase$35param) {
      this[___RequestConfig_preserveHeaderCase] = preserveHeaderCase$35param;
    }
    get sendTimeout() {
      return this[_sendTimeout];
    }
    set sendTimeout(value) {
      if (value != null && value.isNegative) {
        dart.throw(new core.StateError.new("sendTimeout should be positive"));
      }
      this[_sendTimeout] = value;
    }
    get receiveTimeout() {
      return this[_receiveTimeout];
    }
    set receiveTimeout(value) {
      if (value != null && value.isNegative) {
        dart.throw(new core.StateError.new("receiveTimeout should be positive"));
      }
      this[_receiveTimeout] = value;
    }
    get contentType() {
      return T$.StringN().as(this[_headers][$_get]("content-type"));
    }
    set contentType(contentType) {
      let t24;
      let newContentType = (t24 = contentType, t24 == null ? null : t24[$trim]());
      this[_defaultContentType] = newContentType;
      if (newContentType != null) {
        this[_headers][$_set]("content-type", newContentType);
      } else {
        this[_headers][$remove]("content-type");
      }
    }
    get responseType() {
      let t24;
      t24 = this[___RequestConfig_responseType];
      return t24 == null ? dart.throw(new _internal.LateError.fieldNI("responseType")) : t24;
    }
    set responseType(responseType$35param) {
      this[___RequestConfig_responseType] = responseType$35param;
    }
    get validateStatus() {
      let t24;
      t24 = this[___RequestConfig_validateStatus];
      return t24 == null ? dart.throw(new _internal.LateError.fieldNI("validateStatus")) : t24;
    }
    set validateStatus(validateStatus$35param) {
      this[___RequestConfig_validateStatus] = validateStatus$35param;
    }
    get receiveDataWhenStatusError() {
      let t24;
      t24 = this[___RequestConfig_receiveDataWhenStatusError];
      return t24 == null ? dart.throw(new _internal.LateError.fieldNI("receiveDataWhenStatusError")) : t24;
    }
    set receiveDataWhenStatusError(receiveDataWhenStatusError$35param) {
      this[___RequestConfig_receiveDataWhenStatusError] = receiveDataWhenStatusError$35param;
    }
    get extra() {
      let t24;
      t24 = this[___RequestConfig_extra];
      return t24 == null ? dart.throw(new _internal.LateError.fieldNI("extra")) : t24;
    }
    set extra(extra$35param) {
      this[___RequestConfig_extra] = extra$35param;
    }
    get followRedirects() {
      let t24;
      t24 = this[___RequestConfig_followRedirects];
      return t24 == null ? dart.throw(new _internal.LateError.fieldNI("followRedirects")) : t24;
    }
    set followRedirects(followRedirects$35param) {
      this[___RequestConfig_followRedirects] = followRedirects$35param;
    }
    get maxRedirects() {
      let t24;
      t24 = this[___RequestConfig_maxRedirects];
      return t24 == null ? dart.throw(new _internal.LateError.fieldNI("maxRedirects")) : t24;
    }
    set maxRedirects(maxRedirects$35param) {
      this[___RequestConfig_maxRedirects] = maxRedirects$35param;
    }
    get persistentConnection() {
      let t24;
      t24 = this[___RequestConfig_persistentConnection];
      return t24 == null ? dart.throw(new _internal.LateError.fieldNI("persistentConnection")) : t24;
    }
    set persistentConnection(persistentConnection$35param) {
      this[___RequestConfig_persistentConnection] = persistentConnection$35param;
    }
    get listFormat() {
      let t24;
      t24 = this[___RequestConfig_listFormat];
      return t24 == null ? dart.throw(new _internal.LateError.fieldNI("listFormat")) : t24;
    }
    set listFormat(listFormat$35param) {
      this[___RequestConfig_listFormat] = listFormat$35param;
    }
  };
  (options$._RequestConfig.new = function(opts) {
    let t24, t24$, t24$0, t24$1, t24$2, t24$3, t24$4, t24$5, t24$6, t24$7;
    let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
    let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
    let method = opts && 'method' in opts ? opts.method : null;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let preserveHeaderCase = opts && 'preserveHeaderCase' in opts ? opts.preserveHeaderCase : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
    let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
    let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
    let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
    let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
    let responseType = opts && 'responseType' in opts ? opts.responseType : null;
    let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
    let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
    this[___RequestConfig_method] = null;
    this[___RequestConfig__headers] = null;
    this[___RequestConfig_preserveHeaderCase] = null;
    this[_defaultContentType] = null;
    this[___RequestConfig_responseType] = null;
    this[___RequestConfig_validateStatus] = null;
    this[___RequestConfig_receiveDataWhenStatusError] = null;
    this[___RequestConfig_extra] = null;
    this[___RequestConfig_followRedirects] = null;
    this[___RequestConfig_maxRedirects] = null;
    this[___RequestConfig_persistentConnection] = null;
    this[___RequestConfig_listFormat] = null;
    this[requestEncoder$] = requestEncoder;
    this[responseDecoder$] = responseDecoder;
    if (!(receiveTimeout == null || !receiveTimeout.isNegative)) dart.assertFailed(null, I[45], 690, 16, "receiveTimeout == null || !receiveTimeout.isNegative");
    this[_receiveTimeout] = receiveTimeout;
    if (!(sendTimeout == null || !sendTimeout.isNegative)) dart.assertFailed(null, I[45], 692, 16, "sendTimeout == null || !sendTimeout.isNegative");
    this[_sendTimeout] = sendTimeout;
    this[___RequestConfig_method] = (t24 = method, t24 == null ? "GET" : t24);
    this[___RequestConfig_preserveHeaderCase] = (t24$ = preserveHeaderCase, t24$ == null ? false : t24$);
    this[___RequestConfig_listFormat] = (t24$0 = listFormat, t24$0 == null ? options$.ListFormat.multi : t24$0);
    this[___RequestConfig_extra] = (t24$1 = extra, t24$1 == null ? new (T$.IdentityMapOfString$dynamic()).new() : t24$1);
    this[___RequestConfig_followRedirects] = (t24$2 = followRedirects, t24$2 == null ? true : t24$2);
    this[___RequestConfig_maxRedirects] = (t24$3 = maxRedirects, t24$3 == null ? 5 : t24$3);
    this[___RequestConfig_persistentConnection] = (t24$4 = persistentConnection, t24$4 == null ? true : t24$4);
    this[___RequestConfig_receiveDataWhenStatusError] = (t24$5 = receiveDataWhenStatusError, t24$5 == null ? true : t24$5);
    this[___RequestConfig_validateStatus] = (t24$6 = validateStatus, t24$6 == null ? C[35] || CT.C35 : t24$6);
    this[___RequestConfig_responseType] = (t24$7 = responseType, t24$7 == null ? options$.ResponseType.json : t24$7);
    this.headers = headers;
    let hasContentTypeHeader = this.headers[$containsKey]("content-type");
    if (contentType != null && hasContentTypeHeader && !dart.equals(this.headers[$_get]("content-type"), contentType)) {
      dart.throw(new core.ArgumentError.value(contentType, "contentType", "Unable to set different values for " + "`contentType` and the content-type header."));
    }
    if (!hasContentTypeHeader) {
      this.contentType = contentType;
    }
  }).prototype = options$._RequestConfig.prototype;
  dart.addTypeTests(options$._RequestConfig);
  dart.addTypeCaches(options$._RequestConfig);
  dart.setGetterSignature(options$._RequestConfig, () => ({
    __proto__: dart.getGetters(options$._RequestConfig.__proto__),
    method: core.String,
    headers: core.Map$(core.String, dart.dynamic),
    [_headers]: core.Map$(core.String, dart.dynamic),
    preserveHeaderCase: core.bool,
    sendTimeout: dart.nullable(core.Duration),
    receiveTimeout: dart.nullable(core.Duration),
    contentType: dart.nullable(core.String),
    responseType: options$.ResponseType,
    validateStatus: dart.fnType(core.bool, [dart.nullable(core.int)]),
    receiveDataWhenStatusError: core.bool,
    extra: core.Map$(core.String, dart.dynamic),
    followRedirects: core.bool,
    maxRedirects: core.int,
    persistentConnection: core.bool,
    listFormat: options$.ListFormat
  }));
  dart.setSetterSignature(options$._RequestConfig, () => ({
    __proto__: dart.getSetters(options$._RequestConfig.__proto__),
    method: core.String,
    [_headers]: core.Map$(core.String, dart.dynamic),
    headers: dart.nullable(core.Map$(core.String, dart.dynamic)),
    preserveHeaderCase: core.bool,
    sendTimeout: dart.nullable(core.Duration),
    receiveTimeout: dart.nullable(core.Duration),
    contentType: dart.nullable(core.String),
    responseType: options$.ResponseType,
    validateStatus: dart.fnType(core.bool, [dart.nullable(core.int)]),
    receiveDataWhenStatusError: core.bool,
    extra: core.Map$(core.String, dart.dynamic),
    followRedirects: core.bool,
    maxRedirects: core.int,
    persistentConnection: core.bool,
    listFormat: options$.ListFormat
  }));
  dart.setLibraryUri(options$._RequestConfig, I[44]);
  dart.setFieldSignature(options$._RequestConfig, () => ({
    __proto__: dart.getFields(options$._RequestConfig.__proto__),
    [___RequestConfig_method]: dart.fieldType(dart.nullable(core.String)),
    [___RequestConfig__headers]: dart.fieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    [___RequestConfig_preserveHeaderCase]: dart.fieldType(dart.nullable(core.bool)),
    [_sendTimeout]: dart.fieldType(dart.nullable(core.Duration)),
    [_receiveTimeout]: dart.fieldType(dart.nullable(core.Duration)),
    [_defaultContentType]: dart.fieldType(dart.nullable(core.String)),
    [___RequestConfig_responseType]: dart.fieldType(dart.nullable(options$.ResponseType)),
    [___RequestConfig_validateStatus]: dart.fieldType(dart.nullable(dart.fnType(core.bool, [dart.nullable(core.int)]))),
    [___RequestConfig_receiveDataWhenStatusError]: dart.fieldType(dart.nullable(core.bool)),
    [___RequestConfig_extra]: dart.fieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    [___RequestConfig_followRedirects]: dart.fieldType(dart.nullable(core.bool)),
    [___RequestConfig_maxRedirects]: dart.fieldType(dart.nullable(core.int)),
    [___RequestConfig_persistentConnection]: dart.fieldType(dart.nullable(core.bool)),
    requestEncoder: dart.fieldType(dart.nullable(dart.fnType(async.FutureOr$(core.List$(core.int)), [core.String, options$.RequestOptions]))),
    responseDecoder: dart.fieldType(dart.nullable(dart.fnType(async.FutureOr$(dart.nullable(core.String)), [core.List$(core.int), options$.RequestOptions, adapter.ResponseBody]))),
    [___RequestConfig_listFormat]: dart.fieldType(dart.nullable(options$.ListFormat))
  }));
  const _RequestConfig_OptionsMixin$36 = class _RequestConfig_OptionsMixin extends options$._RequestConfig {};
  (_RequestConfig_OptionsMixin$36.new = function(opts) {
    options$.OptionsMixin[dart.mixinNew].call(this);
    _RequestConfig_OptionsMixin$36.__proto__.new.call(this, opts);
  }).prototype = _RequestConfig_OptionsMixin$36.prototype;
  dart.applyMixin(_RequestConfig_OptionsMixin$36, options$.OptionsMixin);
  options$.BaseOptions = class BaseOptions extends _RequestConfig_OptionsMixin$36 {
    static ['_#new#tearOff'](opts) {
      let method = opts && 'method' in opts ? opts.method : null;
      let connectTimeout = opts && 'connectTimeout' in opts ? opts.connectTimeout : null;
      let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
      let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
      let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : "";
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let preserveHeaderCase = opts && 'preserveHeaderCase' in opts ? opts.preserveHeaderCase : false;
      let responseType = opts && 'responseType' in opts ? opts.responseType : C[25] || CT.C25;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
      let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
      let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
      let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
      let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
      let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
      let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
      return new options$.BaseOptions.new({method: method, connectTimeout: connectTimeout, receiveTimeout: receiveTimeout, sendTimeout: sendTimeout, baseUrl: baseUrl, queryParameters: queryParameters, extra: extra, headers: headers, preserveHeaderCase: preserveHeaderCase, responseType: responseType, contentType: contentType, validateStatus: validateStatus, receiveDataWhenStatusError: receiveDataWhenStatusError, followRedirects: followRedirects, maxRedirects: maxRedirects, persistentConnection: persistentConnection, requestEncoder: requestEncoder, responseDecoder: responseDecoder, listFormat: listFormat});
    }
    copyWith(opts) {
      let t24, t24$, t24$0, t24$1, t24$2, t24$3, t24$4, t24$5, t24$6, t24$7, t24$8, t24$9, t24$10, t24$11, t24$12, t24$13, t24$14, t24$15, t24$16;
      let method = opts && 'method' in opts ? opts.method : null;
      let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let path = opts && 'path' in opts ? opts.path : null;
      let connectTimeout = opts && 'connectTimeout' in opts ? opts.connectTimeout : null;
      let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
      let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let preserveHeaderCase = opts && 'preserveHeaderCase' in opts ? opts.preserveHeaderCase : null;
      let responseType = opts && 'responseType' in opts ? opts.responseType : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
      let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
      let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
      let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
      let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
      let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
      let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
      return new options$.BaseOptions.new({method: (t24 = method, t24 == null ? this.method : t24), baseUrl: (t24$ = baseUrl, t24$ == null ? this.baseUrl : t24$), queryParameters: (t24$0 = queryParameters, t24$0 == null ? this.queryParameters : t24$0), connectTimeout: (t24$1 = connectTimeout, t24$1 == null ? this.connectTimeout : t24$1), receiveTimeout: (t24$2 = receiveTimeout, t24$2 == null ? this.receiveTimeout : t24$2), sendTimeout: (t24$3 = sendTimeout, t24$3 == null ? this.sendTimeout : t24$3), extra: (t24$4 = extra, t24$4 == null ? T$.LinkedHashMapOfString$dynamic().from(this.extra) : t24$4), headers: (t24$5 = headers, t24$5 == null ? T$.LinkedHashMapOfString$dynamic().from(this.headers) : t24$5), preserveHeaderCase: (t24$6 = preserveHeaderCase, t24$6 == null ? this.preserveHeaderCase : t24$6), responseType: (t24$7 = responseType, t24$7 == null ? this.responseType : t24$7), contentType: (t24$8 = contentType, t24$8 == null ? this.contentType : t24$8), validateStatus: (t24$9 = validateStatus, t24$9 == null ? this.validateStatus : t24$9), receiveDataWhenStatusError: (t24$10 = receiveDataWhenStatusError, t24$10 == null ? this.receiveDataWhenStatusError : t24$10), followRedirects: (t24$11 = followRedirects, t24$11 == null ? this.followRedirects : t24$11), maxRedirects: (t24$12 = maxRedirects, t24$12 == null ? this.maxRedirects : t24$12), persistentConnection: (t24$13 = persistentConnection, t24$13 == null ? this.persistentConnection : t24$13), requestEncoder: (t24$14 = requestEncoder, t24$14 == null ? this.requestEncoder : t24$14), responseDecoder: (t24$15 = responseDecoder, t24$15 == null ? this.responseDecoder : t24$15), listFormat: (t24$16 = listFormat, t24$16 == null ? this.listFormat : t24$16)});
    }
  };
  (options$.BaseOptions.new = function(opts) {
    let t24;
    let method = opts && 'method' in opts ? opts.method : null;
    let connectTimeout = opts && 'connectTimeout' in opts ? opts.connectTimeout : null;
    let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
    let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
    let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : "";
    let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let preserveHeaderCase = opts && 'preserveHeaderCase' in opts ? opts.preserveHeaderCase : false;
    let responseType = opts && 'responseType' in opts ? opts.responseType : C[25] || CT.C25;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
    let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
    let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
    let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
    let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
    let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
    let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
    options$.BaseOptions.__proto__.new.call(this, {method: method, receiveTimeout: receiveTimeout, sendTimeout: sendTimeout, extra: extra, headers: headers, preserveHeaderCase: preserveHeaderCase, responseType: responseType, contentType: contentType, validateStatus: validateStatus, receiveDataWhenStatusError: receiveDataWhenStatusError, followRedirects: followRedirects, maxRedirects: maxRedirects, persistentConnection: persistentConnection, requestEncoder: requestEncoder, responseDecoder: responseDecoder, listFormat: listFormat});
    this.baseUrl = baseUrl;
    this.queryParameters = (t24 = queryParameters, t24 == null ? new (T$.IdentityMapOfString$dynamic()).new() : t24);
    this.connectTimeout = connectTimeout;
  }).prototype = options$.BaseOptions.prototype;
  dart.addTypeTests(options$.BaseOptions);
  dart.addTypeCaches(options$.BaseOptions);
  dart.setMethodSignature(options$.BaseOptions, () => ({
    __proto__: dart.getMethods(options$.BaseOptions.__proto__),
    copyWith: dart.fnType(options$.BaseOptions, [], {baseUrl: dart.nullable(core.String), connectTimeout: dart.nullable(core.Duration), contentType: dart.nullable(core.String), extra: dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), followRedirects: dart.nullable(core.bool), headers: dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), listFormat: dart.nullable(options$.ListFormat), maxRedirects: dart.nullable(core.int), method: dart.nullable(core.String), path: dart.nullable(core.String), persistentConnection: dart.nullable(core.bool), preserveHeaderCase: dart.nullable(core.bool), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic)), receiveDataWhenStatusError: dart.nullable(core.bool), receiveTimeout: dart.nullable(core.Duration), requestEncoder: dart.nullable(dart.fnType(async.FutureOr$(core.List$(core.int)), [core.String, options$.RequestOptions])), responseDecoder: dart.nullable(dart.fnType(async.FutureOr$(dart.nullable(core.String)), [core.List$(core.int), options$.RequestOptions, adapter.ResponseBody])), responseType: dart.nullable(options$.ResponseType), sendTimeout: dart.nullable(core.Duration), validateStatus: dart.nullable(dart.fnType(core.bool, [dart.nullable(core.int)]))}, {})
  }));
  dart.setLibraryUri(options$.BaseOptions, I[44]);
  var method$ = dart.privateName(options$, "Options.method");
  var headers$2 = dart.privateName(options$, "Options.headers");
  var preserveHeaderCase$0 = dart.privateName(options$, "Options.preserveHeaderCase");
  var contentType$0 = dart.privateName(options$, "Options.contentType");
  var responseType$ = dart.privateName(options$, "Options.responseType");
  var validateStatus$ = dart.privateName(options$, "Options.validateStatus");
  var receiveDataWhenStatusError$ = dart.privateName(options$, "Options.receiveDataWhenStatusError");
  var extra$ = dart.privateName(options$, "Options.extra");
  var followRedirects$ = dart.privateName(options$, "Options.followRedirects");
  var maxRedirects$ = dart.privateName(options$, "Options.maxRedirects");
  var persistentConnection$ = dart.privateName(options$, "Options.persistentConnection");
  var requestEncoder$0 = dart.privateName(options$, "Options.requestEncoder");
  var responseDecoder$0 = dart.privateName(options$, "Options.responseDecoder");
  var listFormat$ = dart.privateName(options$, "Options.listFormat");
  options$.Options = class Options extends core.Object {
    get method() {
      return this[method$];
    }
    set method(value) {
      this[method$] = value;
    }
    get headers() {
      return this[headers$2];
    }
    set headers(value) {
      this[headers$2] = value;
    }
    get preserveHeaderCase() {
      return this[preserveHeaderCase$0];
    }
    set preserveHeaderCase(value) {
      this[preserveHeaderCase$0] = value;
    }
    get contentType() {
      return this[contentType$0];
    }
    set contentType(value) {
      this[contentType$0] = value;
    }
    get responseType() {
      return this[responseType$];
    }
    set responseType(value) {
      this[responseType$] = value;
    }
    get validateStatus() {
      return this[validateStatus$];
    }
    set validateStatus(value) {
      this[validateStatus$] = value;
    }
    get receiveDataWhenStatusError() {
      return this[receiveDataWhenStatusError$];
    }
    set receiveDataWhenStatusError(value) {
      this[receiveDataWhenStatusError$] = value;
    }
    get extra() {
      return this[extra$];
    }
    set extra(value) {
      this[extra$] = value;
    }
    get followRedirects() {
      return this[followRedirects$];
    }
    set followRedirects(value) {
      this[followRedirects$] = value;
    }
    get maxRedirects() {
      return this[maxRedirects$];
    }
    set maxRedirects(value) {
      this[maxRedirects$] = value;
    }
    get persistentConnection() {
      return this[persistentConnection$];
    }
    set persistentConnection(value) {
      this[persistentConnection$] = value;
    }
    get requestEncoder() {
      return this[requestEncoder$0];
    }
    set requestEncoder(value) {
      this[requestEncoder$0] = value;
    }
    get responseDecoder() {
      return this[responseDecoder$0];
    }
    set responseDecoder(value) {
      this[responseDecoder$0] = value;
    }
    get listFormat() {
      return this[listFormat$];
    }
    set listFormat(value) {
      this[listFormat$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let method = opts && 'method' in opts ? opts.method : null;
      let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
      let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let preserveHeaderCase = opts && 'preserveHeaderCase' in opts ? opts.preserveHeaderCase : null;
      let responseType = opts && 'responseType' in opts ? opts.responseType : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
      let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
      let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
      let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
      let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
      let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
      let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
      return new options$.Options.new({method: method, sendTimeout: sendTimeout, receiveTimeout: receiveTimeout, extra: extra, headers: headers, preserveHeaderCase: preserveHeaderCase, responseType: responseType, contentType: contentType, validateStatus: validateStatus, receiveDataWhenStatusError: receiveDataWhenStatusError, followRedirects: followRedirects, maxRedirects: maxRedirects, persistentConnection: persistentConnection, requestEncoder: requestEncoder, responseDecoder: responseDecoder, listFormat: listFormat});
    }
    copyWith(opts) {
      let t24, t24$, t24$0, t24$1, t24$2, t24$3, t24$4, t24$5, t24$6, t24$7, t24$8, t24$9, t24$10, t24$11, t24$12, t24$13;
      let method = opts && 'method' in opts ? opts.method : null;
      let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
      let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let preserveHeaderCase = opts && 'preserveHeaderCase' in opts ? opts.preserveHeaderCase : null;
      let responseType = opts && 'responseType' in opts ? opts.responseType : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
      let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
      let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
      let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
      let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
      let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
      let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
      let effectiveHeaders = null;
      if (headers == null && this.headers != null) {
        effectiveHeaders = utils.caseInsensitiveKeyMap(dart.dynamic, dart.nullCheck(this.headers));
      }
      if (headers != null) {
        headers = utils.caseInsensitiveKeyMap(T$.ObjectN(), headers);
        if (!!(contentType != null && headers[$containsKey]("content-type"))) dart.assertFailed("You cannot set both contentType param and a content-type header", I[45], 280, 9, "!(contentType != null &&\n            headers.containsKey(Headers.contentTypeHeader))");
      }
      let effectiveExtra = null;
      if (extra == null && this.extra != null) {
        effectiveExtra = T$.LinkedHashMapOfString$dynamic().from(dart.nullCheck(this.extra));
      }
      return new options$.Options.new({method: (t24 = method, t24 == null ? this.method : t24), sendTimeout: (t24$ = sendTimeout, t24$ == null ? this.sendTimeout : t24$), receiveTimeout: (t24$0 = receiveTimeout, t24$0 == null ? this.receiveTimeout : t24$0), extra: (t24$1 = extra, t24$1 == null ? effectiveExtra : t24$1), headers: (t24$2 = headers, t24$2 == null ? effectiveHeaders : t24$2), preserveHeaderCase: (t24$3 = preserveHeaderCase, t24$3 == null ? this.preserveHeaderCase : t24$3), responseType: (t24$4 = responseType, t24$4 == null ? this.responseType : t24$4), contentType: (t24$5 = contentType, t24$5 == null ? this.contentType : t24$5), validateStatus: (t24$6 = validateStatus, t24$6 == null ? this.validateStatus : t24$6), receiveDataWhenStatusError: (t24$7 = receiveDataWhenStatusError, t24$7 == null ? this.receiveDataWhenStatusError : t24$7), followRedirects: (t24$8 = followRedirects, t24$8 == null ? this.followRedirects : t24$8), maxRedirects: (t24$9 = maxRedirects, t24$9 == null ? this.maxRedirects : t24$9), persistentConnection: (t24$10 = persistentConnection, t24$10 == null ? this.persistentConnection : t24$10), requestEncoder: (t24$11 = requestEncoder, t24$11 == null ? this.requestEncoder : t24$11), responseDecoder: (t24$12 = responseDecoder, t24$12 == null ? this.responseDecoder : t24$12), listFormat: (t24$13 = listFormat, t24$13 == null ? this.listFormat : t24$13)});
    }
    compose(baseOpt, path, opts) {
      let t24, t24$, t24$0, t24$1, t24$2, t24$3, t24$4, t24$5, t24$6, t24$7, t24$8, t24$9, t24$10, t24$11, t24$12, t24$13, t24$14;
      let data = opts && 'data' in opts ? opts.data : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      let sourceStackTrace = opts && 'sourceStackTrace' in opts ? opts.sourceStackTrace : null;
      let query = new (T$.IdentityMapOfString$dynamic()).new();
      query[$addAll](baseOpt.queryParameters);
      if (queryParameters != null) query[$addAll](queryParameters);
      let headers = utils.caseInsensitiveKeyMap(dart.dynamic, baseOpt.headers);
      if (this.headers != null) {
        headers[$addAll](dart.nullCheck(this.headers));
      }
      if (this.contentType != null) {
        headers[$_set]("content-type", this.contentType);
      }
      let contentType = T$.StringN().as(headers[$_get]("content-type"));
      let extra = T$.LinkedHashMapOfString$dynamic().from(baseOpt.extra);
      if (this.extra != null) {
        extra[$addAll](dart.nullCheck(this.extra));
      }
      let method = (t24 = this.method, t24 == null ? baseOpt.method : t24)[$toUpperCase]();
      let requestOptions = new options$.RequestOptions.new({method: method, headers: headers, extra: extra, baseUrl: baseOpt.baseUrl, path: path, data: data, preserveHeaderCase: (t24$ = this.preserveHeaderCase, t24$ == null ? baseOpt.preserveHeaderCase : t24$), sourceStackTrace: (t24$0 = sourceStackTrace, t24$0 == null ? core.StackTrace.current : t24$0), connectTimeout: baseOpt.connectTimeout, sendTimeout: (t24$1 = this.sendTimeout, t24$1 == null ? baseOpt.sendTimeout : t24$1), receiveTimeout: (t24$2 = this.receiveTimeout, t24$2 == null ? baseOpt.receiveTimeout : t24$2), responseType: (t24$3 = this.responseType, t24$3 == null ? baseOpt.responseType : t24$3), validateStatus: (t24$4 = this.validateStatus, t24$4 == null ? baseOpt.validateStatus : t24$4), receiveDataWhenStatusError: (t24$5 = this.receiveDataWhenStatusError, t24$5 == null ? baseOpt.receiveDataWhenStatusError : t24$5), followRedirects: (t24$6 = this.followRedirects, t24$6 == null ? baseOpt.followRedirects : t24$6), maxRedirects: (t24$7 = this.maxRedirects, t24$7 == null ? baseOpt.maxRedirects : t24$7), persistentConnection: (t24$8 = this.persistentConnection, t24$8 == null ? baseOpt.persistentConnection : t24$8), queryParameters: query, requestEncoder: (t24$9 = this.requestEncoder, t24$9 == null ? baseOpt.requestEncoder : t24$9), responseDecoder: (t24$10 = this.responseDecoder, t24$10 == null ? baseOpt.responseDecoder : t24$10), listFormat: (t24$11 = this.listFormat, t24$11 == null ? baseOpt.listFormat : t24$11), onReceiveProgress: onReceiveProgress, onSendProgress: onSendProgress, cancelToken: cancelToken, contentType: (t24$13 = (t24$12 = contentType, t24$12 == null ? this.contentType : t24$12), t24$13 == null ? baseOpt.contentType : t24$13)});
      t24$14 = requestOptions.cancelToken;
      t24$14 == null ? null : t24$14.requestOptions = requestOptions;
      return requestOptions;
    }
    get sendTimeout() {
      return this[_sendTimeout];
    }
    set sendTimeout(value) {
      if (value != null && value.isNegative) {
        dart.throw(new core.ArgumentError.value(value, "sendTimeout", "should be positive"));
      }
      this[_sendTimeout] = value;
    }
    get receiveTimeout() {
      return this[_receiveTimeout];
    }
    set receiveTimeout(value) {
      if (value != null && value.isNegative) {
        dart.throw(new core.ArgumentError.value(value, "receiveTimeout", "should be positive"));
      }
      this[_receiveTimeout] = value;
    }
  };
  (options$.Options.new = function(opts) {
    let method = opts && 'method' in opts ? opts.method : null;
    let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
    let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let preserveHeaderCase = opts && 'preserveHeaderCase' in opts ? opts.preserveHeaderCase : null;
    let responseType = opts && 'responseType' in opts ? opts.responseType : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
    let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
    let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
    let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
    let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
    let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
    let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
    this[method$] = method;
    this[extra$] = extra;
    this[headers$2] = headers;
    this[preserveHeaderCase$0] = preserveHeaderCase;
    this[responseType$] = responseType;
    this[contentType$0] = contentType;
    this[validateStatus$] = validateStatus;
    this[receiveDataWhenStatusError$] = receiveDataWhenStatusError;
    this[followRedirects$] = followRedirects;
    this[maxRedirects$] = maxRedirects;
    this[persistentConnection$] = persistentConnection;
    this[requestEncoder$0] = requestEncoder;
    this[responseDecoder$0] = responseDecoder;
    this[listFormat$] = listFormat;
    if (!(receiveTimeout == null || !receiveTimeout.isNegative)) dart.assertFailed(null, I[45], 248, 16, "receiveTimeout == null || !receiveTimeout.isNegative");
    this[_receiveTimeout] = receiveTimeout;
    if (!(sendTimeout == null || !sendTimeout.isNegative)) dart.assertFailed(null, I[45], 250, 16, "sendTimeout == null || !sendTimeout.isNegative");
    this[_sendTimeout] = sendTimeout;
    ;
  }).prototype = options$.Options.prototype;
  dart.addTypeTests(options$.Options);
  dart.addTypeCaches(options$.Options);
  dart.setMethodSignature(options$.Options, () => ({
    __proto__: dart.getMethods(options$.Options.__proto__),
    copyWith: dart.fnType(options$.Options, [], {contentType: dart.nullable(core.String), extra: dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), followRedirects: dart.nullable(core.bool), headers: dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), listFormat: dart.nullable(options$.ListFormat), maxRedirects: dart.nullable(core.int), method: dart.nullable(core.String), persistentConnection: dart.nullable(core.bool), preserveHeaderCase: dart.nullable(core.bool), receiveDataWhenStatusError: dart.nullable(core.bool), receiveTimeout: dart.nullable(core.Duration), requestEncoder: dart.nullable(dart.fnType(async.FutureOr$(core.List$(core.int)), [core.String, options$.RequestOptions])), responseDecoder: dart.nullable(dart.fnType(async.FutureOr$(dart.nullable(core.String)), [core.List$(core.int), options$.RequestOptions, adapter.ResponseBody])), responseType: dart.nullable(options$.ResponseType), sendTimeout: dart.nullable(core.Duration), validateStatus: dart.nullable(dart.fnType(core.bool, [dart.nullable(core.int)]))}, {}),
    compose: dart.fnType(options$.RequestOptions, [options$.BaseOptions, core.String], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.nullable(core.Object), onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic)), sourceStackTrace: dart.nullable(core.StackTrace)}, {})
  }));
  dart.setGetterSignature(options$.Options, () => ({
    __proto__: dart.getGetters(options$.Options.__proto__),
    sendTimeout: dart.nullable(core.Duration),
    receiveTimeout: dart.nullable(core.Duration)
  }));
  dart.setSetterSignature(options$.Options, () => ({
    __proto__: dart.getSetters(options$.Options.__proto__),
    sendTimeout: dart.nullable(core.Duration),
    receiveTimeout: dart.nullable(core.Duration)
  }));
  dart.setLibraryUri(options$.Options, I[44]);
  dart.setFieldSignature(options$.Options, () => ({
    __proto__: dart.getFields(options$.Options.__proto__),
    method: dart.fieldType(dart.nullable(core.String)),
    headers: dart.fieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    preserveHeaderCase: dart.fieldType(dart.nullable(core.bool)),
    [_sendTimeout]: dart.fieldType(dart.nullable(core.Duration)),
    [_receiveTimeout]: dart.fieldType(dart.nullable(core.Duration)),
    contentType: dart.fieldType(dart.nullable(core.String)),
    responseType: dart.fieldType(dart.nullable(options$.ResponseType)),
    validateStatus: dart.fieldType(dart.nullable(dart.fnType(core.bool, [dart.nullable(core.int)]))),
    receiveDataWhenStatusError: dart.fieldType(dart.nullable(core.bool)),
    extra: dart.fieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    followRedirects: dart.fieldType(dart.nullable(core.bool)),
    maxRedirects: dart.fieldType(dart.nullable(core.int)),
    persistentConnection: dart.fieldType(dart.nullable(core.bool)),
    requestEncoder: dart.fieldType(dart.nullable(dart.fnType(async.FutureOr$(core.List$(core.int)), [core.String, options$.RequestOptions]))),
    responseDecoder: dart.fieldType(dart.nullable(dart.fnType(async.FutureOr$(dart.nullable(core.String)), [core.List$(core.int), options$.RequestOptions, adapter.ResponseBody]))),
    listFormat: dart.fieldType(dart.nullable(options$.ListFormat))
  }));
  var sourceStackTrace$ = dart.privateName(options$, "RequestOptions.sourceStackTrace");
  var data$1 = dart.privateName(options$, "RequestOptions.data");
  var path$ = dart.privateName(options$, "RequestOptions.path");
  var cancelToken$ = dart.privateName(options$, "RequestOptions.cancelToken");
  var onReceiveProgress$ = dart.privateName(options$, "RequestOptions.onReceiveProgress");
  var onSendProgress$ = dart.privateName(options$, "RequestOptions.onSendProgress");
  const _RequestConfig_OptionsMixin$36$ = class _RequestConfig_OptionsMixin extends options$._RequestConfig {};
  (_RequestConfig_OptionsMixin$36$.new = function(opts) {
    options$.OptionsMixin[dart.mixinNew].call(this);
    _RequestConfig_OptionsMixin$36$.__proto__.new.call(this, opts);
  }).prototype = _RequestConfig_OptionsMixin$36$.prototype;
  dart.applyMixin(_RequestConfig_OptionsMixin$36$, options$.OptionsMixin);
  options$.RequestOptions = class RequestOptions extends _RequestConfig_OptionsMixin$36$ {
    get sourceStackTrace() {
      return this[sourceStackTrace$];
    }
    set sourceStackTrace(value) {
      this[sourceStackTrace$] = value;
    }
    get data() {
      return this[data$1];
    }
    set data(value) {
      this[data$1] = value;
    }
    get path() {
      return this[path$];
    }
    set path(value) {
      this[path$] = value;
    }
    get cancelToken() {
      return this[cancelToken$];
    }
    set cancelToken(value) {
      this[cancelToken$] = value;
    }
    get onReceiveProgress() {
      return this[onReceiveProgress$];
    }
    set onReceiveProgress(value) {
      this[onReceiveProgress$] = value;
    }
    get onSendProgress() {
      return this[onSendProgress$];
    }
    set onSendProgress(value) {
      this[onSendProgress$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let path = opts && 'path' in opts ? opts.path : "";
      let data = opts && 'data' in opts ? opts.data : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let method = opts && 'method' in opts ? opts.method : null;
      let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
      let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
      let connectTimeout = opts && 'connectTimeout' in opts ? opts.connectTimeout : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let preserveHeaderCase = opts && 'preserveHeaderCase' in opts ? opts.preserveHeaderCase : null;
      let responseType = opts && 'responseType' in opts ? opts.responseType : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
      let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
      let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
      let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
      let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
      let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
      let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
      let setRequestContentTypeWhenNoPayload = opts && 'setRequestContentTypeWhenNoPayload' in opts ? opts.setRequestContentTypeWhenNoPayload : null;
      let sourceStackTrace = opts && 'sourceStackTrace' in opts ? opts.sourceStackTrace : null;
      return new options$.RequestOptions.new({path: path, data: data, onReceiveProgress: onReceiveProgress, onSendProgress: onSendProgress, cancelToken: cancelToken, method: method, sendTimeout: sendTimeout, receiveTimeout: receiveTimeout, connectTimeout: connectTimeout, queryParameters: queryParameters, baseUrl: baseUrl, extra: extra, headers: headers, preserveHeaderCase: preserveHeaderCase, responseType: responseType, contentType: contentType, validateStatus: validateStatus, receiveDataWhenStatusError: receiveDataWhenStatusError, followRedirects: followRedirects, maxRedirects: maxRedirects, persistentConnection: persistentConnection, requestEncoder: requestEncoder, responseDecoder: responseDecoder, listFormat: listFormat, setRequestContentTypeWhenNoPayload: setRequestContentTypeWhenNoPayload, sourceStackTrace: sourceStackTrace});
    }
    copyWith(opts) {
      let t24, t24$, t24$0, t24$1, t24$2, t24$3, t24$4, t24$5, t24$6, t24$7, t24$8, t24$9, t24$10, t24$11, t24$12, t24$13, t24$14, t24$15, t24$16, t24$17, t24$18, t24$19, t24$20;
      let method = opts && 'method' in opts ? opts.method : null;
      let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
      let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
      let connectTimeout = opts && 'connectTimeout' in opts ? opts.connectTimeout : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let path = opts && 'path' in opts ? opts.path : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let preserveHeaderCase = opts && 'preserveHeaderCase' in opts ? opts.preserveHeaderCase : null;
      let responseType = opts && 'responseType' in opts ? opts.responseType : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
      let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
      let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
      let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
      let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
      let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
      let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
      let setRequestContentTypeWhenNoPayload = opts && 'setRequestContentTypeWhenNoPayload' in opts ? opts.setRequestContentTypeWhenNoPayload : null;
      let contentTypeInHeader = headers != null && headers[$keys][$map](core.String, dart.fn(e => e[$toLowerCase](), T$.StringToString()))[$contains]("content-type");
      if (!!(contentType != null && contentTypeInHeader)) dart.assertFailed("You cannot set both contentType param and a content-type header", I[45], 583, 7, "!(contentType != null && contentTypeInHeader)");
      let ro = new options$.RequestOptions.new({method: (t24 = method, t24 == null ? this.method : t24), sendTimeout: (t24$ = sendTimeout, t24$ == null ? this.sendTimeout : t24$), receiveTimeout: (t24$0 = receiveTimeout, t24$0 == null ? this.receiveTimeout : t24$0), connectTimeout: (t24$1 = connectTimeout, t24$1 == null ? this.connectTimeout : t24$1), data: (t24$2 = data, t24$2 == null ? this.data : t24$2), path: (t24$3 = path, t24$3 == null ? this.path : t24$3), baseUrl: (t24$4 = baseUrl, t24$4 == null ? this.baseUrl : t24$4), queryParameters: (t24$5 = queryParameters, t24$5 == null ? T$.LinkedHashMapOfString$dynamic().from(this.queryParameters) : t24$5), onReceiveProgress: (t24$6 = onReceiveProgress, t24$6 == null ? this.onReceiveProgress : t24$6), onSendProgress: (t24$7 = onSendProgress, t24$7 == null ? this.onSendProgress : t24$7), cancelToken: (t24$8 = cancelToken, t24$8 == null ? this.cancelToken : t24$8), extra: (t24$9 = extra, t24$9 == null ? T$.LinkedHashMapOfString$dynamic().from(this.extra) : t24$9), headers: (t24$10 = headers, t24$10 == null ? T$.LinkedHashMapOfString$dynamic().from(this.headers) : t24$10), preserveHeaderCase: (t24$11 = preserveHeaderCase, t24$11 == null ? this.preserveHeaderCase : t24$11), responseType: (t24$12 = responseType, t24$12 == null ? this.responseType : t24$12), validateStatus: (t24$13 = validateStatus, t24$13 == null ? this.validateStatus : t24$13), receiveDataWhenStatusError: (t24$14 = receiveDataWhenStatusError, t24$14 == null ? this.receiveDataWhenStatusError : t24$14), followRedirects: (t24$15 = followRedirects, t24$15 == null ? this.followRedirects : t24$15), maxRedirects: (t24$16 = maxRedirects, t24$16 == null ? this.maxRedirects : t24$16), persistentConnection: (t24$17 = persistentConnection, t24$17 == null ? this.persistentConnection : t24$17), requestEncoder: (t24$18 = requestEncoder, t24$18 == null ? this.requestEncoder : t24$18), responseDecoder: (t24$19 = responseDecoder, t24$19 == null ? this.responseDecoder : t24$19), listFormat: (t24$20 = listFormat, t24$20 == null ? this.listFormat : t24$20), sourceStackTrace: this.sourceStackTrace});
      if (contentType != null) {
        ro.headers[$remove]("content-type");
        ro.contentType = contentType;
      } else if (!contentTypeInHeader) {
        ro.contentType = this.contentType;
      }
      return ro;
    }
    get uri() {
      let url = this.path;
      if (!url[$startsWith](core.RegExp.new("https?:"))) {
        url = this.baseUrl + url;
        let s = url[$split](":/");
        if (s[$length] === 2) {
          url = s[$_get](0) + ":/" + s[$_get](1)[$replaceAll]("//", "/");
        }
      }
      let query = transformer.Transformer.urlEncodeQueryMap(this.queryParameters, this.listFormat);
      if (query[$isNotEmpty]) {
        url = url + ((url[$contains]("?") ? "&" : "?") + query);
      }
      return core.Uri.parse(url).normalizePath();
    }
  };
  (options$.RequestOptions.new = function(opts) {
    let t24, t24$, t24$0;
    let path = opts && 'path' in opts ? opts.path : "";
    let data = opts && 'data' in opts ? opts.data : null;
    let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
    let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
    let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
    let method = opts && 'method' in opts ? opts.method : null;
    let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
    let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
    let connectTimeout = opts && 'connectTimeout' in opts ? opts.connectTimeout : null;
    let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
    let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : null;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let preserveHeaderCase = opts && 'preserveHeaderCase' in opts ? opts.preserveHeaderCase : null;
    let responseType = opts && 'responseType' in opts ? opts.responseType : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
    let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
    let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
    let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
    let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
    let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
    let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
    let setRequestContentTypeWhenNoPayload = opts && 'setRequestContentTypeWhenNoPayload' in opts ? opts.setRequestContentTypeWhenNoPayload : null;
    let sourceStackTrace = opts && 'sourceStackTrace' in opts ? opts.sourceStackTrace : null;
    this[sourceStackTrace$] = null;
    this[path$] = path;
    this[data$1] = data;
    this[onReceiveProgress$] = onReceiveProgress;
    this[onSendProgress$] = onSendProgress;
    this[cancelToken$] = cancelToken;
    if (!(connectTimeout == null || !connectTimeout.isNegative)) dart.assertFailed(null, I[45], 524, 16, "connectTimeout == null || !connectTimeout.isNegative");
    options$.RequestOptions.__proto__.new.call(this, {method: method, sendTimeout: sendTimeout, receiveTimeout: receiveTimeout, extra: extra, headers: headers, preserveHeaderCase: preserveHeaderCase, responseType: responseType, contentType: contentType, validateStatus: validateStatus, receiveDataWhenStatusError: receiveDataWhenStatusError, followRedirects: followRedirects, maxRedirects: maxRedirects, persistentConnection: persistentConnection, requestEncoder: requestEncoder, responseDecoder: responseDecoder, listFormat: listFormat});
    this.sourceStackTrace = (t24 = sourceStackTrace, t24 == null ? core.StackTrace.current : t24);
    this.queryParameters = (t24$ = queryParameters, t24$ == null ? new (T$.IdentityMapOfString$dynamic()).new() : t24$);
    this.baseUrl = (t24$0 = baseUrl, t24$0 == null ? "" : t24$0);
    this.connectTimeout = connectTimeout;
  }).prototype = options$.RequestOptions.prototype;
  dart.addTypeTests(options$.RequestOptions);
  dart.addTypeCaches(options$.RequestOptions);
  dart.setMethodSignature(options$.RequestOptions, () => ({
    __proto__: dart.getMethods(options$.RequestOptions.__proto__),
    copyWith: dart.fnType(options$.RequestOptions, [], {baseUrl: dart.nullable(core.String), cancelToken: dart.nullable(cancel_token.CancelToken), connectTimeout: dart.nullable(core.Duration), contentType: dart.nullable(core.String), data: dart.dynamic, extra: dart.nullable(core.Map$(core.String, dart.dynamic)), followRedirects: dart.nullable(core.bool), headers: dart.nullable(core.Map$(core.String, dart.dynamic)), listFormat: dart.nullable(options$.ListFormat), maxRedirects: dart.nullable(core.int), method: dart.nullable(core.String), onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), path: dart.nullable(core.String), persistentConnection: dart.nullable(core.bool), preserveHeaderCase: dart.nullable(core.bool), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic)), receiveDataWhenStatusError: dart.nullable(core.bool), receiveTimeout: dart.nullable(core.Duration), requestEncoder: dart.nullable(dart.fnType(async.FutureOr$(core.List$(core.int)), [core.String, options$.RequestOptions])), responseDecoder: dart.nullable(dart.fnType(async.FutureOr$(dart.nullable(core.String)), [core.List$(core.int), options$.RequestOptions, adapter.ResponseBody])), responseType: dart.nullable(options$.ResponseType), sendTimeout: dart.nullable(core.Duration), setRequestContentTypeWhenNoPayload: dart.nullable(core.bool), validateStatus: dart.nullable(dart.fnType(core.bool, [dart.nullable(core.int)]))}, {})
  }));
  dart.setGetterSignature(options$.RequestOptions, () => ({
    __proto__: dart.getGetters(options$.RequestOptions.__proto__),
    uri: core.Uri
  }));
  dart.setLibraryUri(options$.RequestOptions, I[44]);
  dart.setFieldSignature(options$.RequestOptions, () => ({
    __proto__: dart.getFields(options$.RequestOptions.__proto__),
    sourceStackTrace: dart.fieldType(dart.nullable(core.StackTrace)),
    data: dart.fieldType(dart.dynamic),
    path: dart.fieldType(core.String),
    cancelToken: dart.fieldType(dart.nullable(cancel_token.CancelToken)),
    onReceiveProgress: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.int, core.int]))),
    onSendProgress: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.int, core.int])))
  }));
  options$._defaultValidateStatus = function _defaultValidateStatus(status) {
    return status != null && dart.notNull(status) >= 200 && dart.notNull(status) < 300;
  };
  var value$ = dart.privateName(parameter, "ListParam.value");
  var format$ = dart.privateName(parameter, "ListParam.format");
  const _is_ListParam_default = Symbol('_is_ListParam_default');
  parameter.ListParam$ = dart.generic(T => {
    var __t$ListOfT = () => (__t$ListOfT = dart.constFn(core.List$(T)))();
    var __t$ListNOfT = () => (__t$ListNOfT = dart.constFn(dart.nullable(__t$ListOfT())))();
    var __t$ListParamOfT = () => (__t$ListParamOfT = dart.constFn(parameter.ListParam$(T)))();
    class ListParam extends core.Object {
      get value() {
        return this[value$];
      }
      set value(value) {
        super.value = value;
      }
      get format() {
        return this[format$];
      }
      set format(value) {
        super.format = value;
      }
      static ['_#new#tearOff'](T, value, format) {
        return new (parameter.ListParam$(T)).new(value, format);
      }
      copyWith(opts) {
        let t24, t24$;
        let value = opts && 'value' in opts ? opts.value : null;
        __t$ListNOfT().as(value);
        let format = opts && 'format' in opts ? opts.format : null;
        return new (__t$ListParamOfT()).new((t24 = value, t24 == null ? this.value : t24), (t24$ = format, t24$ == null ? this.format : t24$));
      }
      toString() {
        return "ListParam{value: " + dart.str(this.value) + ", format: " + dart.str(this.format) + "}";
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || parameter.ListParam.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && this.value[$_equals](other.value) && this.format === other.format;
      }
      get hashCode() {
        return (this.value[$hashCode] ^ this.format[$hashCode]) >>> 0;
      }
    }
    (ListParam.new = function(value, format) {
      this[value$] = value;
      this[format$] = format;
      ;
    }).prototype = ListParam.prototype;
    dart.addTypeTests(ListParam);
    ListParam.prototype[_is_ListParam_default] = true;
    dart.addTypeCaches(ListParam);
    dart.setMethodSignature(ListParam, () => ({
      __proto__: dart.getMethods(ListParam.__proto__),
      copyWith: dart.fnType(parameter.ListParam$(T), [], {format: dart.nullable(options$.ListFormat), value: dart.nullable(core.Object)}, {})
    }));
    dart.setLibraryUri(ListParam, I[46]);
    dart.setFieldSignature(ListParam, () => ({
      __proto__: dart.getFields(ListParam.__proto__),
      value: dart.finalFieldType(core.List$(T)),
      format: dart.finalFieldType(options$.ListFormat)
    }));
    dart.defineExtensionMethods(ListParam, ['toString', '_equals']);
    dart.defineExtensionAccessors(ListParam, ['hashCode']);
    return ListParam;
  });
  parameter.ListParam = parameter.ListParam$();
  dart.addTypeTests(parameter.ListParam, _is_ListParam_default);
  var statusCode$0 = dart.privateName(redirect_record, "RedirectRecord.statusCode");
  var method$0 = dart.privateName(redirect_record, "RedirectRecord.method");
  var location$ = dart.privateName(redirect_record, "RedirectRecord.location");
  redirect_record.RedirectRecord = class RedirectRecord extends core.Object {
    get statusCode() {
      return this[statusCode$0];
    }
    set statusCode(value) {
      super.statusCode = value;
    }
    get method() {
      return this[method$0];
    }
    set method(value) {
      super.method = value;
    }
    get location() {
      return this[location$];
    }
    set location(value) {
      super.location = value;
    }
    static ['_#new#tearOff'](statusCode, method, location) {
      return new redirect_record.RedirectRecord.new(statusCode, method, location);
    }
    toString() {
      return "RedirectRecord" + "{statusCode: " + dart.str(this.statusCode) + ", method: " + this.method + ", location: " + dart.str(this.location) + "}";
    }
  };
  (redirect_record.RedirectRecord.new = function(statusCode, method, location) {
    this[statusCode$0] = statusCode;
    this[method$0] = method;
    this[location$] = location;
    ;
  }).prototype = redirect_record.RedirectRecord.prototype;
  dart.addTypeTests(redirect_record.RedirectRecord);
  dart.addTypeCaches(redirect_record.RedirectRecord);
  dart.setLibraryUri(redirect_record.RedirectRecord, I[47]);
  dart.setFieldSignature(redirect_record.RedirectRecord, () => ({
    __proto__: dart.getFields(redirect_record.RedirectRecord.__proto__),
    statusCode: dart.finalFieldType(core.int),
    method: dart.finalFieldType(core.String),
    location: dart.finalFieldType(core.Uri)
  }));
  dart.defineExtensionMethods(redirect_record.RedirectRecord, ['toString']);
  var data$2 = dart.privateName(response$, "Response.data");
  var requestOptions$0 = dart.privateName(response$, "Response.requestOptions");
  var statusCode$1 = dart.privateName(response$, "Response.statusCode");
  var statusMessage$0 = dart.privateName(response$, "Response.statusMessage");
  var headers$3 = dart.privateName(response$, "Response.headers");
  var isRedirect$0 = dart.privateName(response$, "Response.isRedirect");
  var redirects$0 = dart.privateName(response$, "Response.redirects");
  var extra$0 = dart.privateName(response$, "Response.extra");
  const _is_Response_default = Symbol('_is_Response_default');
  response$.Response$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    class Response extends core.Object {
      get data() {
        return this[data$2];
      }
      set data(value) {
        this[data$2] = __t$TN().as(value);
      }
      get requestOptions() {
        return this[requestOptions$0];
      }
      set requestOptions(value) {
        this[requestOptions$0] = value;
      }
      get statusCode() {
        return this[statusCode$1];
      }
      set statusCode(value) {
        this[statusCode$1] = value;
      }
      get statusMessage() {
        return this[statusMessage$0];
      }
      set statusMessage(value) {
        this[statusMessage$0] = value;
      }
      get headers() {
        return this[headers$3];
      }
      set headers(value) {
        this[headers$3] = value;
      }
      get isRedirect() {
        return this[isRedirect$0];
      }
      set isRedirect(value) {
        this[isRedirect$0] = value;
      }
      get redirects() {
        return this[redirects$0];
      }
      set redirects(value) {
        this[redirects$0] = value;
      }
      get extra() {
        return this[extra$0];
      }
      set extra(value) {
        this[extra$0] = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
        let statusCode = opts && 'statusCode' in opts ? opts.statusCode : null;
        let statusMessage = opts && 'statusMessage' in opts ? opts.statusMessage : null;
        let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
        let redirects = opts && 'redirects' in opts ? opts.redirects : C[36] || CT.C36;
        let extra = opts && 'extra' in opts ? opts.extra : null;
        let headers = opts && 'headers' in opts ? opts.headers : null;
        return new (response$.Response$(T)).new({data: data, requestOptions: requestOptions, statusCode: statusCode, statusMessage: statusMessage, isRedirect: isRedirect, redirects: redirects, extra: extra, headers: headers});
      }
      get realUri() {
        return this.redirects[$isNotEmpty] ? this.redirects[$last].location : this.requestOptions.uri;
      }
      toString() {
        if (core.Map.is(this.data)) {
          return convert.json.encode(this.data);
        }
        return dart.toString(this.data);
      }
    }
    (Response.new = function(opts) {
      let t24, t24$;
      let data = opts && 'data' in opts ? opts.data : null;
      let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
      let statusCode = opts && 'statusCode' in opts ? opts.statusCode : null;
      let statusMessage = opts && 'statusMessage' in opts ? opts.statusMessage : null;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
      let redirects = opts && 'redirects' in opts ? opts.redirects : C[36] || CT.C36;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      this[data$2] = data;
      this[requestOptions$0] = requestOptions;
      this[statusCode$1] = statusCode;
      this[statusMessage$0] = statusMessage;
      this[isRedirect$0] = isRedirect;
      this[redirects$0] = redirects;
      this[headers$3] = (t24 = headers, t24 == null ? new headers$.Headers.new({preserveHeaderCase: requestOptions.preserveHeaderCase}) : t24);
      this[extra$0] = (t24$ = extra, t24$ == null ? new (T$.IdentityMapOfString$dynamic()).new() : t24$);
      ;
    }).prototype = Response.prototype;
    dart.addTypeTests(Response);
    Response.prototype[_is_Response_default] = true;
    dart.addTypeCaches(Response);
    dart.setGetterSignature(Response, () => ({
      __proto__: dart.getGetters(Response.__proto__),
      realUri: core.Uri
    }));
    dart.setLibraryUri(Response, I[48]);
    dart.setFieldSignature(Response, () => ({
      __proto__: dart.getFields(Response.__proto__),
      data: dart.fieldType(dart.nullable(T)),
      requestOptions: dart.fieldType(options$.RequestOptions),
      statusCode: dart.fieldType(dart.nullable(core.int)),
      statusMessage: dart.fieldType(dart.nullable(core.String)),
      headers: dart.fieldType(headers$.Headers),
      isRedirect: dart.fieldType(core.bool),
      redirects: dart.fieldType(core.List$(redirect_record.RedirectRecord)),
      extra: dart.fieldType(core.Map$(core.String, dart.dynamic))
    }));
    dart.defineExtensionMethods(Response, ['toString']);
    return Response;
  });
  response$.Response = response$.Response$();
  dart.addTypeTests(response$.Response, _is_Response_default);
  transformer.Transformer = class Transformer extends core.Object {
    static urlEncodeMap(map, listFormat = C[22] || CT.C22) {
      return utils.encodeMap(map, dart.fn((key, value) => {
        if (value == null) return key;
        return key + "=" + core.Uri.encodeQueryComponent(dart.toString(value));
      }, T$.StringAndObjectNToString()), {listFormat: listFormat});
    }
    static urlEncodeQueryMap(map, listFormat = C[22] || CT.C22) {
      return utils.encodeMap(map, dart.fn((key, value) => {
        if (value == null) return key;
        return key + "=" + dart.str(value);
      }, T$.StringAndObjectNToString()), {listFormat: listFormat, isQuery: true});
    }
    static isJsonMimeType(contentType) {
      if (contentType == null) return false;
      let mediaType = media_type.MediaType.parse(contentType);
      return mediaType.mimeType === "application/json" || mediaType.mimeType === "text/json" || mediaType.subtype[$endsWith]("+json");
    }
  };
  (transformer.Transformer.new = function() {
    ;
  }).prototype = transformer.Transformer.prototype;
  dart.addTypeTests(transformer.Transformer);
  dart.addTypeCaches(transformer.Transformer);
  dart.setStaticMethodSignature(transformer.Transformer, () => ['urlEncodeMap', 'urlEncodeQueryMap', 'isJsonMimeType']);
  dart.setLibraryUri(transformer.Transformer, I[49]);
  var jsonDecodeCallback$ = dart.privateName(sync_transformer, "SyncTransformer.jsonDecodeCallback");
  var jsonEncodeCallback$ = dart.privateName(sync_transformer, "SyncTransformer.jsonEncodeCallback");
  sync_transformer.SyncTransformer = class SyncTransformer extends transformer.Transformer {
    get jsonDecodeCallback() {
      return this[jsonDecodeCallback$];
    }
    set jsonDecodeCallback(value) {
      this[jsonDecodeCallback$] = value;
    }
    get jsonEncodeCallback() {
      return this[jsonEncodeCallback$];
    }
    set jsonEncodeCallback(value) {
      this[jsonEncodeCallback$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let jsonDecodeCallback = opts && 'jsonDecodeCallback' in opts ? opts.jsonDecodeCallback : C[38] || CT.C38;
      let jsonEncodeCallback = opts && 'jsonEncodeCallback' in opts ? opts.jsonEncodeCallback : C[39] || CT.C39;
      return new sync_transformer.SyncTransformer.new({jsonDecodeCallback: jsonDecodeCallback, jsonEncodeCallback: jsonEncodeCallback});
    }
    transformRequest(options) {
      return async.async(core.String, (function* transformRequest() {
        let t24, t24$;
        let data = core.Object.as((t24 = options.data, t24 == null ? "" : t24));
        if (!(typeof data == 'string') && transformer.Transformer.isJsonMimeType(options.contentType)) {
          t24$ = data;
          return this.jsonEncodeCallback(t24$);
        } else if (core.Map.is(data)) {
          if (T$.MapOfString$dynamic().is(data)) {
            return transformer.Transformer.urlEncodeMap(data, options.listFormat);
          }
          utils.debugLog("The data is a type of `Map` (" + dart.str(data[$runtimeType]) + "), " + "but the transformer can only encode `Map<String, dynamic>`.\n" + "If you are writing maps using `{}`, " + "consider writing `<String, dynamic>{}`.", core.StackTrace.current);
          return data[$toString]();
        } else {
          return data[$toString]();
        }
      }).bind(this));
    }
    transformResponse(options, responseBody) {
      return async.async(dart.dynamic, (function* transformResponse() {
        let t24, t24$, t24$0;
        let responseType = options.responseType;
        if (responseType === options$.ResponseType.stream) {
          return responseBody;
        }
        let chunks = (yield responseBody.stream.toList());
        let responseBytes = _native_typed_data.NativeUint8List.fromList(chunks[$expand](core.int, dart.fn(c => c, T$.Uint8ListToUint8List()))[$toList]());
        if (responseType === options$.ResponseType.bytes) {
          return responseBytes;
        }
        let isJsonContent = transformer.Transformer.isJsonMimeType((t24 = responseBody.headers[$_get]("content-type"), t24 == null ? null : t24[$first]));
        let response = null;
        if (options.responseDecoder != null) {
          let decodeResponse = dart.nullCheck(options.responseDecoder)(responseBytes, options, (t24$ = responseBody, (() => {
            t24$.stream = new (T$._EmptyStreamOfUint8List()).new();
            return t24$;
          })()));
          if (async.Future.is(decodeResponse)) {
            response = (yield decodeResponse);
          } else {
            response = decodeResponse;
          }
        } else if (!isJsonContent || responseBytes[$isNotEmpty]) {
          response = convert.utf8.decode(responseBytes, {allowMalformed: true});
        } else {
          response = null;
        }
        if (response != null && response[$isNotEmpty] && responseType === options$.ResponseType.json && isJsonContent) {
          t24$0 = response;
          return this.jsonDecodeCallback(t24$0);
        }
        return response;
      }).bind(this));
    }
  };
  (sync_transformer.SyncTransformer.new = function(opts) {
    let jsonDecodeCallback = opts && 'jsonDecodeCallback' in opts ? opts.jsonDecodeCallback : C[38] || CT.C38;
    let jsonEncodeCallback = opts && 'jsonEncodeCallback' in opts ? opts.jsonEncodeCallback : C[39] || CT.C39;
    this[jsonDecodeCallback$] = jsonDecodeCallback;
    this[jsonEncodeCallback$] = jsonEncodeCallback;
    ;
  }).prototype = sync_transformer.SyncTransformer.prototype;
  dart.addTypeTests(sync_transformer.SyncTransformer);
  dart.addTypeCaches(sync_transformer.SyncTransformer);
  dart.setMethodSignature(sync_transformer.SyncTransformer, () => ({
    __proto__: dart.getMethods(sync_transformer.SyncTransformer.__proto__),
    transformRequest: dart.fnType(async.Future$(core.String), [options$.RequestOptions]),
    transformResponse: dart.fnType(async.Future, [options$.RequestOptions, adapter.ResponseBody])
  }));
  dart.setLibraryUri(sync_transformer.SyncTransformer, I[50]);
  dart.setFieldSignature(sync_transformer.SyncTransformer, () => ({
    __proto__: dart.getFields(sync_transformer.SyncTransformer.__proto__),
    jsonDecodeCallback: dart.fieldType(dart.fnType(dart.dynamic, [core.String])),
    jsonEncodeCallback: dart.fieldType(dart.fnType(async.FutureOr$(core.String), [core.Object]))
  }));
  background_transformer.BackgroundTransformer = class BackgroundTransformer extends sync_transformer.SyncTransformer {
    static ['_#new#tearOff']() {
      return new background_transformer.BackgroundTransformer.new();
    }
  };
  (background_transformer.BackgroundTransformer.new = function() {
    background_transformer.BackgroundTransformer.__proto__.new.call(this, {jsonDecodeCallback: C[37] || CT.C37});
    ;
  }).prototype = background_transformer.BackgroundTransformer.prototype;
  dart.addTypeTests(background_transformer.BackgroundTransformer);
  dart.addTypeCaches(background_transformer.BackgroundTransformer);
  dart.setLibraryUri(background_transformer.BackgroundTransformer, I[51]);
  background_transformer._decodeJson = function _decodeJson(text) {
    if (text[$codeUnits][$length] < 50 * 1024) {
      return convert.jsonDecode(text);
    }
    return compute.compute(core.String, dart.dynamic, C[38] || CT.C38, text);
  };
  var _data$ = dart.privateName(shared_preferences_platform_interface, "_data");
  shared_preferences_platform_interface.InMemorySharedPreferencesStore = class InMemorySharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static ['_#empty#tearOff']() {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty();
    }
    static ['_#withData#tearOff'](data) {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(data);
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, (function* clearWithParameters() {
        let filter = parameters.filter;
        if (filter.allowList != null) {
          this[_data$][$removeWhere](dart.fn((key, _) => key[$startsWith](filter.prefix) && dart.nullCheck(filter.allowList).contains(key), T$.StringAndObjectTobool()));
        } else {
          this[_data$][$removeWhere](dart.fn((key, _) => key[$startsWith](filter.prefix), T$.StringAndObjectTobool()));
        }
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T$.MapOfString$Object(), (function* getAll() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    getAllWithPrefix(prefix) {
      return async.async(T$.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T$.MapOfString$Object(), (function* getAllWithParameters() {
        let filter = parameters.filter;
        let preferences = T$.LinkedHashMapOfString$Object().from(this[_data$]);
        preferences[$removeWhere](dart.fn((key, _) => !key[$startsWith](filter.prefix) || filter.allowList != null && !dart.nullCheck(filter.allowList).contains(key), T$.StringAndObjectTobool()));
        return preferences;
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, (function* remove() {
        this[_data$][$remove](key);
        return true;
      }).bind(this));
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        this[_data$][$_set](key, value);
        return true;
      }).bind(this));
    }
  };
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty = function() {
    this[_data$] = new (T$.IdentityMapOfString$Object()).new();
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData = function(data) {
    this[_data$] = T$.LinkedHashMapOfString$Object().from(data);
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.addTypeCaches(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.setMethodSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getMethods(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object])
  }));
  dart.setLibraryUri(shared_preferences_platform_interface.InMemorySharedPreferencesStore, I[10]);
  dart.setFieldSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getFields(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    [_data$]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  dart.setStaticFieldSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ['_defaultPrefix']);
  dart.defineLazy(shared_preferences_platform_interface.InMemorySharedPreferencesStore, {
    /*shared_preferences_platform_interface.InMemorySharedPreferencesStore._defaultPrefix*/get _defaultPrefix() {
      return "flutter.";
    }
  }, false);
  var prefix$ = dart.privateName(types, "PreferencesFilter.prefix");
  var allowList$ = dart.privateName(types, "PreferencesFilter.allowList");
  types.PreferencesFilter = class PreferencesFilter extends core.Object {
    get prefix() {
      return this[prefix$];
    }
    set prefix(value) {
      this[prefix$] = value;
    }
    get allowList() {
      return this[allowList$];
    }
    set allowList(value) {
      this[allowList$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return new types.PreferencesFilter.new({prefix: prefix, allowList: allowList});
    }
  };
  (types.PreferencesFilter.new = function(opts) {
    let prefix = opts && 'prefix' in opts ? opts.prefix : null;
    let allowList = opts && 'allowList' in opts ? opts.allowList : null;
    this[prefix$] = prefix;
    this[allowList$] = allowList;
    ;
  }).prototype = types.PreferencesFilter.prototype;
  dart.addTypeTests(types.PreferencesFilter);
  dart.addTypeCaches(types.PreferencesFilter);
  dart.setLibraryUri(types.PreferencesFilter, I[52]);
  dart.setFieldSignature(types.PreferencesFilter, () => ({
    __proto__: dart.getFields(types.PreferencesFilter.__proto__),
    prefix: dart.fieldType(core.String),
    allowList: dart.fieldType(dart.nullable(core.Set$(core.String)))
  }));
  var filter$ = dart.privateName(types, "GetAllParameters.filter");
  types.GetAllParameters = class GetAllParameters extends core.Object {
    get filter() {
      return this[filter$];
    }
    set filter(value) {
      this[filter$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return new types.GetAllParameters.new({filter: filter});
    }
  };
  (types.GetAllParameters.new = function(opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    this[filter$] = filter;
    ;
  }).prototype = types.GetAllParameters.prototype;
  dart.addTypeTests(types.GetAllParameters);
  dart.addTypeCaches(types.GetAllParameters);
  dart.setLibraryUri(types.GetAllParameters, I[52]);
  dart.setFieldSignature(types.GetAllParameters, () => ({
    __proto__: dart.getFields(types.GetAllParameters.__proto__),
    filter: dart.fieldType(types.PreferencesFilter)
  }));
  var filter$0 = dart.privateName(types, "ClearParameters.filter");
  types.ClearParameters = class ClearParameters extends core.Object {
    get filter() {
      return this[filter$0];
    }
    set filter(value) {
      this[filter$0] = value;
    }
    static ['_#new#tearOff'](opts) {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return new types.ClearParameters.new({filter: filter});
    }
  };
  (types.ClearParameters.new = function(opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    this[filter$0] = filter;
    ;
  }).prototype = types.ClearParameters.prototype;
  dart.addTypeTests(types.ClearParameters);
  dart.addTypeCaches(types.ClearParameters);
  dart.setLibraryUri(types.ClearParameters, I[52]);
  dart.setFieldSignature(types.ClearParameters, () => ({
    __proto__: dart.getFields(types.ClearParameters.__proto__),
    filter: dart.fieldType(types.PreferencesFilter)
  }));
  const _is_BlocEventSink_default = Symbol('_is_BlocEventSink_default');
  bloc$.BlocEventSink$ = dart.generic(Event => {
    class BlocEventSink extends core.Object {}
    (BlocEventSink.new = function() {
      ;
    }).prototype = BlocEventSink.prototype;
    dart.addTypeTests(BlocEventSink);
    BlocEventSink.prototype[_is_BlocEventSink_default] = true;
    dart.addTypeCaches(BlocEventSink);
    BlocEventSink[dart.implements] = () => [bloc$.ErrorSink];
    dart.setLibraryUri(BlocEventSink, I[3]);
    return BlocEventSink;
  });
  bloc$.BlocEventSink = bloc$.BlocEventSink$();
  dart.addTypeTests(bloc$.BlocEventSink, _is_BlocEventSink_default);
  var isType$ = dart.privateName(bloc$, "_Handler.isType");
  var type$1 = dart.privateName(bloc$, "_Handler.type");
  bloc$._Handler = class _Handler extends core.Object {
    get isType() {
      return this[isType$];
    }
    set isType(value) {
      super.isType = value;
    }
    get type() {
      return this[type$1];
    }
    set type(value) {
      super.type = value;
    }
    static ['_#new#tearOff'](opts) {
      let isType = opts && 'isType' in opts ? opts.isType : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new bloc$._Handler.new({isType: isType, type: type});
    }
  };
  (bloc$._Handler.new = function(opts) {
    let isType = opts && 'isType' in opts ? opts.isType : null;
    let type = opts && 'type' in opts ? opts.type : null;
    this[isType$] = isType;
    this[type$1] = type;
    ;
  }).prototype = bloc$._Handler.prototype;
  dart.addTypeTests(bloc$._Handler);
  dart.addTypeCaches(bloc$._Handler);
  dart.setLibraryUri(bloc$._Handler, I[3]);
  dart.setFieldSignature(bloc$._Handler, () => ({
    __proto__: dart.getFields(bloc$._Handler.__proto__),
    isType: dart.finalFieldType(dart.fnType(core.bool, [dart.dynamic])),
    type: dart.finalFieldType(core.Type)
  }));
  bloc_observer.BlocObserver = class BlocObserver extends core.Object {
    onCreate(bloc) {
    }
    onEvent(bloc, event) {
    }
    onChange(bloc, change) {
    }
    onTransition(bloc, transition) {
    }
    onError(bloc, error, stackTrace) {
    }
    onClose(bloc) {
    }
  };
  (bloc_observer.BlocObserver.new = function() {
    ;
  }).prototype = bloc_observer.BlocObserver.prototype;
  dart.addTypeTests(bloc_observer.BlocObserver);
  dart.addTypeCaches(bloc_observer.BlocObserver);
  dart.setMethodSignature(bloc_observer.BlocObserver, () => ({
    __proto__: dart.getMethods(bloc_observer.BlocObserver.__proto__),
    onCreate: dart.fnType(dart.void, [bloc$.BlocBase]),
    onEvent: dart.fnType(dart.void, [bloc$.Bloc, dart.nullable(core.Object)]),
    onChange: dart.fnType(dart.void, [bloc$.BlocBase, change.Change]),
    onTransition: dart.fnType(dart.void, [bloc$.Bloc, transition.Transition]),
    onError: dart.fnType(dart.void, [bloc$.BlocBase, core.Object, core.StackTrace]),
    onClose: dart.fnType(dart.void, [bloc$.BlocBase])
  }));
  dart.setLibraryUri(bloc_observer.BlocObserver, I[53]);
  bloc$._DefaultBlocObserver = class _DefaultBlocObserver extends bloc_observer.BlocObserver {
    static ['_#new#tearOff']() {
      return new bloc$._DefaultBlocObserver.new();
    }
  };
  (bloc$._DefaultBlocObserver.new = function() {
    bloc$._DefaultBlocObserver.__proto__.new.call(this);
    ;
  }).prototype = bloc$._DefaultBlocObserver.prototype;
  dart.addTypeTests(bloc$._DefaultBlocObserver);
  dart.addTypeCaches(bloc$._DefaultBlocObserver);
  dart.setLibraryUri(bloc$._DefaultBlocObserver, I[3]);
  const _is__FlatMapStreamTransformer_default = Symbol('_is__FlatMapStreamTransformer_default');
  bloc$._FlatMapStreamTransformer$ = dart.generic(T => {
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    var __t$StreamOfStreamOfT = () => (__t$StreamOfStreamOfT = dart.constFn(async.Stream$(__t$StreamOfT())))();
    var __t$StreamControllerOfT = () => (__t$StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    var __t$StreamOfTTovoid = () => (__t$StreamOfTTovoid = dart.constFn(dart.fnType(dart.void, [__t$StreamOfT()])))();
    class _FlatMapStreamTransformer extends async.StreamTransformerBase$(async.Stream$(T), T) {
      static ['_#new#tearOff'](T) {
        return new (bloc$._FlatMapStreamTransformer$(T)).new();
      }
      bind(stream) {
        __t$StreamOfStreamOfT().as(stream);
        let controller = __t$StreamControllerOfT().broadcast({sync: true});
        controller.onListen = dart.fn(() => {
          let subscriptions = T$.JSArrayOfStreamSubscription().of([]);
          let outerSubscription = stream.listen(dart.fn(inner => {
            let subscription = inner.listen(__t$TTovoid().as(dart.bind(controller, 'add')), {onError: dart.bind(controller, 'addError')});
            subscription.onDone(dart.fn(() => {
              subscriptions[$remove](subscription);
              if (subscriptions[$isEmpty]) controller.close();
            }, T$.VoidTovoid()));
            subscriptions[$add](subscription);
          }, __t$StreamOfTTovoid()), {onError: dart.bind(controller, 'addError')});
          outerSubscription.onDone(dart.fn(() => {
            subscriptions[$remove](outerSubscription);
            if (subscriptions[$isEmpty]) controller.close();
          }, T$.VoidTovoid()));
          subscriptions[$add](outerSubscription);
          controller.onCancel = dart.fn(() => {
            if (subscriptions[$isEmpty]) return null;
            let cancels = (() => {
              let t24 = T$.JSArrayOfFutureOfvoid().of([]);
              for (let s of subscriptions)
                t24.push(s.cancel());
              return t24;
            })();
            return async.Future.wait(dart.void, cancels).then(dart.void, dart.fn(_ => {
            }, T$.ListOfvoidToNull()));
          }, T$.VoidToFutureNOfvoid());
        }, T$.VoidTovoid());
        return controller.stream;
      }
    }
    (_FlatMapStreamTransformer.new = function() {
      _FlatMapStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = _FlatMapStreamTransformer.prototype;
    dart.addTypeTests(_FlatMapStreamTransformer);
    _FlatMapStreamTransformer.prototype[_is__FlatMapStreamTransformer_default] = true;
    dart.addTypeCaches(_FlatMapStreamTransformer);
    dart.setMethodSignature(_FlatMapStreamTransformer, () => ({
      __proto__: dart.getMethods(_FlatMapStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_FlatMapStreamTransformer, I[3]);
    return _FlatMapStreamTransformer;
  });
  bloc$._FlatMapStreamTransformer = bloc$._FlatMapStreamTransformer$();
  dart.addTypeTests(bloc$._FlatMapStreamTransformer, _is__FlatMapStreamTransformer_default);
  const _is_Streamable_default = Symbol('_is_Streamable_default');
  bloc$.Streamable$ = dart.generic(State => {
    class Streamable extends core.Object {}
    (Streamable.new = function() {
      ;
    }).prototype = Streamable.prototype;
    dart.addTypeTests(Streamable);
    Streamable.prototype[_is_Streamable_default] = true;
    dart.addTypeCaches(Streamable);
    dart.setLibraryUri(Streamable, I[3]);
    return Streamable;
  });
  bloc$.Streamable = bloc$.Streamable$();
  dart.addTypeTests(bloc$.Streamable, _is_Streamable_default);
  const _is_StateStreamable_default = Symbol('_is_StateStreamable_default');
  bloc$.StateStreamable$ = dart.generic(State => {
    class StateStreamable extends core.Object {}
    (StateStreamable.new = function() {
      ;
    }).prototype = StateStreamable.prototype;
    dart.addTypeTests(StateStreamable);
    StateStreamable.prototype[_is_StateStreamable_default] = true;
    dart.addTypeCaches(StateStreamable);
    StateStreamable[dart.implements] = () => [bloc$.Streamable$(State)];
    dart.setLibraryUri(StateStreamable, I[3]);
    return StateStreamable;
  });
  bloc$.StateStreamable = bloc$.StateStreamable$();
  dart.addTypeTests(bloc$.StateStreamable, _is_StateStreamable_default);
  const _is_StateStreamableSource_default = Symbol('_is_StateStreamableSource_default');
  bloc$.StateStreamableSource$ = dart.generic(State => {
    class StateStreamableSource extends core.Object {}
    (StateStreamableSource.new = function() {
      ;
    }).prototype = StateStreamableSource.prototype;
    dart.addTypeTests(StateStreamableSource);
    StateStreamableSource.prototype[_is_StateStreamableSource_default] = true;
    dart.addTypeCaches(StateStreamableSource);
    StateStreamableSource[dart.implements] = () => [bloc$.StateStreamable$(State), bloc$.Closable];
    dart.setLibraryUri(StateStreamableSource, I[3]);
    return StateStreamableSource;
  });
  bloc$.StateStreamableSource = bloc$.StateStreamableSource$();
  dart.addTypeTests(bloc$.StateStreamableSource, _is_StateStreamableSource_default);
  bloc$.Closable = class Closable extends core.Object {};
  (bloc$.Closable.new = function() {
    ;
  }).prototype = bloc$.Closable.prototype;
  dart.addTypeTests(bloc$.Closable);
  dart.addTypeCaches(bloc$.Closable);
  dart.setLibraryUri(bloc$.Closable, I[3]);
  const _is_Emittable_default = Symbol('_is_Emittable_default');
  bloc$.Emittable$ = dart.generic(State => {
    class Emittable extends core.Object {}
    (Emittable.new = function() {
      ;
    }).prototype = Emittable.prototype;
    dart.addTypeTests(Emittable);
    Emittable.prototype[_is_Emittable_default] = true;
    dart.addTypeCaches(Emittable);
    dart.setLibraryUri(Emittable, I[3]);
    return Emittable;
  });
  bloc$.Emittable = bloc$.Emittable$();
  dart.addTypeTests(bloc$.Emittable, _is_Emittable_default);
  bloc$.ErrorSink = class ErrorSink extends core.Object {};
  (bloc$.ErrorSink.new = function() {
    ;
  }).prototype = bloc$.ErrorSink.prototype;
  dart.addTypeTests(bloc$.ErrorSink);
  dart.addTypeCaches(bloc$.ErrorSink);
  bloc$.ErrorSink[dart.implements] = () => [bloc$.Closable];
  dart.setLibraryUri(bloc$.ErrorSink, I[3]);
  bloc$.BlocOverrides = class BlocOverrides extends core.Object {
    static get current() {
      return T$.BlocOverridesN().as(async.Zone.current._get(bloc$.BlocOverrides._token));
    }
    static runZoned(R, body, opts) {
      let blocObserver = opts && 'blocObserver' in opts ? opts.blocObserver : null;
      let eventTransformer = opts && 'eventTransformer' in opts ? opts.eventTransformer : null;
      let overrides = new bloc$._BlocOverridesScope.new(blocObserver, eventTransformer);
      return bloc$._asyncRunZoned(R, body, {zoneValues: new (T$.LinkedMapOfObjectN$ObjectN()).from([bloc$.BlocOverrides._token, overrides])});
    }
    get blocObserver() {
      return bloc$.Bloc.observer;
    }
    get eventTransformer() {
      return bloc$.Bloc.transformer;
    }
  };
  (bloc$.BlocOverrides.new = function() {
    ;
  }).prototype = bloc$.BlocOverrides.prototype;
  dart.addTypeTests(bloc$.BlocOverrides);
  dart.addTypeCaches(bloc$.BlocOverrides);
  dart.setStaticMethodSignature(bloc$.BlocOverrides, () => ['runZoned']);
  dart.setGetterSignature(bloc$.BlocOverrides, () => ({
    __proto__: dart.getGetters(bloc$.BlocOverrides.__proto__),
    blocObserver: bloc_observer.BlocObserver,
    eventTransformer: dart.fnType(async.Stream, [async.Stream, dart.fnType(async.Stream, [dart.dynamic])])
  }));
  dart.setStaticGetterSignature(bloc$.BlocOverrides, () => ['current']);
  dart.setLibraryUri(bloc$.BlocOverrides, I[3]);
  dart.setStaticFieldSignature(bloc$.BlocOverrides, () => ['_token']);
  dart.defineLazy(bloc$.BlocOverrides, {
    /*bloc$.BlocOverrides._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  var _previous = dart.privateName(bloc$, "_previous");
  bloc$._BlocOverridesScope = class _BlocOverridesScope extends bloc$.BlocOverrides {
    static ['_#new#tearOff'](_blocObserver, _eventTransformer) {
      return new bloc$._BlocOverridesScope.new(_blocObserver, _eventTransformer);
    }
    get blocObserver() {
      let blocObserver = this[_blocObserver$];
      if (blocObserver != null) return blocObserver;
      let previous = this[_previous];
      if (previous != null) return previous.blocObserver;
      return super.blocObserver;
    }
    get eventTransformer() {
      let eventTransformer = this[_eventTransformer$];
      if (eventTransformer != null) return eventTransformer;
      let previous = this[_previous];
      if (previous != null) return previous.eventTransformer;
      return super.eventTransformer;
    }
  };
  (bloc$._BlocOverridesScope.new = function(_blocObserver, _eventTransformer) {
    this[_previous] = bloc$.BlocOverrides.current;
    this[_blocObserver$] = _blocObserver;
    this[_eventTransformer$] = _eventTransformer;
    ;
  }).prototype = bloc$._BlocOverridesScope.prototype;
  dart.addTypeTests(bloc$._BlocOverridesScope);
  dart.addTypeCaches(bloc$._BlocOverridesScope);
  dart.setLibraryUri(bloc$._BlocOverridesScope, I[3]);
  dart.setFieldSignature(bloc$._BlocOverridesScope, () => ({
    __proto__: dart.getFields(bloc$._BlocOverridesScope.__proto__),
    [_previous]: dart.finalFieldType(dart.nullable(bloc$.BlocOverrides)),
    [_blocObserver$]: dart.finalFieldType(dart.nullable(bloc_observer.BlocObserver)),
    [_eventTransformer$]: dart.finalFieldType(dart.nullable(dart.fnType(async.Stream, [async.Stream, dart.fnType(async.Stream, [dart.dynamic])])))
  }));
  const _is_Emitter_default = Symbol('_is_Emitter_default');
  bloc$.Emitter$ = dart.generic(State => {
    class Emitter extends core.Object {}
    (Emitter.new = function() {
      ;
    }).prototype = Emitter.prototype;
    dart.addTypeTests(Emitter);
    Emitter.prototype[_is_Emitter_default] = true;
    dart.addTypeCaches(Emitter);
    dart.setLibraryUri(Emitter, I[3]);
    return Emitter;
  });
  bloc$.Emitter = bloc$.Emitter$();
  dart.addTypeTests(bloc$.Emitter, _is_Emitter_default);
  var _completer$0 = dart.privateName(bloc$, "_completer");
  var _disposables = dart.privateName(bloc$, "_disposables");
  var _isCanceled = dart.privateName(bloc$, "_isCanceled");
  var _isCompleted = dart.privateName(bloc$, "_isCompleted");
  var _emit$ = dart.privateName(bloc$, "_emit");
  var _close = dart.privateName(bloc$, "_close");
  const _is__Emitter_default = Symbol('_is__Emitter_default');
  bloc$._Emitter$ = dart.generic(State => {
    var __t$ObjectAndStackTraceToState = () => (__t$ObjectAndStackTraceToState = dart.constFn(dart.fnType(State, [core.Object, core.StackTrace])))();
    var __t$ObjectAndStackTraceToNState = () => (__t$ObjectAndStackTraceToNState = dart.constFn(dart.nullable(__t$ObjectAndStackTraceToState())))();
    class _Emitter extends core.Object {
      static ['_#new#tearOff'](State, _emit) {
        return new (bloc$._Emitter$(State)).new(_emit);
      }
      onEach(T, stream, opts) {
        let t25;
        let onData = opts && 'onData' in opts ? opts.onData : null;
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let completer = T$.CompleterOfvoid().new();
        let subscription = stream.listen(onData, {onDone: T$.FutureOrNOfvoidTovoid().as(dart.bind(completer, 'complete')), onError: (t25 = onError, t25 == null ? dart.bind(completer, 'completeError') : t25), cancelOnError: onError == null});
        this[_disposables][$add](dart.bind(subscription, 'cancel'));
        return async.Future.any(dart.void, T$.JSArrayOfFutureOfvoid().of([this.future, completer.future])).whenComplete(dart.fn(() => {
          subscription.cancel();
          this[_disposables][$remove](dart.bind(subscription, 'cancel'));
        }, T$.VoidToNull()));
      }
      forEach(T, stream, opts) {
        let onData = opts && 'onData' in opts ? opts.onData : null;
        dart.fnType(State, [T]).as(onData);
        let onError = opts && 'onError' in opts ? opts.onError : null;
        __t$ObjectAndStackTraceToNState().as(onError);
        return this.onEach(T, stream, {onData: dart.fn(data => this.call(onData(data)), dart.fnType(dart.void, [T])), onError: onError != null ? dart.fn((error, stackTrace) => {
            this.call(onError(error, stackTrace));
          }, T$.ObjectAndStackTraceTovoid()) : null});
      }
      call(state) {
        let t25;
        State.as(state);
        if (!!this[_isCompleted]) dart.assertFailed("\n\nemit was called after an event handler completed normally.\nThis is usually due to an unawaited future in an event handler.\nPlease make sure to await all asynchronous operations with event handlers\nand use emit.isDone after asynchronous operations before calling emit() to\nensure the event handler has not completed.\n\n  **BAD**\n  on<Event>((event, emit) {\n    future.whenComplete(() => emit(...));\n  });\n\n  **GOOD**\n  on<Event>((event, emit) async {\n    await future.whenComplete(() => emit(...));\n  });\n", I[54], 114, 7, "!_isCompleted");
        if (!this[_isCanceled]) {
          t25 = state;
          this[_emit$](t25);
        }
      }
      get isDone() {
        return this[_isCanceled] || this[_isCompleted];
      }
      cancel() {
        if (this.isDone) return;
        this[_isCanceled] = true;
        this[_close]();
      }
      complete() {
        if (this.isDone) return;
        if (!this[_disposables][$isEmpty]) dart.assertFailed("\n\nAn event handler completed but left pending subscriptions behind.\nThis is most likely due to an unawaited emit.forEach or emit.onEach. \nPlease make sure to await all asynchronous operations within event handlers.\n\n  **BAD**\n  on<Event>((event, emit) {\n    emit.forEach(...);\n  });  \n  \n  **GOOD**\n  on<Event>((event, emit) async {\n    await emit.forEach(...);\n  });\n\n  **GOOD**\n  on<Event>((event, emit) {\n    return emit.forEach(...);\n  });\n\n  **GOOD**\n  on<Event>((event, emit) => emit.forEach(...));\n\n", I[54], 150, 7, "_disposables.isEmpty");
        this[_isCompleted] = true;
        this[_close]();
      }
      [_close]() {
        for (let disposable of this[_disposables]) {
          disposable();
        }
        this[_disposables][$clear]();
        if (!this[_completer$0].isCompleted) this[_completer$0].complete();
      }
      get future() {
        return this[_completer$0].future;
      }
    }
    (_Emitter.new = function(_emit) {
      this[_completer$0] = T$.CompleterOfvoid().new();
      this[_disposables] = T$.JSArrayOfVoidToFutureOrOfvoid().of([]);
      this[_isCanceled] = false;
      this[_isCompleted] = false;
      this[_emit$] = _emit;
      ;
    }).prototype = _Emitter.prototype;
    dart.addTypeTests(_Emitter);
    _Emitter.prototype[_is__Emitter_default] = true;
    dart.addTypeCaches(_Emitter);
    _Emitter[dart.implements] = () => [bloc$.Emitter$(State)];
    dart.setMethodSignature(_Emitter, () => ({
      __proto__: dart.getMethods(_Emitter.__proto__),
      onEach: dart.gFnType(T => [async.Future$(dart.void), [async.Stream$(T)], {onError: dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace]))}, {onData: dart.fnType(dart.void, [T])}], T => [dart.nullable(core.Object)]),
      forEach: dart.gFnType(T => [async.Future$(dart.void), [async.Stream$(T)], {onData: dart.nullable(core.Object), onError: dart.nullable(core.Object)}, {}], T => [dart.nullable(core.Object)]),
      call: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      cancel: dart.fnType(dart.void, []),
      complete: dart.fnType(dart.void, []),
      [_close]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_Emitter, () => ({
      __proto__: dart.getGetters(_Emitter.__proto__),
      isDone: core.bool,
      future: async.Future$(dart.void)
    }));
    dart.setLibraryUri(_Emitter, I[3]);
    dart.setFieldSignature(_Emitter, () => ({
      __proto__: dart.getFields(_Emitter.__proto__),
      [_emit$]: dart.finalFieldType(dart.fnType(dart.void, [State])),
      [_completer$0]: dart.finalFieldType(async.Completer$(dart.void)),
      [_disposables]: dart.finalFieldType(core.List$(dart.fnType(dart.void, []))),
      [_isCanceled]: dart.fieldType(core.bool),
      [_isCompleted]: dart.fieldType(core.bool)
    }));
    return _Emitter;
  });
  bloc$._Emitter = bloc$._Emitter$();
  dart.addTypeTests(bloc$._Emitter, _is__Emitter_default);
  dart.defineLazy(bloc$, {
    /*bloc$._asyncRunZoned*/get _asyncRunZoned() {
      return C[40] || CT.C40;
    }
  }, false);
  var currentState$ = dart.privateName(change, "Change.currentState");
  var nextState$ = dart.privateName(change, "Change.nextState");
  const _is_Change_default = Symbol('_is_Change_default');
  change.Change$ = dart.generic(State => {
    var __t$ChangeOfState = () => (__t$ChangeOfState = dart.constFn(change.Change$(State)))();
    class Change extends core.Object {
      get currentState() {
        return this[currentState$];
      }
      set currentState(value) {
        super.currentState = value;
      }
      get nextState() {
        return this[nextState$];
      }
      set nextState(value) {
        super.nextState = value;
      }
      static ['_#new#tearOff'](State, opts) {
        let currentState = opts && 'currentState' in opts ? opts.currentState : null;
        let nextState = opts && 'nextState' in opts ? opts.nextState : null;
        return new (change.Change$(State)).new({currentState: currentState, nextState: nextState});
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || __t$ChangeOfState().is(other) && this[$runtimeType]._equals(other[$runtimeType]) && dart.equals(this.currentState, other.currentState) && dart.equals(this.nextState, other.nextState);
      }
      get hashCode() {
        return (dart.hashCode(this.currentState) ^ dart.hashCode(this.nextState)) >>> 0;
      }
      toString() {
        return "Change { currentState: " + dart.str(this.currentState) + ", nextState: " + dart.str(this.nextState) + " }";
      }
    }
    (Change.new = function(opts) {
      let currentState = opts && 'currentState' in opts ? opts.currentState : null;
      let nextState = opts && 'nextState' in opts ? opts.nextState : null;
      this[currentState$] = currentState;
      this[nextState$] = nextState;
      ;
    }).prototype = Change.prototype;
    dart.addTypeTests(Change);
    Change.prototype[_is_Change_default] = true;
    dart.addTypeCaches(Change);
    dart.setLibraryUri(Change, I[55]);
    dart.setFieldSignature(Change, () => ({
      __proto__: dart.getFields(Change.__proto__),
      currentState: dart.finalFieldType(State),
      nextState: dart.finalFieldType(State)
    }));
    dart.defineExtensionMethods(Change, ['_equals', 'toString']);
    dart.defineExtensionAccessors(Change, ['hashCode']);
    return Change;
  });
  change.Change = change.Change$();
  dart.addTypeTests(change.Change, _is_Change_default);
  var event$ = dart.privateName(transition, "Transition.event");
  const _is_Transition_default = Symbol('_is_Transition_default');
  transition.Transition$ = dart.generic((Event, State) => {
    var __t$TransitionOfEvent$State = () => (__t$TransitionOfEvent$State = dart.constFn(transition.Transition$(Event, State)))();
    class Transition extends change.Change$(State) {
      get event() {
        return this[event$];
      }
      set event(value) {
        super.event = value;
      }
      static ['_#new#tearOff'](Event, State, opts) {
        let currentState = opts && 'currentState' in opts ? opts.currentState : null;
        let event = opts && 'event' in opts ? opts.event : null;
        let nextState = opts && 'nextState' in opts ? opts.nextState : null;
        return new (transition.Transition$(Event, State)).new({currentState: currentState, event: event, nextState: nextState});
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || __t$TransitionOfEvent$State().is(other) && this[$runtimeType]._equals(other[$runtimeType]) && dart.equals(this.currentState, other.currentState) && dart.equals(this.event, other.event) && dart.equals(this.nextState, other.nextState);
      }
      get hashCode() {
        return (dart.hashCode(this.currentState) ^ dart.hashCode(this.event) ^ dart.hashCode(this.nextState)) >>> 0;
      }
      toString() {
        return "Transition { currentState: " + dart.str(this.currentState) + ", event: " + dart.str(this.event) + ", nextState: " + dart.str(this.nextState) + " }";
      }
    }
    (Transition.new = function(opts) {
      let currentState = opts && 'currentState' in opts ? opts.currentState : null;
      let event = opts && 'event' in opts ? opts.event : null;
      let nextState = opts && 'nextState' in opts ? opts.nextState : null;
      this[event$] = event;
      Transition.__proto__.new.call(this, {currentState: currentState, nextState: nextState});
      ;
    }).prototype = Transition.prototype;
    dart.addTypeTests(Transition);
    Transition.prototype[_is_Transition_default] = true;
    dart.addTypeCaches(Transition);
    dart.setLibraryUri(Transition, I[56]);
    dart.setFieldSignature(Transition, () => ({
      __proto__: dart.getFields(Transition.__proto__),
      event: dart.finalFieldType(Event)
    }));
    dart.defineExtensionMethods(Transition, ['_equals', 'toString']);
    dart.defineExtensionAccessors(Transition, ['hashCode']);
    return Transition;
  });
  transition.Transition = transition.Transition$();
  dart.addTypeTests(transition.Transition, _is_Transition_default);
  const _is_DeferredInheritedProvider_default = Symbol('_is_DeferredInheritedProvider_default');
  provider$.DeferredInheritedProvider$ = dart.generic((T, R) => {
    var __t$_CreateDeferredInheritedProviderOfT$R = () => (__t$_CreateDeferredInheritedProviderOfT$R = dart.constFn(provider$._CreateDeferredInheritedProvider$(T, R)))();
    var __t$_ValueDeferredInheritedProviderOfT$R = () => (__t$_ValueDeferredInheritedProviderOfT$R = dart.constFn(provider$._ValueDeferredInheritedProvider$(T, R)))();
    class DeferredInheritedProvider extends provider$.InheritedProvider$(R) {
      static ['_#new#tearOff'](T, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let startListening = opts && 'startListening' in opts ? opts.startListening : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (provider$.DeferredInheritedProvider$(T, R)).new({key: key, create: create, dispose: dispose, startListening: startListening, updateShouldNotify: updateShouldNotify, lazy: lazy, builder: builder, child: child});
      }
      static ['_#value#tearOff'](T, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let startListening = opts && 'startListening' in opts ? opts.startListening : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (provider$.DeferredInheritedProvider$(T, R)).value({key: key, value: value, startListening: startListening, updateShouldNotify: updateShouldNotify, lazy: lazy, builder: builder, child: child});
      }
    }
    (DeferredInheritedProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      DeferredInheritedProvider.__proto__._constructor.call(this, {key: key, child: child, lazy: lazy, builder: builder, delegate: new (__t$_CreateDeferredInheritedProviderOfT$R()).new({create: create, dispose: dispose, updateShouldNotify: updateShouldNotify, startListening: startListening})});
      ;
    }).prototype = DeferredInheritedProvider.prototype;
    (DeferredInheritedProvider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      DeferredInheritedProvider.__proto__._constructor.call(this, {key: key, lazy: lazy, builder: builder, delegate: new (__t$_ValueDeferredInheritedProviderOfT$R()).new(value, updateShouldNotify, startListening), child: child});
      ;
    }).prototype = DeferredInheritedProvider.prototype;
    dart.addTypeTests(DeferredInheritedProvider);
    DeferredInheritedProvider.prototype[_is_DeferredInheritedProvider_default] = true;
    dart.addTypeCaches(DeferredInheritedProvider);
    dart.setLibraryUri(DeferredInheritedProvider, I[21]);
    return DeferredInheritedProvider;
  });
  provider$.DeferredInheritedProvider = provider$.DeferredInheritedProvider$();
  dart.addTypeTests(provider$.DeferredInheritedProvider, _is_DeferredInheritedProvider_default);
  const _is_StreamProvider_default = Symbol('_is_StreamProvider_default');
  async_provider.StreamProvider$ = dart.generic(T => {
    class StreamProvider extends provider$.DeferredInheritedProvider$(dart.nullable(async.Stream$(T)), T) {
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let initialData = opts && 'initialData' in opts ? opts.initialData : null;
        let catchError = opts && 'catchError' in opts ? opts.catchError : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (async_provider.StreamProvider$(T)).new({key: key, create: create, initialData: initialData, catchError: catchError, updateShouldNotify: updateShouldNotify, lazy: lazy, builder: builder, child: child});
      }
      static ['_#value#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let initialData = opts && 'initialData' in opts ? opts.initialData : null;
        let catchError = opts && 'catchError' in opts ? opts.catchError : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (async_provider.StreamProvider$(T)).value({key: key, value: value, initialData: initialData, catchError: catchError, updateShouldNotify: updateShouldNotify, lazy: lazy, builder: builder, child: child});
      }
    }
    (StreamProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let initialData = opts && 'initialData' in opts ? opts.initialData : null;
      let catchError = opts && 'catchError' in opts ? opts.catchError : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      StreamProvider.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, updateShouldNotify: updateShouldNotify, startListening: async_provider._streamStartListening(T, {catchError: catchError, initialData: initialData}), child: child});
      ;
    }).prototype = StreamProvider.prototype;
    (StreamProvider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let initialData = opts && 'initialData' in opts ? opts.initialData : null;
      let catchError = opts && 'catchError' in opts ? opts.catchError : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      StreamProvider.__proto__.value.call(this, {key: key, lazy: lazy, builder: builder, value: value, updateShouldNotify: updateShouldNotify, startListening: async_provider._streamStartListening(T, {catchError: catchError, initialData: initialData}), child: child});
      ;
    }).prototype = StreamProvider.prototype;
    dart.addTypeTests(StreamProvider);
    StreamProvider.prototype[_is_StreamProvider_default] = true;
    dart.addTypeCaches(StreamProvider);
    dart.setLibraryUri(StreamProvider, I[57]);
    return StreamProvider;
  });
  async_provider.StreamProvider = async_provider.StreamProvider$();
  dart.addTypeTests(async_provider.StreamProvider, _is_StreamProvider_default);
  const _is_FutureProvider_default = Symbol('_is_FutureProvider_default');
  async_provider.FutureProvider$ = dart.generic(T => {
    class FutureProvider extends provider$.DeferredInheritedProvider$(dart.nullable(async.Future$(T)), T) {
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let initialData = opts && 'initialData' in opts ? opts.initialData : null;
        let catchError = opts && 'catchError' in opts ? opts.catchError : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (async_provider.FutureProvider$(T)).new({key: key, create: create, initialData: initialData, catchError: catchError, updateShouldNotify: updateShouldNotify, lazy: lazy, builder: builder, child: child});
      }
      static ['_#value#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let initialData = opts && 'initialData' in opts ? opts.initialData : null;
        let catchError = opts && 'catchError' in opts ? opts.catchError : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (async_provider.FutureProvider$(T)).value({key: key, value: value, initialData: initialData, catchError: catchError, updateShouldNotify: updateShouldNotify, builder: builder, child: child});
      }
    }
    (FutureProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let initialData = opts && 'initialData' in opts ? opts.initialData : null;
      let catchError = opts && 'catchError' in opts ? opts.catchError : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      FutureProvider.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, updateShouldNotify: updateShouldNotify, startListening: async_provider._futureStartListening(T, {catchError: catchError, initialData: initialData}), child: child});
      ;
    }).prototype = FutureProvider.prototype;
    (FutureProvider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let initialData = opts && 'initialData' in opts ? opts.initialData : null;
      let catchError = opts && 'catchError' in opts ? opts.catchError : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      FutureProvider.__proto__.value.call(this, {key: key, builder: builder, lazy: false, value: value, updateShouldNotify: updateShouldNotify, startListening: async_provider._futureStartListening(T, {catchError: catchError, initialData: initialData}), child: child});
      ;
    }).prototype = FutureProvider.prototype;
    dart.addTypeTests(FutureProvider);
    FutureProvider.prototype[_is_FutureProvider_default] = true;
    dart.addTypeCaches(FutureProvider);
    dart.setLibraryUri(FutureProvider, I[57]);
    return FutureProvider;
  });
  async_provider.FutureProvider = async_provider.FutureProvider$();
  dart.addTypeTests(async_provider.FutureProvider, _is_FutureProvider_default);
  async_provider._streamStartListening = function _streamStartListening(T, opts) {
    let initialData = opts && 'initialData' in opts ? opts.initialData : null;
    let catchError = opts && 'catchError' in opts ? opts.catchError : null;
    return dart.fn((e, setState, controller, __) => {
      if (!e.hasValue) {
        setState(initialData);
      }
      if (controller == null) {
        return dart.fn(() => {
        }, T$.VoidTovoid());
      }
      let sub = controller.listen(setState, {onError: dart.fn(error => {
          if (catchError != null) {
            setState(catchError(e, error));
          } else {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({library: "provider", exception: assertions.FlutterError.new("An exception was throw by " + dart.str(dart.runtimeType(controller)) + " listened by\nStreamProvider<" + dart.str(dart.wrapType(T)) + ">, but no `catchError` was provided.\n\nException:\n" + dart.str(error) + "\n")}));
          }
        }, T$.ObjectNToNull())});
      return dart.bind(sub, 'cancel');
    }, dart.fnType(T$.VoidTovoid(), [provider$.InheritedContext$(dart.nullable(T)), dart.fnType(dart.void, [T]), dart.nullable(async.Stream$(T)), dart.nullable(T)]));
  };
  async_provider._futureStartListening = function _futureStartListening(T, opts) {
    let initialData = opts && 'initialData' in opts ? opts.initialData : null;
    let catchError = opts && 'catchError' in opts ? opts.catchError : null;
    return dart.fn((e, setState, controller, __) => {
      let t25;
      if (!e.hasValue) {
        setState(initialData);
      }
      let canceled = false;
      t25 = controller;
      t25 == null ? null : t25.then(core.Null, dart.fn(value => {
        if (canceled) {
          return;
        }
        setState(value);
      }, dart.fnType(core.Null, [T])), {onError: dart.fn(error => {
          if (canceled) {
            return;
          }
          if (catchError != null) {
            setState(catchError(e, error));
          } else {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({library: "provider", exception: assertions.FlutterError.new("An exception was throw by " + dart.str(dart.runtimeType(controller)) + " listened by\nFutureProvider<" + dart.str(dart.wrapType(T)) + ">, but no `catchError` was provided.\n\nException:\n" + dart.str(error) + "\n")}));
          }
        }, T$.ObjectNToNull())});
      return dart.fn(() => canceled = true, T$.VoidTovoid());
    }, dart.fnType(T$.VoidTovoid(), [provider$.InheritedContext$(dart.nullable(T)), dart.fnType(dart.void, [T]), dart.nullable(async.Future$(T)), dart.nullable(T)]));
  };
  const _is_ListenableProvider_default = Symbol('_is_ListenableProvider_default');
  listenable_provider.ListenableProvider$ = dart.generic(T => {
    class ListenableProvider extends provider$.InheritedProvider$(T) {
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (listenable_provider.ListenableProvider$(T)).new({key: key, create: create, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
      static ['_#value#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (listenable_provider.ListenableProvider$(T)).value({key: key, value: value, updateShouldNotify: updateShouldNotify, builder: builder, child: child});
      }
      static _startListening(e, value) {
        let t25;
        t25 = value;
        t25 == null ? null : t25.addListener(dart.bind(e, 'markNeedsNotifyDependents'));
        return dart.fn(() => {
          let t25;
          t25 = value;
          return t25 == null ? null : t25.removeListener(dart.bind(e, 'markNeedsNotifyDependents'));
        }, T$.VoidTovoid());
      }
    }
    (ListenableProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ListenableProvider.__proto__.new.call(this, {key: key, startListening: C[42] || CT.C42, create: create, dispose: dispose, lazy: lazy, builder: builder, child: child});
      ;
    }).prototype = ListenableProvider.prototype;
    (ListenableProvider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ListenableProvider.__proto__.value.call(this, {key: key, builder: builder, value: value, updateShouldNotify: updateShouldNotify, startListening: C[42] || CT.C42, child: child});
      ;
    }).prototype = ListenableProvider.prototype;
    dart.addTypeTests(ListenableProvider);
    ListenableProvider.prototype[_is_ListenableProvider_default] = true;
    dart.addTypeCaches(ListenableProvider);
    dart.setStaticMethodSignature(ListenableProvider, () => ['_startListening']);
    dart.setLibraryUri(ListenableProvider, I[58]);
    return ListenableProvider;
  });
  listenable_provider.ListenableProvider = listenable_provider.ListenableProvider$();
  dart.addTypeTests(listenable_provider.ListenableProvider, _is_ListenableProvider_default);
  const _is_ChangeNotifierProvider_default = Symbol('_is_ChangeNotifierProvider_default');
  change_notifier_provider.ChangeNotifierProvider$ = dart.generic(T => {
    class ChangeNotifierProvider extends listenable_provider.ListenableProvider$(T) {
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (change_notifier_provider.ChangeNotifierProvider$(T)).new({key: key, create: create, lazy: lazy, builder: builder, child: child});
      }
      static ['_#value#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (change_notifier_provider.ChangeNotifierProvider$(T)).value({key: key, value: value, builder: builder, child: child});
      }
      static _dispose(context, notifier) {
        let t25;
        t25 = notifier;
        t25 == null ? null : t25.dispose();
      }
    }
    (ChangeNotifierProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ChangeNotifierProvider.__proto__.new.call(this, {key: key, create: create, dispose: C[41] || CT.C41, lazy: lazy, builder: builder, child: child});
      ;
    }).prototype = ChangeNotifierProvider.prototype;
    (ChangeNotifierProvider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ChangeNotifierProvider.__proto__.value.call(this, {key: key, builder: builder, value: value, child: child});
      ;
    }).prototype = ChangeNotifierProvider.prototype;
    dart.addTypeTests(ChangeNotifierProvider);
    ChangeNotifierProvider.prototype[_is_ChangeNotifierProvider_default] = true;
    dart.addTypeCaches(ChangeNotifierProvider);
    dart.setStaticMethodSignature(ChangeNotifierProvider, () => ['_dispose']);
    dart.setLibraryUri(ChangeNotifierProvider, I[59]);
    return ChangeNotifierProvider;
  });
  change_notifier_provider.ChangeNotifierProvider = change_notifier_provider.ChangeNotifierProvider$();
  dart.addTypeTests(change_notifier_provider.ChangeNotifierProvider, _is_ChangeNotifierProvider_default);
  const _is_ListenableProxyProvider0_default = Symbol('_is_ListenableProxyProvider0_default');
  listenable_provider.ListenableProxyProvider0$ = dart.generic(R => {
    class ListenableProxyProvider0 extends provider$.InheritedProvider$(R) {
      static ['_#new#tearOff'](R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (listenable_provider.ListenableProxyProvider0$(R)).new({key: key, create: create, update: update, dispose: dispose, updateShouldNotify: updateShouldNotify, lazy: lazy, builder: builder, child: child});
      }
    }
    (ListenableProxyProvider0.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ListenableProxyProvider0.__proto__.new.call(this, {key: key, create: create, update: update, lazy: lazy, builder: builder, dispose: dispose, updateShouldNotify: updateShouldNotify, startListening: C[42] || CT.C42, child: child});
      ;
    }).prototype = ListenableProxyProvider0.prototype;
    dart.addTypeTests(ListenableProxyProvider0);
    ListenableProxyProvider0.prototype[_is_ListenableProxyProvider0_default] = true;
    dart.addTypeCaches(ListenableProxyProvider0);
    dart.setLibraryUri(ListenableProxyProvider0, I[58]);
    return ListenableProxyProvider0;
  });
  listenable_provider.ListenableProxyProvider0 = listenable_provider.ListenableProxyProvider0$();
  dart.addTypeTests(listenable_provider.ListenableProxyProvider0, _is_ListenableProxyProvider0_default);
  const _is_ListenableProxyProvider_default = Symbol('_is_ListenableProxyProvider_default');
  listenable_provider.ListenableProxyProvider$ = dart.generic((T, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ListenableProxyProvider extends listenable_provider.ListenableProxyProvider0$(R) {
      static ['_#new#tearOff'](T, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (listenable_provider.ListenableProxyProvider$(T, R)).new({key: key, create: create, update: update, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ListenableProxyProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ListenableProxyProvider.__proto__.new.call(this, {key: key, create: create, lazy: lazy, builder: builder, update: dart.fn((context, previous) => update(context, provider$.Provider.of(T, context), previous), __t$BuildContextAndRNToR()), dispose: dispose, child: child});
      ;
    }).prototype = ListenableProxyProvider.prototype;
    dart.addTypeTests(ListenableProxyProvider);
    ListenableProxyProvider.prototype[_is_ListenableProxyProvider_default] = true;
    dart.addTypeCaches(ListenableProxyProvider);
    dart.setLibraryUri(ListenableProxyProvider, I[58]);
    return ListenableProxyProvider;
  });
  listenable_provider.ListenableProxyProvider = listenable_provider.ListenableProxyProvider$();
  dart.addTypeTests(listenable_provider.ListenableProxyProvider, _is_ListenableProxyProvider_default);
  const _is_ChangeNotifierProxyProvider_default = Symbol('_is_ChangeNotifierProxyProvider_default');
  change_notifier_provider.ChangeNotifierProxyProvider$ = dart.generic((T, R) => {
    class ChangeNotifierProxyProvider extends listenable_provider.ListenableProxyProvider$(T, R) {
      static ['_#new#tearOff'](T, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (change_notifier_provider.ChangeNotifierProxyProvider$(T, R)).new({key: key, create: create, update: update, lazy: lazy, builder: builder, child: child});
      }
    }
    (ChangeNotifierProxyProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ChangeNotifierProxyProvider.__proto__.new.call(this, {key: key, create: create, update: update, dispose: C[41] || CT.C41, lazy: lazy, builder: builder, child: child});
      ;
    }).prototype = ChangeNotifierProxyProvider.prototype;
    dart.addTypeTests(ChangeNotifierProxyProvider);
    ChangeNotifierProxyProvider.prototype[_is_ChangeNotifierProxyProvider_default] = true;
    dart.addTypeCaches(ChangeNotifierProxyProvider);
    dart.setLibraryUri(ChangeNotifierProxyProvider, I[59]);
    return ChangeNotifierProxyProvider;
  });
  change_notifier_provider.ChangeNotifierProxyProvider = change_notifier_provider.ChangeNotifierProxyProvider$();
  dart.addTypeTests(change_notifier_provider.ChangeNotifierProxyProvider, _is_ChangeNotifierProxyProvider_default);
  const _is_ChangeNotifierProxyProvider0_default = Symbol('_is_ChangeNotifierProxyProvider0_default');
  change_notifier_provider.ChangeNotifierProxyProvider0$ = dart.generic(R => {
    class ChangeNotifierProxyProvider0 extends listenable_provider.ListenableProxyProvider0$(R) {
      static ['_#new#tearOff'](R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (change_notifier_provider.ChangeNotifierProxyProvider0$(R)).new({key: key, create: create, update: update, lazy: lazy, builder: builder, child: child});
      }
    }
    (ChangeNotifierProxyProvider0.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ChangeNotifierProxyProvider0.__proto__.new.call(this, {key: key, create: create, update: update, dispose: C[41] || CT.C41, lazy: lazy, builder: builder, child: child});
      ;
    }).prototype = ChangeNotifierProxyProvider0.prototype;
    dart.addTypeTests(ChangeNotifierProxyProvider0);
    ChangeNotifierProxyProvider0.prototype[_is_ChangeNotifierProxyProvider0_default] = true;
    dart.addTypeCaches(ChangeNotifierProxyProvider0);
    dart.setLibraryUri(ChangeNotifierProxyProvider0, I[59]);
    return ChangeNotifierProxyProvider0;
  });
  change_notifier_provider.ChangeNotifierProxyProvider0 = change_notifier_provider.ChangeNotifierProxyProvider0$();
  dart.addTypeTests(change_notifier_provider.ChangeNotifierProxyProvider0, _is_ChangeNotifierProxyProvider0_default);
  const _is_ListenableProxyProvider2_default = Symbol('_is_ListenableProxyProvider2_default');
  listenable_provider.ListenableProxyProvider2$ = dart.generic((T, T2, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ListenableProxyProvider2 extends listenable_provider.ListenableProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (listenable_provider.ListenableProxyProvider2$(T, T2, R)).new({key: key, create: create, update: update, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ListenableProxyProvider2.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ListenableProxyProvider2.__proto__.new.call(this, {key: key, create: create, lazy: lazy, builder: builder, update: dart.fn((context, previous) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), previous), __t$BuildContextAndRNToR()), dispose: dispose, child: child});
      ;
    }).prototype = ListenableProxyProvider2.prototype;
    dart.addTypeTests(ListenableProxyProvider2);
    ListenableProxyProvider2.prototype[_is_ListenableProxyProvider2_default] = true;
    dart.addTypeCaches(ListenableProxyProvider2);
    dart.setLibraryUri(ListenableProxyProvider2, I[58]);
    return ListenableProxyProvider2;
  });
  listenable_provider.ListenableProxyProvider2 = listenable_provider.ListenableProxyProvider2$();
  dart.addTypeTests(listenable_provider.ListenableProxyProvider2, _is_ListenableProxyProvider2_default);
  const _is_ChangeNotifierProxyProvider2_default = Symbol('_is_ChangeNotifierProxyProvider2_default');
  change_notifier_provider.ChangeNotifierProxyProvider2$ = dart.generic((T, T2, R) => {
    class ChangeNotifierProxyProvider2 extends listenable_provider.ListenableProxyProvider2$(T, T2, R) {
      static ['_#new#tearOff'](T, T2, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (change_notifier_provider.ChangeNotifierProxyProvider2$(T, T2, R)).new({key: key, create: create, update: update, lazy: lazy, builder: builder, child: child});
      }
    }
    (ChangeNotifierProxyProvider2.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ChangeNotifierProxyProvider2.__proto__.new.call(this, {key: key, create: create, update: update, dispose: C[41] || CT.C41, lazy: lazy, builder: builder, child: child});
      ;
    }).prototype = ChangeNotifierProxyProvider2.prototype;
    dart.addTypeTests(ChangeNotifierProxyProvider2);
    ChangeNotifierProxyProvider2.prototype[_is_ChangeNotifierProxyProvider2_default] = true;
    dart.addTypeCaches(ChangeNotifierProxyProvider2);
    dart.setLibraryUri(ChangeNotifierProxyProvider2, I[59]);
    return ChangeNotifierProxyProvider2;
  });
  change_notifier_provider.ChangeNotifierProxyProvider2 = change_notifier_provider.ChangeNotifierProxyProvider2$();
  dart.addTypeTests(change_notifier_provider.ChangeNotifierProxyProvider2, _is_ChangeNotifierProxyProvider2_default);
  const _is_ListenableProxyProvider3_default = Symbol('_is_ListenableProxyProvider3_default');
  listenable_provider.ListenableProxyProvider3$ = dart.generic((T, T2, T3, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ListenableProxyProvider3 extends listenable_provider.ListenableProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, T3, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (listenable_provider.ListenableProxyProvider3$(T, T2, T3, R)).new({key: key, create: create, update: update, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ListenableProxyProvider3.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ListenableProxyProvider3.__proto__.new.call(this, {key: key, create: create, lazy: lazy, builder: builder, update: dart.fn((context, previous) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), provider$.Provider.of(T3, context), previous), __t$BuildContextAndRNToR()), dispose: dispose, child: child});
      ;
    }).prototype = ListenableProxyProvider3.prototype;
    dart.addTypeTests(ListenableProxyProvider3);
    ListenableProxyProvider3.prototype[_is_ListenableProxyProvider3_default] = true;
    dart.addTypeCaches(ListenableProxyProvider3);
    dart.setLibraryUri(ListenableProxyProvider3, I[58]);
    return ListenableProxyProvider3;
  });
  listenable_provider.ListenableProxyProvider3 = listenable_provider.ListenableProxyProvider3$();
  dart.addTypeTests(listenable_provider.ListenableProxyProvider3, _is_ListenableProxyProvider3_default);
  const _is_ChangeNotifierProxyProvider3_default = Symbol('_is_ChangeNotifierProxyProvider3_default');
  change_notifier_provider.ChangeNotifierProxyProvider3$ = dart.generic((T, T2, T3, R) => {
    class ChangeNotifierProxyProvider3 extends listenable_provider.ListenableProxyProvider3$(T, T2, T3, R) {
      static ['_#new#tearOff'](T, T2, T3, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (change_notifier_provider.ChangeNotifierProxyProvider3$(T, T2, T3, R)).new({key: key, create: create, update: update, lazy: lazy, builder: builder, child: child});
      }
    }
    (ChangeNotifierProxyProvider3.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ChangeNotifierProxyProvider3.__proto__.new.call(this, {key: key, create: create, update: update, dispose: C[41] || CT.C41, lazy: lazy, builder: builder, child: child});
      ;
    }).prototype = ChangeNotifierProxyProvider3.prototype;
    dart.addTypeTests(ChangeNotifierProxyProvider3);
    ChangeNotifierProxyProvider3.prototype[_is_ChangeNotifierProxyProvider3_default] = true;
    dart.addTypeCaches(ChangeNotifierProxyProvider3);
    dart.setLibraryUri(ChangeNotifierProxyProvider3, I[59]);
    return ChangeNotifierProxyProvider3;
  });
  change_notifier_provider.ChangeNotifierProxyProvider3 = change_notifier_provider.ChangeNotifierProxyProvider3$();
  dart.addTypeTests(change_notifier_provider.ChangeNotifierProxyProvider3, _is_ChangeNotifierProxyProvider3_default);
  const _is_ListenableProxyProvider4_default = Symbol('_is_ListenableProxyProvider4_default');
  listenable_provider.ListenableProxyProvider4$ = dart.generic((T, T2, T3, T4, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ListenableProxyProvider4 extends listenable_provider.ListenableProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, T3, T4, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (listenable_provider.ListenableProxyProvider4$(T, T2, T3, T4, R)).new({key: key, create: create, update: update, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ListenableProxyProvider4.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ListenableProxyProvider4.__proto__.new.call(this, {key: key, create: create, lazy: lazy, builder: builder, update: dart.fn((context, previous) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), provider$.Provider.of(T3, context), provider$.Provider.of(T4, context), previous), __t$BuildContextAndRNToR()), dispose: dispose, child: child});
      ;
    }).prototype = ListenableProxyProvider4.prototype;
    dart.addTypeTests(ListenableProxyProvider4);
    ListenableProxyProvider4.prototype[_is_ListenableProxyProvider4_default] = true;
    dart.addTypeCaches(ListenableProxyProvider4);
    dart.setLibraryUri(ListenableProxyProvider4, I[58]);
    return ListenableProxyProvider4;
  });
  listenable_provider.ListenableProxyProvider4 = listenable_provider.ListenableProxyProvider4$();
  dart.addTypeTests(listenable_provider.ListenableProxyProvider4, _is_ListenableProxyProvider4_default);
  const _is_ChangeNotifierProxyProvider4_default = Symbol('_is_ChangeNotifierProxyProvider4_default');
  change_notifier_provider.ChangeNotifierProxyProvider4$ = dart.generic((T, T2, T3, T4, R) => {
    class ChangeNotifierProxyProvider4 extends listenable_provider.ListenableProxyProvider4$(T, T2, T3, T4, R) {
      static ['_#new#tearOff'](T, T2, T3, T4, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (change_notifier_provider.ChangeNotifierProxyProvider4$(T, T2, T3, T4, R)).new({key: key, create: create, update: update, lazy: lazy, builder: builder, child: child});
      }
    }
    (ChangeNotifierProxyProvider4.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ChangeNotifierProxyProvider4.__proto__.new.call(this, {key: key, create: create, update: update, dispose: C[41] || CT.C41, lazy: lazy, builder: builder, child: child});
      ;
    }).prototype = ChangeNotifierProxyProvider4.prototype;
    dart.addTypeTests(ChangeNotifierProxyProvider4);
    ChangeNotifierProxyProvider4.prototype[_is_ChangeNotifierProxyProvider4_default] = true;
    dart.addTypeCaches(ChangeNotifierProxyProvider4);
    dart.setLibraryUri(ChangeNotifierProxyProvider4, I[59]);
    return ChangeNotifierProxyProvider4;
  });
  change_notifier_provider.ChangeNotifierProxyProvider4 = change_notifier_provider.ChangeNotifierProxyProvider4$();
  dart.addTypeTests(change_notifier_provider.ChangeNotifierProxyProvider4, _is_ChangeNotifierProxyProvider4_default);
  const _is_ListenableProxyProvider5_default = Symbol('_is_ListenableProxyProvider5_default');
  listenable_provider.ListenableProxyProvider5$ = dart.generic((T, T2, T3, T4, T5, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ListenableProxyProvider5 extends listenable_provider.ListenableProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, T3, T4, T5, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (listenable_provider.ListenableProxyProvider5$(T, T2, T3, T4, T5, R)).new({key: key, create: create, update: update, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ListenableProxyProvider5.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ListenableProxyProvider5.__proto__.new.call(this, {key: key, create: create, lazy: lazy, builder: builder, update: dart.fn((context, previous) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), provider$.Provider.of(T3, context), provider$.Provider.of(T4, context), provider$.Provider.of(T5, context), previous), __t$BuildContextAndRNToR()), dispose: dispose, child: child});
      ;
    }).prototype = ListenableProxyProvider5.prototype;
    dart.addTypeTests(ListenableProxyProvider5);
    ListenableProxyProvider5.prototype[_is_ListenableProxyProvider5_default] = true;
    dart.addTypeCaches(ListenableProxyProvider5);
    dart.setLibraryUri(ListenableProxyProvider5, I[58]);
    return ListenableProxyProvider5;
  });
  listenable_provider.ListenableProxyProvider5 = listenable_provider.ListenableProxyProvider5$();
  dart.addTypeTests(listenable_provider.ListenableProxyProvider5, _is_ListenableProxyProvider5_default);
  const _is_ChangeNotifierProxyProvider5_default = Symbol('_is_ChangeNotifierProxyProvider5_default');
  change_notifier_provider.ChangeNotifierProxyProvider5$ = dart.generic((T, T2, T3, T4, T5, R) => {
    class ChangeNotifierProxyProvider5 extends listenable_provider.ListenableProxyProvider5$(T, T2, T3, T4, T5, R) {
      static ['_#new#tearOff'](T, T2, T3, T4, T5, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (change_notifier_provider.ChangeNotifierProxyProvider5$(T, T2, T3, T4, T5, R)).new({key: key, create: create, update: update, lazy: lazy, builder: builder, child: child});
      }
    }
    (ChangeNotifierProxyProvider5.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ChangeNotifierProxyProvider5.__proto__.new.call(this, {key: key, create: create, update: update, dispose: C[41] || CT.C41, lazy: lazy, builder: builder, child: child});
      ;
    }).prototype = ChangeNotifierProxyProvider5.prototype;
    dart.addTypeTests(ChangeNotifierProxyProvider5);
    ChangeNotifierProxyProvider5.prototype[_is_ChangeNotifierProxyProvider5_default] = true;
    dart.addTypeCaches(ChangeNotifierProxyProvider5);
    dart.setLibraryUri(ChangeNotifierProxyProvider5, I[59]);
    return ChangeNotifierProxyProvider5;
  });
  change_notifier_provider.ChangeNotifierProxyProvider5 = change_notifier_provider.ChangeNotifierProxyProvider5$();
  dart.addTypeTests(change_notifier_provider.ChangeNotifierProxyProvider5, _is_ChangeNotifierProxyProvider5_default);
  const _is_ListenableProxyProvider6_default = Symbol('_is_ListenableProxyProvider6_default');
  listenable_provider.ListenableProxyProvider6$ = dart.generic((T, T2, T3, T4, T5, T6, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ListenableProxyProvider6 extends listenable_provider.ListenableProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, T3, T4, T5, T6, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (listenable_provider.ListenableProxyProvider6$(T, T2, T3, T4, T5, T6, R)).new({key: key, create: create, update: update, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ListenableProxyProvider6.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ListenableProxyProvider6.__proto__.new.call(this, {key: key, create: create, lazy: lazy, builder: builder, update: dart.fn((context, previous) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), provider$.Provider.of(T3, context), provider$.Provider.of(T4, context), provider$.Provider.of(T5, context), provider$.Provider.of(T6, context), previous), __t$BuildContextAndRNToR()), dispose: dispose, child: child});
      ;
    }).prototype = ListenableProxyProvider6.prototype;
    dart.addTypeTests(ListenableProxyProvider6);
    ListenableProxyProvider6.prototype[_is_ListenableProxyProvider6_default] = true;
    dart.addTypeCaches(ListenableProxyProvider6);
    dart.setLibraryUri(ListenableProxyProvider6, I[58]);
    return ListenableProxyProvider6;
  });
  listenable_provider.ListenableProxyProvider6 = listenable_provider.ListenableProxyProvider6$();
  dart.addTypeTests(listenable_provider.ListenableProxyProvider6, _is_ListenableProxyProvider6_default);
  const _is_ChangeNotifierProxyProvider6_default = Symbol('_is_ChangeNotifierProxyProvider6_default');
  change_notifier_provider.ChangeNotifierProxyProvider6$ = dart.generic((T, T2, T3, T4, T5, T6, R) => {
    class ChangeNotifierProxyProvider6 extends listenable_provider.ListenableProxyProvider6$(T, T2, T3, T4, T5, T6, R) {
      static ['_#new#tearOff'](T, T2, T3, T4, T5, T6, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (change_notifier_provider.ChangeNotifierProxyProvider6$(T, T2, T3, T4, T5, T6, R)).new({key: key, create: create, update: update, lazy: lazy, builder: builder, child: child});
      }
    }
    (ChangeNotifierProxyProvider6.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ChangeNotifierProxyProvider6.__proto__.new.call(this, {key: key, create: create, update: update, dispose: C[41] || CT.C41, lazy: lazy, builder: builder, child: child});
      ;
    }).prototype = ChangeNotifierProxyProvider6.prototype;
    dart.addTypeTests(ChangeNotifierProxyProvider6);
    ChangeNotifierProxyProvider6.prototype[_is_ChangeNotifierProxyProvider6_default] = true;
    dart.addTypeCaches(ChangeNotifierProxyProvider6);
    dart.setLibraryUri(ChangeNotifierProxyProvider6, I[59]);
    return ChangeNotifierProxyProvider6;
  });
  change_notifier_provider.ChangeNotifierProxyProvider6 = change_notifier_provider.ChangeNotifierProxyProvider6$();
  dart.addTypeTests(change_notifier_provider.ChangeNotifierProxyProvider6, _is_ChangeNotifierProxyProvider6_default);
  var builder$3 = dart.privateName(consumer, "Consumer.builder");
  const _is_Consumer_default = Symbol('_is_Consumer_default');
  consumer.Consumer$ = dart.generic(T => {
    class Consumer extends nested.SingleChildStatelessWidget {
      get builder() {
        return this[builder$3];
      }
      set builder(value) {
        super.builder = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (consumer.Consumer$(T)).new({key: key, builder: builder, child: child});
      }
      buildWithChild(context, child) {
        let t27, t26, t25;
        t25 = context;
        t26 = provider$.Provider.of(T, context);
        t27 = child;
        return this.builder(t25, t26, t27);
      }
    }
    (Consumer.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$3] = builder;
      Consumer.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = Consumer.prototype;
    dart.addTypeTests(Consumer);
    Consumer.prototype[_is_Consumer_default] = true;
    dart.addTypeCaches(Consumer);
    dart.setMethodSignature(Consumer, () => ({
      __proto__: dart.getMethods(Consumer.__proto__),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setLibraryUri(Consumer, I[60]);
    dart.setFieldSignature(Consumer, () => ({
      __proto__: dart.getFields(Consumer.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, T, dart.nullable(framework.Widget)]))
    }));
    return Consumer;
  });
  consumer.Consumer = consumer.Consumer$();
  dart.addTypeTests(consumer.Consumer, _is_Consumer_default);
  var builder$4 = dart.privateName(consumer, "Consumer2.builder");
  const _is_Consumer2_default = Symbol('_is_Consumer2_default');
  consumer.Consumer2$ = dart.generic((A, B) => {
    class Consumer2 extends nested.SingleChildStatelessWidget {
      get builder() {
        return this[builder$4];
      }
      set builder(value) {
        super.builder = value;
      }
      static ['_#new#tearOff'](A, B, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (consumer.Consumer2$(A, B)).new({key: key, builder: builder, child: child});
      }
      buildWithChild(context, child) {
        let t28, t27, t26, t25;
        t25 = context;
        t26 = provider$.Provider.of(A, context);
        t27 = provider$.Provider.of(B, context);
        t28 = child;
        return this.builder(t25, t26, t27, t28);
      }
    }
    (Consumer2.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$4] = builder;
      Consumer2.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = Consumer2.prototype;
    dart.addTypeTests(Consumer2);
    Consumer2.prototype[_is_Consumer2_default] = true;
    dart.addTypeCaches(Consumer2);
    dart.setMethodSignature(Consumer2, () => ({
      __proto__: dart.getMethods(Consumer2.__proto__),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setLibraryUri(Consumer2, I[60]);
    dart.setFieldSignature(Consumer2, () => ({
      __proto__: dart.getFields(Consumer2.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, A, B, dart.nullable(framework.Widget)]))
    }));
    return Consumer2;
  });
  consumer.Consumer2 = consumer.Consumer2$();
  dart.addTypeTests(consumer.Consumer2, _is_Consumer2_default);
  var builder$5 = dart.privateName(consumer, "Consumer3.builder");
  const _is_Consumer3_default = Symbol('_is_Consumer3_default');
  consumer.Consumer3$ = dart.generic((A, B, C) => {
    class Consumer3 extends nested.SingleChildStatelessWidget {
      get builder() {
        return this[builder$5];
      }
      set builder(value) {
        super.builder = value;
      }
      static ['_#new#tearOff'](A, B, C, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (consumer.Consumer3$(A, B, C)).new({key: key, builder: builder, child: child});
      }
      buildWithChild(context, child) {
        let t29, t28, t27, t26, t25;
        t25 = context;
        t26 = provider$.Provider.of(A, context);
        t27 = provider$.Provider.of(B, context);
        t28 = provider$.Provider.of(C, context);
        t29 = child;
        return this.builder(t25, t26, t27, t28, t29);
      }
    }
    (Consumer3.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$5] = builder;
      Consumer3.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = Consumer3.prototype;
    dart.addTypeTests(Consumer3);
    Consumer3.prototype[_is_Consumer3_default] = true;
    dart.addTypeCaches(Consumer3);
    dart.setMethodSignature(Consumer3, () => ({
      __proto__: dart.getMethods(Consumer3.__proto__),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setLibraryUri(Consumer3, I[60]);
    dart.setFieldSignature(Consumer3, () => ({
      __proto__: dart.getFields(Consumer3.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, A, B, C, dart.nullable(framework.Widget)]))
    }));
    return Consumer3;
  });
  consumer.Consumer3 = consumer.Consumer3$();
  dart.addTypeTests(consumer.Consumer3, _is_Consumer3_default);
  var builder$6 = dart.privateName(consumer, "Consumer4.builder");
  const _is_Consumer4_default = Symbol('_is_Consumer4_default');
  consumer.Consumer4$ = dart.generic((A, B, C, D) => {
    class Consumer4 extends nested.SingleChildStatelessWidget {
      get builder() {
        return this[builder$6];
      }
      set builder(value) {
        super.builder = value;
      }
      static ['_#new#tearOff'](A, B, C, D, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (consumer.Consumer4$(A, B, C, D)).new({key: key, builder: builder, child: child});
      }
      buildWithChild(context, child) {
        let t30, t29, t28, t27, t26, t25;
        t25 = context;
        t26 = provider$.Provider.of(A, context);
        t27 = provider$.Provider.of(B, context);
        t28 = provider$.Provider.of(C, context);
        t29 = provider$.Provider.of(D, context);
        t30 = child;
        return this.builder(t25, t26, t27, t28, t29, t30);
      }
    }
    (Consumer4.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$6] = builder;
      Consumer4.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = Consumer4.prototype;
    dart.addTypeTests(Consumer4);
    Consumer4.prototype[_is_Consumer4_default] = true;
    dart.addTypeCaches(Consumer4);
    dart.setMethodSignature(Consumer4, () => ({
      __proto__: dart.getMethods(Consumer4.__proto__),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setLibraryUri(Consumer4, I[60]);
    dart.setFieldSignature(Consumer4, () => ({
      __proto__: dart.getFields(Consumer4.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, A, B, C, D, dart.nullable(framework.Widget)]))
    }));
    return Consumer4;
  });
  consumer.Consumer4 = consumer.Consumer4$();
  dart.addTypeTests(consumer.Consumer4, _is_Consumer4_default);
  var builder$7 = dart.privateName(consumer, "Consumer5.builder");
  const _is_Consumer5_default = Symbol('_is_Consumer5_default');
  consumer.Consumer5$ = dart.generic((A, B, C, D, E) => {
    class Consumer5 extends nested.SingleChildStatelessWidget {
      get builder() {
        return this[builder$7];
      }
      set builder(value) {
        super.builder = value;
      }
      static ['_#new#tearOff'](A, B, C, D, E, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (consumer.Consumer5$(A, B, C, D, E)).new({key: key, builder: builder, child: child});
      }
      buildWithChild(context, child) {
        let t31, t30, t29, t28, t27, t26, t25;
        t25 = context;
        t26 = provider$.Provider.of(A, context);
        t27 = provider$.Provider.of(B, context);
        t28 = provider$.Provider.of(C, context);
        t29 = provider$.Provider.of(D, context);
        t30 = provider$.Provider.of(E, context);
        t31 = child;
        return this.builder(t25, t26, t27, t28, t29, t30, t31);
      }
    }
    (Consumer5.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$7] = builder;
      Consumer5.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = Consumer5.prototype;
    dart.addTypeTests(Consumer5);
    Consumer5.prototype[_is_Consumer5_default] = true;
    dart.addTypeCaches(Consumer5);
    dart.setMethodSignature(Consumer5, () => ({
      __proto__: dart.getMethods(Consumer5.__proto__),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setLibraryUri(Consumer5, I[60]);
    dart.setFieldSignature(Consumer5, () => ({
      __proto__: dart.getFields(Consumer5.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, A, B, C, D, E, dart.nullable(framework.Widget)]))
    }));
    return Consumer5;
  });
  consumer.Consumer5 = consumer.Consumer5$();
  dart.addTypeTests(consumer.Consumer5, _is_Consumer5_default);
  var builder$8 = dart.privateName(consumer, "Consumer6.builder");
  const _is_Consumer6_default = Symbol('_is_Consumer6_default');
  consumer.Consumer6$ = dart.generic((A, B, C, D, E, F) => {
    class Consumer6 extends nested.SingleChildStatelessWidget {
      get builder() {
        return this[builder$8];
      }
      set builder(value) {
        super.builder = value;
      }
      static ['_#new#tearOff'](A, B, C, D, E, F, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (consumer.Consumer6$(A, B, C, D, E, F)).new({key: key, builder: builder, child: child});
      }
      buildWithChild(context, child) {
        let t32, t31, t30, t29, t28, t27, t26, t25;
        t25 = context;
        t26 = provider$.Provider.of(A, context);
        t27 = provider$.Provider.of(B, context);
        t28 = provider$.Provider.of(C, context);
        t29 = provider$.Provider.of(D, context);
        t30 = provider$.Provider.of(E, context);
        t31 = provider$.Provider.of(F, context);
        t32 = child;
        return this.builder(t25, t26, t27, t28, t29, t30, t31, t32);
      }
    }
    (Consumer6.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$8] = builder;
      Consumer6.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = Consumer6.prototype;
    dart.addTypeTests(Consumer6);
    Consumer6.prototype[_is_Consumer6_default] = true;
    dart.addTypeCaches(Consumer6);
    dart.setMethodSignature(Consumer6, () => ({
      __proto__: dart.getMethods(Consumer6.__proto__),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setLibraryUri(Consumer6, I[60]);
    dart.setFieldSignature(Consumer6, () => ({
      __proto__: dart.getFields(Consumer6.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, A, B, C, D, E, F, dart.nullable(framework.Widget)]))
    }));
    return Consumer6;
  });
  consumer.Consumer6 = consumer.Consumer6$();
  dart.addTypeTests(consumer.Consumer6, _is_Consumer6_default);
  var valueType$ = dart.privateName(provider$, "ProviderNullException.valueType");
  var widgetType$ = dart.privateName(provider$, "ProviderNullException.widgetType");
  provider$.ProviderNullException = class ProviderNullException extends core.Object {
    get valueType() {
      return this[valueType$];
    }
    set valueType(value) {
      super.valueType = value;
    }
    get widgetType() {
      return this[widgetType$];
    }
    set widgetType(value) {
      super.widgetType = value;
    }
    static ['_#new#tearOff'](valueType, widgetType) {
      return new provider$.ProviderNullException.new(valueType, widgetType);
    }
    toString() {
      ;
      return "Error: The widget " + dart.str(this.widgetType) + " tried to read Provider<" + dart.str(this.valueType) + "> but the matching\nprovider returned null.\n\nTo fix the error, consider changing Provider<" + dart.str(this.valueType) + "> to Provider<" + dart.str(this.valueType) + "?>.\n";
    }
  };
  (provider$.ProviderNullException.new = function(valueType, widgetType) {
    this[valueType$] = valueType;
    this[widgetType$] = widgetType;
    ;
  }).prototype = provider$.ProviderNullException.prototype;
  dart.addTypeTests(provider$.ProviderNullException);
  dart.addTypeCaches(provider$.ProviderNullException);
  provider$.ProviderNullException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(provider$.ProviderNullException, I[21]);
  dart.setFieldSignature(provider$.ProviderNullException, () => ({
    __proto__: dart.getFields(provider$.ProviderNullException.__proto__),
    valueType: dart.finalFieldType(core.Type),
    widgetType: dart.finalFieldType(core.Type)
  }));
  dart.defineExtensionMethods(provider$.ProviderNullException, ['toString']);
  var valueType$0 = dart.privateName(provider$, "ProviderNotFoundException.valueType");
  var widgetType$0 = dart.privateName(provider$, "ProviderNotFoundException.widgetType");
  provider$.ProviderNotFoundException = class ProviderNotFoundException extends core.Object {
    get valueType() {
      return this[valueType$0];
    }
    set valueType(value) {
      super.valueType = value;
    }
    get widgetType() {
      return this[widgetType$0];
    }
    set widgetType(value) {
      super.widgetType = value;
    }
    static ['_#new#tearOff'](valueType, widgetType) {
      return new provider$.ProviderNotFoundException.new(valueType, widgetType);
    }
    toString() {
      ;
      return "Error: Could not find the correct Provider<" + dart.str(this.valueType) + "> above this " + dart.str(this.widgetType) + " Widget\n\nThis happens because you used a `BuildContext` that does not include the provider\nof your choice. There are a few common scenarios:\n\n- You added a new provider in your `main.dart` and performed a hot-reload.\n  To fix, perform a hot-restart.\n\n- The provider you are trying to read is in a different route.\n\n  Providers are \"scoped\". So if you insert of provider inside a route, then\n  other routes will not be able to access that provider.\n\n- You used a `BuildContext` that is an ancestor of the provider you are trying to read.\n\n  Make sure that " + dart.str(this.widgetType) + " is under your MultiProvider/Provider<" + dart.str(this.valueType) + ">.\n  This usually happens when you are creating a provider and trying to read it immediately.\n\n  For example, instead of:\n\n  ```\n  Widget build(BuildContext context) {\n    return Provider<Example>(\n      create: (_) => Example(),\n      // Will throw a ProviderNotFoundError, because `context` is associated\n      // to the widget that is the parent of `Provider<Example>`\n      child: Text(context.watch<Example>().toString()),\n    );\n  }\n  ```\n\n  consider using `builder` like so:\n\n  ```\n  Widget build(BuildContext context) {\n    return Provider<Example>(\n      create: (_) => Example(),\n      // we use `builder` to obtain a new `BuildContext` that has access to the provider\n      builder: (context, child) {\n        // No longer throws\n        return Text(context.watch<Example>().toString());\n      }\n    );\n  }\n  ```\n\nIf none of these solutions work, consider asking for help on StackOverflow:\nhttps://stackoverflow.com/questions/tagged/flutter\n";
    }
  };
  (provider$.ProviderNotFoundException.new = function(valueType, widgetType) {
    this[valueType$0] = valueType;
    this[widgetType$0] = widgetType;
    ;
  }).prototype = provider$.ProviderNotFoundException.prototype;
  dart.addTypeTests(provider$.ProviderNotFoundException);
  dart.addTypeCaches(provider$.ProviderNotFoundException);
  provider$.ProviderNotFoundException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(provider$.ProviderNotFoundException, I[21]);
  dart.setFieldSignature(provider$.ProviderNotFoundException, () => ({
    __proto__: dart.getFields(provider$.ProviderNotFoundException.__proto__),
    valueType: dart.finalFieldType(core.Type),
    widgetType: dart.finalFieldType(core.Type)
  }));
  dart.defineExtensionMethods(provider$.ProviderNotFoundException, ['toString']);
  const _is__Delegate_default = Symbol('_is__Delegate_default');
  provider$._Delegate$ = dart.generic(T => {
    class _Delegate extends core.Object {
      debugFillProperties(properties) {
      }
    }
    (_Delegate.new = function() {
      ;
    }).prototype = _Delegate.prototype;
    dart.addTypeTests(_Delegate);
    _Delegate.prototype[_is__Delegate_default] = true;
    dart.addTypeCaches(_Delegate);
    dart.setMethodSignature(_Delegate, () => ({
      __proto__: dart.getMethods(_Delegate.__proto__),
      debugFillProperties: dart.fnType(dart.void, [diagnostics.DiagnosticPropertiesBuilder])
    }));
    dart.setLibraryUri(_Delegate, I[21]);
    return _Delegate;
  });
  provider$._Delegate = provider$._Delegate$();
  dart.addTypeTests(provider$._Delegate, _is__Delegate_default);
  const _is__DeferredDelegate_default = Symbol('_is__DeferredDelegate_default');
  provider$._DeferredDelegate$ = dart.generic((T, R) => {
    class _DeferredDelegate extends provider$._Delegate$(R) {}
    (_DeferredDelegate.new = function(updateShouldNotify, startListening) {
      this.updateShouldNotify = updateShouldNotify;
      this.startListening = startListening;
      ;
    }).prototype = _DeferredDelegate.prototype;
    dart.addTypeTests(_DeferredDelegate);
    _DeferredDelegate.prototype[_is__DeferredDelegate_default] = true;
    dart.addTypeCaches(_DeferredDelegate);
    dart.setLibraryUri(_DeferredDelegate, I[21]);
    dart.setFieldSignature(_DeferredDelegate, () => ({
      __proto__: dart.getFields(_DeferredDelegate.__proto__),
      updateShouldNotify: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [R, R]))),
      startListening: dart.finalFieldType(dart.fnType(dart.fnType(dart.void, []), [provider$.InheritedContext$(dart.nullable(R)), dart.fnType(dart.void, [R]), T, dart.nullable(R)]))
    }));
    return _DeferredDelegate;
  });
  provider$._DeferredDelegate = provider$._DeferredDelegate$();
  dart.addTypeTests(provider$._DeferredDelegate, _is__DeferredDelegate_default);
  var _removeListener = dart.privateName(provider$, "_removeListener");
  var _value$0 = dart.privateName(provider$, "_value");
  var _hasValue = dart.privateName(provider$, "_hasValue");
  var _isNotifyDependentsEnabled = dart.privateName(provider$, "_isNotifyDependentsEnabled");
  var element = dart.privateName(provider$, "_DelegateState.element");
  var _debugSetInheritedLock = dart.privateName(provider$, "_debugSetInheritedLock");
  const _is__DelegateState_default = Symbol('_is__DelegateState_default');
  provider$._DelegateState$ = dart.generic((T, D) => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$_InheritedProviderScopeElementOfTN = () => (__t$_InheritedProviderScopeElementOfTN = dart.constFn(provider$._InheritedProviderScopeElement$(__t$TN())))();
    var __t$_InheritedProviderScopeElementNOfTN = () => (__t$_InheritedProviderScopeElementNOfTN = dart.constFn(dart.nullable(__t$_InheritedProviderScopeElementOfTN())))();
    class _DelegateState extends core.Object {
      get element() {
        return this[element];
      }
      set element(value) {
        this[element] = __t$_InheritedProviderScopeElementNOfTN().as(value);
      }
      get delegate() {
        return D.as(dart.nullCheck(this.element).widget.owner[_delegate]);
      }
      debugSetInheritedLock(value) {
        return dart.nullCheck(this.element)[_debugSetInheritedLock](value);
      }
      willUpdateDelegate(newDelegate) {
        D.as(newDelegate);
        return false;
      }
      dispose() {
      }
      debugFillProperties(properties) {
      }
      build(opts) {
        let isBuildFromExternalSources = opts && 'isBuildFromExternalSources' in opts ? opts.isBuildFromExternalSources : null;
      }
    }
    (_DelegateState.new = function() {
      this[element] = null;
      ;
    }).prototype = _DelegateState.prototype;
    dart.addTypeTests(_DelegateState);
    _DelegateState.prototype[_is__DelegateState_default] = true;
    dart.addTypeCaches(_DelegateState);
    dart.setMethodSignature(_DelegateState, () => ({
      __proto__: dart.getMethods(_DelegateState.__proto__),
      debugSetInheritedLock: dart.fnType(core.bool, [core.bool]),
      willUpdateDelegate: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      dispose: dart.fnType(dart.void, []),
      debugFillProperties: dart.fnType(dart.void, [diagnostics.DiagnosticPropertiesBuilder]),
      build: dart.fnType(dart.void, [], {}, {isBuildFromExternalSources: core.bool})
    }));
    dart.setGetterSignature(_DelegateState, () => ({
      __proto__: dart.getGetters(_DelegateState.__proto__),
      delegate: D
    }));
    dart.setLibraryUri(_DelegateState, I[21]);
    dart.setFieldSignature(_DelegateState, () => ({
      __proto__: dart.getFields(_DelegateState.__proto__),
      element: dart.fieldType(dart.nullable(provider$._InheritedProviderScopeElement$(dart.nullable(T))))
    }));
    return _DelegateState;
  });
  provider$._DelegateState = provider$._DelegateState$();
  dart.addTypeTests(provider$._DelegateState, _is__DelegateState_default);
  const _is__DeferredDelegateState_default = Symbol('_is__DeferredDelegateState_default');
  provider$._DeferredDelegateState$ = dart.generic((T, R, W) => {
    var __t$InheritedContextOfRNAndFnAndT__ToFn = () => (__t$InheritedContextOfRNAndFnAndT__ToFn = dart.constFn(dart.fnType(T$.VoidTovoid(), [__t$InheritedContextOfRN(), __t$RTovoid(), T, __t$RN()])))();
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$InheritedContextOfRN = () => (__t$InheritedContextOfRN = dart.constFn(provider$.InheritedContext$(__t$RN())))();
    var __t$RTovoid = () => (__t$RTovoid = dart.constFn(dart.fnType(dart.void, [R])))();
    var __t$RAndRTobool = () => (__t$RAndRTobool = dart.constFn(dart.fnType(core.bool, [R, R])))();
    var __t$RAndRToNbool = () => (__t$RAndRToNbool = dart.constFn(dart.nullable(__t$RAndRTobool())))();
    class _DeferredDelegateState extends provider$._DelegateState$(R, W) {
      get value() {
        let t29, t28, t27, t26, t25;
        dart.nullCheck(this.element)[_isNotifyDependentsEnabled] = false;
        this[_removeListener] == null ? this[_removeListener] = (t25 = this.delegate, t26 = dart.nullCheck(this.element), t27 = dart.bind(this, 'setState'), t28 = this.controller, t29 = this[_value$0], __t$InheritedContextOfRNAndFnAndT__ToFn().as(t25.startListening)(t26, t27, t28, t29)) : null;
        dart.nullCheck(this.element)[_isNotifyDependentsEnabled] = true;
        if (!dart.nullCheck(this.element).hasValue) dart.assertFailed("The callback \"startListening\" was called, but it left DeferredInhertitedProviderElement<" + dart.str(dart.wrapType(T)) + ", " + dart.str(dart.wrapType(R)) + ">\nin an uninitialized state.\n\nIt is necessary for \"startListening\" to call \"setState\" at least once the very\nfirst time \"value\" is requested.\n\nTo fix, consider:\n\nDeferredInheritedProvider(\n  ...,\n  startListening: (element, setState, controller, value) {\n    if (!element.hasValue) {\n      setState(myInitialValue); // TODO replace myInitialValue with your own\n    }\n    ...\n  }\n)\n    ", I[61], 109, 12, "element!.hasValue");
        if (!(this[_removeListener] != null)) dart.assertFailed(null, I[61], 128, 12, "_removeListener != null");
        return R.as(this[_value$0]);
      }
      dispose() {
        let t25;
        super.dispose();
        t25 = this[_removeListener];
        t25 == null ? null : t25();
      }
      get isLoaded() {
        return this[_removeListener] != null;
      }
      get hasValue() {
        return this[_hasValue];
      }
      setState(value) {
        R.as(value);
        if (this[_hasValue]) {
          let shouldNotify = __t$RAndRToNbool().as(this.delegate.updateShouldNotify) != null ? dart.nullCheck(__t$RAndRToNbool().as(this.delegate.updateShouldNotify))(R.as(this[_value$0]), value) : !dart.equals(this[_value$0], value);
          if (shouldNotify) {
            dart.nullCheck(this.element).markNeedsNotifyDependents();
          }
        }
        this[_hasValue] = true;
        this[_value$0] = value;
      }
    }
    (_DeferredDelegateState.new = function() {
      this[_removeListener] = null;
      this[_value$0] = null;
      this[_hasValue] = false;
      _DeferredDelegateState.__proto__.new.call(this);
      ;
    }).prototype = _DeferredDelegateState.prototype;
    dart.addTypeTests(_DeferredDelegateState);
    _DeferredDelegateState.prototype[_is__DeferredDelegateState_default] = true;
    dart.addTypeCaches(_DeferredDelegateState);
    dart.setMethodSignature(_DeferredDelegateState, () => ({
      __proto__: dart.getMethods(_DeferredDelegateState.__proto__),
      setState: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(_DeferredDelegateState, () => ({
      __proto__: dart.getGetters(_DeferredDelegateState.__proto__),
      value: R,
      isLoaded: core.bool,
      hasValue: core.bool
    }));
    dart.setLibraryUri(_DeferredDelegateState, I[21]);
    dart.setFieldSignature(_DeferredDelegateState, () => ({
      __proto__: dart.getFields(_DeferredDelegateState.__proto__),
      [_removeListener]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
      [_value$0]: dart.fieldType(dart.nullable(R)),
      [_hasValue]: dart.fieldType(core.bool)
    }));
    return _DeferredDelegateState;
  });
  provider$._DeferredDelegateState = provider$._DeferredDelegateState$();
  dart.addTypeTests(provider$._DeferredDelegateState, _is__DeferredDelegateState_default);
  const _is__CreateDeferredInheritedProvider_default = Symbol('_is__CreateDeferredInheritedProvider_default');
  provider$._CreateDeferredInheritedProvider$ = dart.generic((T, R) => {
    var __t$_CreateDeferredInheritedProviderElementOfT$R = () => (__t$_CreateDeferredInheritedProviderElementOfT$R = dart.constFn(provider$._CreateDeferredInheritedProviderElement$(T, R)))();
    class _CreateDeferredInheritedProvider extends provider$._DeferredDelegate$(T, R) {
      static ['_#new#tearOff'](T, R, opts) {
        let create = opts && 'create' in opts ? opts.create : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let startListening = opts && 'startListening' in opts ? opts.startListening : null;
        return new (provider$._CreateDeferredInheritedProvider$(T, R)).new({create: create, dispose: dispose, updateShouldNotify: updateShouldNotify, startListening: startListening});
      }
      createState() {
        return new (__t$_CreateDeferredInheritedProviderElementOfT$R()).new();
      }
    }
    (_CreateDeferredInheritedProvider.new = function(opts) {
      let create = opts && 'create' in opts ? opts.create : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      this.create = create;
      this.dispose = dispose;
      _CreateDeferredInheritedProvider.__proto__.new.call(this, updateShouldNotify, startListening);
      ;
    }).prototype = _CreateDeferredInheritedProvider.prototype;
    dart.addTypeTests(_CreateDeferredInheritedProvider);
    _CreateDeferredInheritedProvider.prototype[_is__CreateDeferredInheritedProvider_default] = true;
    dart.addTypeCaches(_CreateDeferredInheritedProvider);
    dart.setMethodSignature(_CreateDeferredInheritedProvider, () => ({
      __proto__: dart.getMethods(_CreateDeferredInheritedProvider.__proto__),
      createState: dart.fnType(provider$._CreateDeferredInheritedProviderElement$(T, R), [])
    }));
    dart.setLibraryUri(_CreateDeferredInheritedProvider, I[21]);
    dart.setFieldSignature(_CreateDeferredInheritedProvider, () => ({
      __proto__: dart.getFields(_CreateDeferredInheritedProvider.__proto__),
      create: dart.finalFieldType(dart.fnType(T, [framework.BuildContext])),
      dispose: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [framework.BuildContext, T])))
    }));
    return _CreateDeferredInheritedProvider;
  });
  provider$._CreateDeferredInheritedProvider = provider$._CreateDeferredInheritedProvider$();
  dart.addTypeTests(provider$._CreateDeferredInheritedProvider, _is__CreateDeferredInheritedProvider_default);
  var _didBuild = dart.privateName(provider$, "_didBuild");
  var _controller$ = dart.privateName(provider$, "_controller");
  const _is__CreateDeferredInheritedProviderElement_default = Symbol('_is__CreateDeferredInheritedProviderElement_default');
  provider$._CreateDeferredInheritedProviderElement$ = dart.generic((T, R) => {
    var __t$BuildContextAndTTovoid = () => (__t$BuildContextAndTTovoid = dart.constFn(dart.fnType(dart.void, [framework.BuildContext, T])))();
    var __t$BuildContextAndTToNvoid = () => (__t$BuildContextAndTToNvoid = dart.constFn(dart.nullable(__t$BuildContextAndTTovoid())))();
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    var __t$DiagnosticsPropertyOfR = () => (__t$DiagnosticsPropertyOfR = dart.constFn(diagnostics.DiagnosticsProperty$(R)))();
    class _CreateDeferredInheritedProviderElement extends provider$._DeferredDelegateState$(T, R, provider$._CreateDeferredInheritedProvider$(T, R)) {
      get controller() {
        let t26, t25;
        if (!this[_didBuild]) {
          if (!this.debugSetInheritedLock(true)) dart.assertFailed(null, I[61], 186, 14, "debugSetInheritedLock(true)");
          let _debugPreviousIsInInheritedProviderCreate = null;
          let _debugPreviousIsInInheritedProviderUpdate = null;
          if (!dart.fn(() => {
            _debugPreviousIsInInheritedProviderCreate = provider$.debugIsInInheritedProviderCreate;
            _debugPreviousIsInInheritedProviderUpdate = provider$.debugIsInInheritedProviderUpdate;
            return true;
          }, T$.VoidTobool())()) dart.assertFailed(null, I[61], 190, 14, "() {\n        _debugPreviousIsInInheritedProviderCreate =\n            debugIsInInheritedProviderCreate;\n        _debugPreviousIsInInheritedProviderUpdate =\n            debugIsInInheritedProviderUpdate;\n        return true;\n      }()");
          try {
            if (!dart.fn(() => {
              provider$.debugIsInInheritedProviderCreate = true;
              provider$.debugIsInInheritedProviderUpdate = false;
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[61], 199, 16, "() {\n          debugIsInInheritedProviderCreate = true;\n          debugIsInInheritedProviderUpdate = false;\n          return true;\n        }()");
            this[_controller$] = (t25 = this.delegate, t26 = dart.nullCheck(this.element), t25.create(t26));
          } finally {
            if (!dart.fn(() => {
              provider$.debugIsInInheritedProviderCreate = dart.nullCheck(_debugPreviousIsInInheritedProviderCreate);
              provider$.debugIsInInheritedProviderUpdate = dart.nullCheck(_debugPreviousIsInInheritedProviderUpdate);
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[61], 206, 16, "() {\n          debugIsInInheritedProviderCreate =\n              _debugPreviousIsInInheritedProviderCreate!;\n          debugIsInInheritedProviderUpdate =\n              _debugPreviousIsInInheritedProviderUpdate!;\n          return true;\n        }()");
          }
          this[_didBuild] = true;
        }
        return T.as(this[_controller$]);
      }
      dispose() {
        let t25;
        super.dispose();
        if (this[_didBuild]) {
          t25 = __t$BuildContextAndTToNvoid().as(this.delegate.dispose);
          t25 == null ? null : t25(dart.nullCheck(this.element), T.as(this[_controller$]));
        }
      }
      debugFillProperties(properties) {
        let t25, t25$;
        super.debugFillProperties(properties);
        if (this.isLoaded) {
          t25 = properties;
          (() => {
            t25.add(new (__t$DiagnosticsPropertyOfT()).new("controller", this.controller));
            t25.add(new (__t$DiagnosticsPropertyOfR()).new("value", this.value));
            return t25;
          })();
        } else {
          t25$ = properties;
          (() => {
            t25$.add(new diagnostics.FlagProperty.new("controller", {value: true, showName: true, ifTrue: "<not yet loaded>"}));
            t25$.add(new diagnostics.FlagProperty.new("value", {value: true, showName: true, ifTrue: "<not yet loaded>"}));
            return t25$;
          })();
        }
      }
      static ['_#new#tearOff'](T, R) {
        return new (provider$._CreateDeferredInheritedProviderElement$(T, R)).new();
      }
    }
    (_CreateDeferredInheritedProviderElement.new = function() {
      this[_didBuild] = false;
      this[_controller$] = null;
      _CreateDeferredInheritedProviderElement.__proto__.new.call(this);
      ;
    }).prototype = _CreateDeferredInheritedProviderElement.prototype;
    dart.addTypeTests(_CreateDeferredInheritedProviderElement);
    _CreateDeferredInheritedProviderElement.prototype[_is__CreateDeferredInheritedProviderElement_default] = true;
    dart.addTypeCaches(_CreateDeferredInheritedProviderElement);
    dart.setGetterSignature(_CreateDeferredInheritedProviderElement, () => ({
      __proto__: dart.getGetters(_CreateDeferredInheritedProviderElement.__proto__),
      controller: T
    }));
    dart.setLibraryUri(_CreateDeferredInheritedProviderElement, I[21]);
    dart.setFieldSignature(_CreateDeferredInheritedProviderElement, () => ({
      __proto__: dart.getFields(_CreateDeferredInheritedProviderElement.__proto__),
      [_didBuild]: dart.fieldType(core.bool),
      [_controller$]: dart.fieldType(dart.nullable(T))
    }));
    return _CreateDeferredInheritedProviderElement;
  });
  provider$._CreateDeferredInheritedProviderElement = provider$._CreateDeferredInheritedProviderElement$();
  dart.addTypeTests(provider$._CreateDeferredInheritedProviderElement, _is__CreateDeferredInheritedProviderElement_default);
  const _is__ValueDeferredInheritedProvider_default = Symbol('_is__ValueDeferredInheritedProvider_default');
  provider$._ValueDeferredInheritedProvider$ = dart.generic((T, R) => {
    var __t$_ValueDeferredInheritedProviderStateOfT$R = () => (__t$_ValueDeferredInheritedProviderStateOfT$R = dart.constFn(provider$._ValueDeferredInheritedProviderState$(T, R)))();
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    class _ValueDeferredInheritedProvider extends provider$._DeferredDelegate$(T, R) {
      static ['_#new#tearOff'](T, R, value, updateShouldNotify, startListening) {
        return new (provider$._ValueDeferredInheritedProvider$(T, R)).new(value, updateShouldNotify, startListening);
      }
      createState() {
        return new (__t$_ValueDeferredInheritedProviderStateOfT$R()).new();
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new (__t$DiagnosticsPropertyOfT()).new("controller", this.value));
      }
    }
    (_ValueDeferredInheritedProvider.new = function(value, updateShouldNotify, startListening) {
      this.value = value;
      _ValueDeferredInheritedProvider.__proto__.new.call(this, updateShouldNotify, startListening);
      ;
    }).prototype = _ValueDeferredInheritedProvider.prototype;
    dart.addTypeTests(_ValueDeferredInheritedProvider);
    _ValueDeferredInheritedProvider.prototype[_is__ValueDeferredInheritedProvider_default] = true;
    dart.addTypeCaches(_ValueDeferredInheritedProvider);
    dart.setMethodSignature(_ValueDeferredInheritedProvider, () => ({
      __proto__: dart.getMethods(_ValueDeferredInheritedProvider.__proto__),
      createState: dart.fnType(provider$._ValueDeferredInheritedProviderState$(T, R), [])
    }));
    dart.setLibraryUri(_ValueDeferredInheritedProvider, I[21]);
    dart.setFieldSignature(_ValueDeferredInheritedProvider, () => ({
      __proto__: dart.getFields(_ValueDeferredInheritedProvider.__proto__),
      value: dart.finalFieldType(T)
    }));
    return _ValueDeferredInheritedProvider;
  });
  provider$._ValueDeferredInheritedProvider = provider$._ValueDeferredInheritedProvider$();
  dart.addTypeTests(provider$._ValueDeferredInheritedProvider, _is__ValueDeferredInheritedProvider_default);
  const _is__ValueDeferredInheritedProviderState_default = Symbol('_is__ValueDeferredInheritedProviderState_default');
  provider$._ValueDeferredInheritedProviderState$ = dart.generic((T, R) => {
    var __t$_ValueDeferredInheritedProviderOfT$R = () => (__t$_ValueDeferredInheritedProviderOfT$R = dart.constFn(provider$._ValueDeferredInheritedProvider$(T, R)))();
    var __t$DiagnosticsPropertyOfR = () => (__t$DiagnosticsPropertyOfR = dart.constFn(diagnostics.DiagnosticsProperty$(R)))();
    class _ValueDeferredInheritedProviderState extends provider$._DeferredDelegateState$(T, R, provider$._ValueDeferredInheritedProvider$(T, R)) {
      willUpdateDelegate(oldDelegate) {
        __t$_ValueDeferredInheritedProviderOfT$R().as(oldDelegate);
        if (!dart.equals(this.delegate.value, oldDelegate.value)) {
          if (this[_removeListener] != null) {
            dart.nullCheck(this[_removeListener])();
            this[_removeListener] = null;
          }
          return true;
        }
        return false;
      }
      get controller() {
        return this.delegate.value;
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        if (this[_removeListener] != null) {
          properties.add(new (__t$DiagnosticsPropertyOfR()).new("value", this.value));
        } else {
          properties.add(new diagnostics.FlagProperty.new("value", {value: true, showName: true, ifTrue: "<not yet loaded>"}));
        }
      }
      static ['_#new#tearOff'](T, R) {
        return new (provider$._ValueDeferredInheritedProviderState$(T, R)).new();
      }
    }
    (_ValueDeferredInheritedProviderState.new = function() {
      _ValueDeferredInheritedProviderState.__proto__.new.call(this);
      ;
    }).prototype = _ValueDeferredInheritedProviderState.prototype;
    dart.addTypeTests(_ValueDeferredInheritedProviderState);
    _ValueDeferredInheritedProviderState.prototype[_is__ValueDeferredInheritedProviderState_default] = true;
    dart.addTypeCaches(_ValueDeferredInheritedProviderState);
    dart.setGetterSignature(_ValueDeferredInheritedProviderState, () => ({
      __proto__: dart.getGetters(_ValueDeferredInheritedProviderState.__proto__),
      controller: T
    }));
    dart.setLibraryUri(_ValueDeferredInheritedProviderState, I[21]);
    return _ValueDeferredInheritedProviderState;
  });
  provider$._ValueDeferredInheritedProviderState = provider$._ValueDeferredInheritedProviderState$();
  dart.addTypeTests(provider$._ValueDeferredInheritedProviderState, _is__ValueDeferredInheritedProviderState_default);
  var eventKind$ = dart.privateName(provider$, "PostEventCall.eventKind");
  var event$0 = dart.privateName(provider$, "PostEventCall.event");
  provider$.PostEventCall = class PostEventCall extends core.Object {
    get eventKind() {
      return this[eventKind$];
    }
    set eventKind(value) {
      super.eventKind = value;
    }
    get event() {
      return this[event$0];
    }
    set event(value) {
      super.event = value;
    }
    static ['_#_#tearOff'](eventKind, event) {
      return new provider$.PostEventCall.__(eventKind, event);
    }
  };
  (provider$.PostEventCall.__ = function(eventKind, event) {
    this[eventKind$] = eventKind;
    this[event$0] = event;
    ;
  }).prototype = provider$.PostEventCall.prototype;
  dart.addTypeTests(provider$.PostEventCall);
  dart.addTypeCaches(provider$.PostEventCall);
  dart.setLibraryUri(provider$.PostEventCall, I[21]);
  dart.setFieldSignature(provider$.PostEventCall, () => ({
    __proto__: dart.getFields(provider$.PostEventCall.__proto__),
    eventKind: dart.finalFieldType(core.String),
    event: dart.finalFieldType(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)))
  }));
  var logs = dart.privateName(provider$, "PostEventSpy.logs");
  var _postEvent = dart.privateName(provider$, "_postEvent");
  provider$.PostEventSpy = class PostEventSpy extends core.Object {
    get logs() {
      return this[logs];
    }
    set logs(value) {
      super.logs = value;
    }
    static ['_#_#tearOff']() {
      return new provider$.PostEventSpy.__();
    }
    dispose() {
      if (!dart.equals(provider$._debugPostEventOverride, dart.bind(this, _postEvent))) dart.assertFailed("disposed a spy different from the current spy", I[62], 43, 7, "_debugPostEventOverride == _postEvent");
      provider$._debugPostEventOverride = null;
    }
    [_postEvent](eventKind, event) {
      this.logs[$add](new provider$.PostEventCall.__(eventKind, event));
    }
  };
  (provider$.PostEventSpy.__ = function() {
    this[logs] = T$.JSArrayOfPostEventCall().of([]);
    ;
  }).prototype = provider$.PostEventSpy.prototype;
  dart.addTypeTests(provider$.PostEventSpy);
  dart.addTypeCaches(provider$.PostEventSpy);
  dart.setMethodSignature(provider$.PostEventSpy, () => ({
    __proto__: dart.getMethods(provider$.PostEventSpy.__proto__),
    dispose: dart.fnType(dart.void, []),
    [_postEvent]: dart.fnType(dart.void, [core.String, core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))])
  }));
  dart.setLibraryUri(provider$.PostEventSpy, I[21]);
  dart.setFieldSignature(provider$.PostEventSpy, () => ({
    __proto__: dart.getFields(provider$.PostEventSpy.__proto__),
    logs: dart.finalFieldType(core.List$(provider$.PostEventCall))
  }));
  var id$ = dart.privateName(provider$, "ProviderNode.id");
  var type$2 = dart.privateName(provider$, "ProviderNode.type");
  var childrenNodeIds$ = dart.privateName(provider$, "ProviderNode.childrenNodeIds");
  var _element = dart.privateName(provider$, "ProviderNode._element");
  var _element$ = dart.privateName(provider$, "_element");
  var _delegateState = dart.privateName(provider$, "_delegateState");
  provider$.ProviderNode = class ProviderNode extends core.Object {
    get id() {
      return this[id$];
    }
    set id(value) {
      super.id = value;
    }
    get type() {
      return this[type$2];
    }
    set type(value) {
      super.type = value;
    }
    get childrenNodeIds() {
      return this[childrenNodeIds$];
    }
    set childrenNodeIds(value) {
      super.childrenNodeIds = value;
    }
    get [_element$]() {
      return this[_element];
    }
    set [_element$](value) {
      super[_element$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let childrenNodeIds = opts && 'childrenNodeIds' in opts ? opts.childrenNodeIds : null;
      let type = opts && 'type' in opts ? opts.type : null;
      let element = opts && 'element' in opts ? opts.element : null;
      return new provider$.ProviderNode.new({id: id, childrenNodeIds: childrenNodeIds, type: type, element: element});
    }
    get value() {
      return this[_element$][_delegateState].value;
    }
  };
  (provider$.ProviderNode.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let childrenNodeIds = opts && 'childrenNodeIds' in opts ? opts.childrenNodeIds : null;
    let type = opts && 'type' in opts ? opts.type : null;
    let element = opts && 'element' in opts ? opts.element : null;
    this[id$] = id;
    this[childrenNodeIds$] = childrenNodeIds;
    this[type$2] = type;
    this[_element] = element;
    ;
  }).prototype = provider$.ProviderNode.prototype;
  dart.addTypeTests(provider$.ProviderNode);
  dart.addTypeCaches(provider$.ProviderNode);
  dart.setGetterSignature(provider$.ProviderNode, () => ({
    __proto__: dart.getGetters(provider$.ProviderNode.__proto__),
    value: dart.nullable(core.Object)
  }));
  dart.setLibraryUri(provider$.ProviderNode, I[21]);
  dart.setFieldSignature(provider$.ProviderNode, () => ({
    __proto__: dart.getFields(provider$.ProviderNode.__proto__),
    id: dart.finalFieldType(core.String),
    type: dart.finalFieldType(core.String),
    childrenNodeIds: dart.finalFieldType(core.List$(core.String)),
    [_element$]: dart.finalFieldType(provider$._InheritedProviderScopeElement$(dart.nullable(core.Object)))
  }));
  var _providerDetails = dart.privateName(provider$, "_providerDetails");
  provider$.ProviderBinding = class ProviderBinding extends core.Object {
    static ['_#_#tearOff']() {
      return new provider$.ProviderBinding.__();
    }
    get providerDetails() {
      return this[_providerDetails];
    }
    set providerDetails(value) {
      provider$.debugPostEvent("provider:provider_list_changed", new _js_helper.LinkedMap.new());
      this[_providerDetails] = value;
    }
    providerDidChange(providerId) {
      provider$.debugPostEvent("provider:provider_changed", new _js_helper.LinkedMap.from(["id", providerId]));
    }
  };
  (provider$.ProviderBinding.__ = function() {
    this[_providerDetails] = new (T$.IdentityMapOfString$ProviderNode()).new();
    ;
  }).prototype = provider$.ProviderBinding.prototype;
  dart.addTypeTests(provider$.ProviderBinding);
  dart.addTypeCaches(provider$.ProviderBinding);
  dart.setMethodSignature(provider$.ProviderBinding, () => ({
    __proto__: dart.getMethods(provider$.ProviderBinding.__proto__),
    providerDidChange: dart.fnType(dart.void, [core.String])
  }));
  dart.setGetterSignature(provider$.ProviderBinding, () => ({
    __proto__: dart.getGetters(provider$.ProviderBinding.__proto__),
    providerDetails: core.Map$(core.String, provider$.ProviderNode)
  }));
  dart.setSetterSignature(provider$.ProviderBinding, () => ({
    __proto__: dart.getSetters(provider$.ProviderBinding.__proto__),
    providerDetails: core.Map$(core.String, provider$.ProviderNode)
  }));
  dart.setLibraryUri(provider$.ProviderBinding, I[21]);
  dart.setFieldSignature(provider$.ProviderBinding, () => ({
    __proto__: dart.getFields(provider$.ProviderBinding.__proto__),
    [_providerDetails]: dart.fieldType(core.Map$(core.String, provider$.ProviderNode))
  }));
  dart.setStaticFieldSignature(provider$.ProviderBinding, () => ['debugInstance']);
  dart.defineLazy(provider$.ProviderBinding, {
    /*provider$.ProviderBinding.debugInstance*/get debugInstance() {
      return new provider$.ProviderBinding.__();
    }
  }, false);
  var _parent = dart.privateName(nested, "_parent");
  var _parent$ = dart.privateName(nested, "SingleChildWidgetElementMixin._parent");
  nested.SingleChildWidgetElementMixin = class SingleChildWidgetElementMixin extends framework.Element {};
  nested.SingleChildWidgetElementMixin[dart.mixinOn] = Element => class SingleChildWidgetElementMixin extends Element {
    get [_parent]() {
      return this[_parent$];
    }
    set [_parent](value) {
      this[_parent$] = value;
    }
    mount(parent, newSlot) {
      if (T$._NestedHookElementN().is(parent)) {
        this[_parent] = parent;
      }
      super.mount(parent, newSlot);
    }
    activate() {
      super.activate();
      this.visitAncestorElements(dart.fn(parent => {
        if (nested._NestedHookElement.is(parent)) {
          this[_parent] = parent;
        }
        return false;
      }, T$.ElementTobool()));
    }
  };
  (nested.SingleChildWidgetElementMixin[dart.mixinNew] = function() {
    this[_parent$] = null;
  }).prototype = nested.SingleChildWidgetElementMixin.prototype;
  dart.addTypeTests(nested.SingleChildWidgetElementMixin);
  dart.addTypeCaches(nested.SingleChildWidgetElementMixin);
  nested.SingleChildWidgetElementMixin[dart.implements] = () => [framework.Element];
  dart.setMethodSignature(nested.SingleChildWidgetElementMixin, () => ({
    __proto__: dart.getMethods(nested.SingleChildWidgetElementMixin.__proto__),
    mount: dart.fnType(dart.void, [dart.nullable(framework.Element), dart.dynamic])
  }));
  dart.setLibraryUri(nested.SingleChildWidgetElementMixin, I[14]);
  dart.setFieldSignature(nested.SingleChildWidgetElementMixin, () => ({
    __proto__: dart.getFields(nested.SingleChildWidgetElementMixin.__proto__),
    [_parent]: dart.fieldType(dart.nullable(nested._NestedHookElement))
  }));
  const StatelessElement_SingleChildWidgetElementMixin$36 = class StatelessElement_SingleChildWidgetElementMixin extends framework.StatelessElement {};
  (StatelessElement_SingleChildWidgetElementMixin$36.new = function(widget) {
    nested.SingleChildWidgetElementMixin[dart.mixinNew].call(this);
    StatelessElement_SingleChildWidgetElementMixin$36.__proto__.new.call(this, widget);
  }).prototype = StatelessElement_SingleChildWidgetElementMixin$36.prototype;
  dart.applyMixin(StatelessElement_SingleChildWidgetElementMixin$36, nested.SingleChildWidgetElementMixin);
  nested.SingleChildStatelessElement = class SingleChildStatelessElement extends StatelessElement_SingleChildWidgetElementMixin$36 {
    static ['_#new#tearOff'](widget) {
      return new nested.SingleChildStatelessElement.new(widget);
    }
    build() {
      if (this[_parent] != null) {
        return this.widget.buildWithChild(this, dart.nullCheck(this[_parent]).injectedChild);
      }
      return super.build();
    }
    get widget() {
      return nested.SingleChildStatelessWidget.as(super.widget);
    }
  };
  (nested.SingleChildStatelessElement.new = function(widget) {
    nested.SingleChildStatelessElement.__proto__.new.call(this, widget);
    ;
  }).prototype = nested.SingleChildStatelessElement.prototype;
  dart.addTypeTests(nested.SingleChildStatelessElement);
  dart.addTypeCaches(nested.SingleChildStatelessElement);
  dart.setGetterSignature(nested.SingleChildStatelessElement, () => ({
    __proto__: dart.getGetters(nested.SingleChildStatelessElement.__proto__),
    widget: nested.SingleChildStatelessWidget
  }));
  dart.setLibraryUri(nested.SingleChildStatelessElement, I[14]);
  const _is__InheritedProviderElement_default = Symbol('_is__InheritedProviderElement_default');
  provider$._InheritedProviderElement$ = dart.generic(T => {
    class _InheritedProviderElement extends nested.SingleChildStatelessElement {
      static ['_#new#tearOff'](T, widget) {
        return new (provider$._InheritedProviderElement$(T)).new(widget);
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        this.visitChildren(dart.fn(e => e.debugFillProperties(properties), T$.ElementTovoid()));
      }
    }
    (_InheritedProviderElement.new = function(widget) {
      _InheritedProviderElement.__proto__.new.call(this, widget);
      ;
    }).prototype = _InheritedProviderElement.prototype;
    dart.addTypeTests(_InheritedProviderElement);
    _InheritedProviderElement.prototype[_is__InheritedProviderElement_default] = true;
    dart.addTypeCaches(_InheritedProviderElement);
    dart.setLibraryUri(_InheritedProviderElement, I[21]);
    return _InheritedProviderElement;
  });
  provider$._InheritedProviderElement = provider$._InheritedProviderElement$();
  dart.addTypeTests(provider$._InheritedProviderElement, _is__InheritedProviderElement_default);
  const _is_InheritedContext_default = Symbol('_is_InheritedContext_default');
  provider$.InheritedContext$ = dart.generic(T => {
    class InheritedContext extends framework.BuildContext {}
    (InheritedContext.new = function() {
      ;
    }).prototype = InheritedContext.prototype;
    dart.addTypeTests(InheritedContext);
    InheritedContext.prototype[_is_InheritedContext_default] = true;
    dart.addTypeCaches(InheritedContext);
    dart.setLibraryUri(InheritedContext, I[21]);
    return InheritedContext;
  });
  provider$.InheritedContext = provider$.InheritedContext$();
  dart.addTypeTests(provider$.InheritedContext, _is_InheritedContext_default);
  var owner$ = dart.privateName(provider$, "_InheritedProviderScope.owner");
  var debugType$ = dart.privateName(provider$, "_InheritedProviderScope.debugType");
  const _is__InheritedProviderScope_default = Symbol('_is__InheritedProviderScope_default');
  provider$._InheritedProviderScope$ = dart.generic(T => {
    var __t$_InheritedProviderScopeElementOfT = () => (__t$_InheritedProviderScopeElementOfT = dart.constFn(provider$._InheritedProviderScopeElement$(T)))();
    class _InheritedProviderScope extends framework.InheritedWidget {
      get owner() {
        return this[owner$];
      }
      set owner(value) {
        super.owner = value;
      }
      get debugType() {
        return this[debugType$];
      }
      set debugType(value) {
        super.debugType = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let owner = opts && 'owner' in opts ? opts.owner : null;
        let debugType = opts && 'debugType' in opts ? opts.debugType : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (provider$._InheritedProviderScope$(T)).new({owner: owner, debugType: debugType, child: child});
      }
      updateShouldNotify(oldWidget) {
        framework.InheritedWidget.as(oldWidget);
        return false;
      }
      createElement() {
        return new (__t$_InheritedProviderScopeElementOfT()).new(this);
      }
    }
    (_InheritedProviderScope.new = function(opts) {
      let owner = opts && 'owner' in opts ? opts.owner : null;
      let debugType = opts && 'debugType' in opts ? opts.debugType : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[owner$] = owner;
      this[debugType$] = debugType;
      if (!T.is(null)) dart.assertFailed(null, I[26], 341, 16, "null is T");
      _InheritedProviderScope.__proto__.new.call(this, {child: child});
      ;
    }).prototype = _InheritedProviderScope.prototype;
    dart.addTypeTests(_InheritedProviderScope);
    _InheritedProviderScope.prototype[_is__InheritedProviderScope_default] = true;
    dart.addTypeCaches(_InheritedProviderScope);
    dart.setMethodSignature(_InheritedProviderScope, () => ({
      __proto__: dart.getMethods(_InheritedProviderScope.__proto__),
      updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      createElement: dart.fnType(provider$._InheritedProviderScopeElement$(T), [])
    }));
    dart.setLibraryUri(_InheritedProviderScope, I[21]);
    dart.setFieldSignature(_InheritedProviderScope, () => ({
      __proto__: dart.getFields(_InheritedProviderScope.__proto__),
      owner: dart.finalFieldType(provider$.InheritedProvider$(T)),
      debugType: dart.finalFieldType(core.String)
    }));
    return _InheritedProviderScope;
  });
  provider$._InheritedProviderScope = provider$._InheritedProviderScope$();
  dart.addTypeTests(provider$._InheritedProviderScope, _is__InheritedProviderScope_default);
  const _is__Dependency_default = Symbol('_is__Dependency_default');
  provider$._Dependency$ = dart.generic(T => {
    var __t$TTobool = () => (__t$TTobool = dart.constFn(dart.fnType(core.bool, [T])))();
    var __t$JSArrayOfTTobool = () => (__t$JSArrayOfTTobool = dart.constFn(_interceptors.JSArray$(__t$TTobool())))();
    class _Dependency extends core.Object {
      static ['_#new#tearOff'](T) {
        return new (provider$._Dependency$(T)).new();
      }
    }
    (_Dependency.new = function() {
      this.shouldClearSelectors = false;
      this.shouldClearMutationScheduled = false;
      this.selectors = __t$JSArrayOfTTobool().of([]);
      ;
    }).prototype = _Dependency.prototype;
    dart.addTypeTests(_Dependency);
    _Dependency.prototype[_is__Dependency_default] = true;
    dart.addTypeCaches(_Dependency);
    dart.setLibraryUri(_Dependency, I[21]);
    dart.setFieldSignature(_Dependency, () => ({
      __proto__: dart.getFields(_Dependency.__proto__),
      shouldClearSelectors: dart.fieldType(core.bool),
      shouldClearMutationScheduled: dart.fieldType(core.bool),
      selectors: dart.finalFieldType(core.List$(dart.fnType(core.bool, [T])))
    }));
    return _Dependency;
  });
  provider$._Dependency = provider$._Dependency$();
  dart.addTypeTests(provider$._Dependency, _is__Dependency_default);
  var _shouldNotifyDependents = dart.privateName(provider$, "_shouldNotifyDependents");
  var _debugInheritLocked = dart.privateName(provider$, "_debugInheritLocked");
  var _updatedShouldNotify = dart.privateName(provider$, "_updatedShouldNotify");
  var _isBuildFromExternalSources = dart.privateName(provider$, "_isBuildFromExternalSources");
  var ___InheritedProviderScopeElement__delegateState = dart.privateName(provider$, "_#_InheritedProviderScopeElement#_delegateState");
  var ___InheritedProviderScopeElement__debugId = dart.privateName(provider$, "_#_InheritedProviderScopeElement#_debugId");
  var _debugId = dart.privateName(provider$, "_debugId");
  const _is__InheritedProviderScopeElement_default = Symbol('_is__InheritedProviderScopeElement_default');
  provider$._InheritedProviderScopeElement$ = dart.generic(T => {
    var __t$_InheritedProviderScopeOfT = () => (__t$_InheritedProviderScopeOfT = dart.constFn(provider$._InheritedProviderScope$(T)))();
    var __t$_DependencyOfT = () => (__t$_DependencyOfT = dart.constFn(provider$._Dependency$(T)))();
    var __t$TTobool = () => (__t$TTobool = dart.constFn(dart.fnType(core.bool, [T])))();
    var __t$ListOfTTobool = () => (__t$ListOfTTobool = dart.constFn(core.List$(__t$TTobool())))();
    class _InheritedProviderScopeElement extends framework.InheritedElement {
      static ['_#new#tearOff'](T, widget) {
        return new (provider$._InheritedProviderScopeElement$(T)).new(widget);
      }
      get [_delegateState]() {
        let t26, t26$, t25;
        t25 = this[___InheritedProviderScopeElement__delegateState];
        return t25 == null ? (t26$ = (t26 = this.widget.owner[_delegate].createState(), (() => {
          t26.element = this;
          return t26;
        })()), this[___InheritedProviderScopeElement__delegateState] == null ? this[___InheritedProviderScopeElement__delegateState] = t26$ : dart.throw(new _internal.LateError.fieldADI("_delegateState"))) : t25;
      }
      get [_debugId]() {
        let t25;
        t25 = this[___InheritedProviderScopeElement__debugId];
        return t25 == null ? dart.throw(new _internal.LateError.fieldNI("_debugId")) : t25;
      }
      set [_debugId](_debugId$35param) {
        this[___InheritedProviderScopeElement__debugId] = _debugId$35param;
      }
      getElementForInheritedWidgetOfExactType(InheritedWidgetType) {
        let inheritedElement = null;
        this.visitAncestorElements(dart.fn(parent => {
          inheritedElement = parent.getElementForInheritedWidgetOfExactType(InheritedWidgetType);
          return false;
        }, T$.ElementTobool()));
        return inheritedElement;
      }
      mount(parent, newSlot) {
        let t25;
        {
          this[_debugId] = dart.str((t25 = provider$._InheritedProviderScopeElement._nextProviderId, provider$._InheritedProviderScopeElement._nextProviderId = t25 + 1, t25));
          provider$.ProviderBinding.debugInstance.providerDetails = (() => {
            let t25 = T$.LinkedHashMapOfString$ProviderNode().of(provider$.ProviderBinding.debugInstance.providerDetails);
            t25[$_set](this[_debugId], new provider$.ProviderNode.new({id: this[_debugId], childrenNodeIds: C[43] || CT.C43, type: this.widget.debugType, element: this}));
            return t25;
          })();
        }
        super.mount(parent, newSlot);
      }
      get widget() {
        return __t$_InheritedProviderScopeOfT().as(super.widget);
      }
      reassemble() {
        super.reassemble();
        let value = this[_delegateState].hasValue ? this[_delegateState].value : null;
        if (reassemble_handler.ReassembleHandler.is(value)) {
          value.reassemble();
        }
      }
      updateDependencies(dependent, aspect) {
        let t26;
        let dependencies = this.getDependencies(dependent);
        if (dependencies != null && !__t$_DependencyOfT().is(dependencies)) {
          return;
        }
        if (__t$TTobool().is(aspect)) {
          let selectorDependency = __t$_DependencyOfT().as((t26 = dependencies, t26 == null ? new (__t$_DependencyOfT()).new() : t26));
          if (selectorDependency.shouldClearSelectors) {
            selectorDependency.shouldClearSelectors = false;
            __t$ListOfTTobool().as(selectorDependency.selectors)[$clear]();
          }
          if (selectorDependency.shouldClearMutationScheduled === false) {
            selectorDependency.shouldClearMutationScheduled = true;
            T$.FutureOfNull().microtask(dart.fn(() => {
              let t26;
              t26 = selectorDependency;
              (() => {
                t26.shouldClearMutationScheduled = false;
                t26.shouldClearSelectors = true;
                return t26;
              })();
            }, T$.VoidToNull()));
          }
          __t$ListOfTTobool().as(selectorDependency.selectors)[$add](aspect);
          this.setDependencies(dependent, selectorDependency);
        } else {
          this.setDependencies(dependent, C[4] || CT.C4);
        }
      }
      notifyDependent(oldWidget, dependent) {
        framework.InheritedWidget.as(oldWidget);
        let dependencies = this.getDependencies(dependent);
        {
          provider$.ProviderBinding.debugInstance.providerDidChange(this[_debugId]);
        }
        let shouldNotify = false;
        if (dependencies != null) {
          if (__t$_DependencyOfT().is(dependencies)) {
            if (dependent.dirty) {
              return;
            }
            for (let updateShouldNotify of __t$ListOfTTobool().as(dependencies.selectors)) {
              try {
                if (!dart.fn(() => {
                  provider$._debugIsSelecting = true;
                  return true;
                }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 480, 20, "() {\n              _debugIsSelecting = true;\n              return true;\n            }()");
                shouldNotify = updateShouldNotify(this.value);
              } finally {
                if (!dart.fn(() => {
                  provider$._debugIsSelecting = false;
                  return true;
                }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 486, 20, "() {\n              _debugIsSelecting = false;\n              return true;\n            }()");
              }
              if (shouldNotify) {
                break;
              }
            }
          } else {
            shouldNotify = true;
          }
        }
        if (shouldNotify) {
          dependent.didChangeDependencies();
        }
      }
      update(newWidget) {
        __t$_InheritedProviderScopeOfT().as(newWidget);
        if (!dart.fn(() => {
          if (!this.widget.owner[_delegate][$runtimeType]._equals(newWidget.owner[_delegate][$runtimeType])) {
            dart.throw(new core.StateError.new("Rebuilt " + dart.str(this.widget) + " using a different constructor.\n      \nThis is likely a mistake and is unsupported.\nIf you're in this situation, consider passing a `key` unique to each individual constructor.\n"));
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 507, 12, "() {\n      if (widget.owner._delegate.runtimeType !=\n          newWidget.owner._delegate.runtimeType) {\n        throw StateError('''\nRebuilt $widget using a different constructor.\n      \nThis is likely a mistake and is unsupported.\nIf you're in this situation, consider passing a `key` unique to each individual constructor.\n''');\n      }\n      return true;\n    }()");
        this[_isBuildFromExternalSources] = true;
        this[_updatedShouldNotify] = this[_delegateState].willUpdateDelegate(newWidget.owner[_delegate]);
        super.update(newWidget);
        this[_updatedShouldNotify] = false;
      }
      updated(oldWidget) {
        framework.InheritedWidget.as(oldWidget);
        super.updated(oldWidget);
        if (this[_updatedShouldNotify]) {
          this.notifyClients(oldWidget);
        }
      }
      didChangeDependencies() {
        this[_isBuildFromExternalSources] = true;
        super.didChangeDependencies();
      }
      build() {
        if (this.widget.owner[_lazy] === false) {
          this.value;
        }
        this[_delegateState].build({isBuildFromExternalSources: this[_isBuildFromExternalSources]});
        this[_isBuildFromExternalSources] = false;
        if (this[_shouldNotifyDependents]) {
          this[_shouldNotifyDependents] = false;
          this.notifyClients(this.widget);
        }
        return super.build();
      }
      unmount() {
        let t27;
        this[_delegateState].dispose();
        {
          provider$.ProviderBinding.debugInstance.providerDetails = (t27 = (() => {
            let t26 = T$.LinkedHashMapOfString$ProviderNode().of(provider$.ProviderBinding.debugInstance.providerDetails);
            return t26;
          })(), (() => {
            t27[$remove](this[_debugId]);
            return t27;
          })());
        }
        super.unmount();
      }
      get hasValue() {
        return this[_delegateState].hasValue;
      }
      markNeedsNotifyDependents() {
        if (!this[_isNotifyDependentsEnabled]) {
          return;
        }
        this.markNeedsBuild();
        this[_shouldNotifyDependents] = true;
      }
      [_debugSetInheritedLock](value) {
        if (!dart.fn(() => {
          this[_debugInheritLocked] = value;
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 582, 12, "() {\n      _debugInheritLocked = value;\n      return true;\n    }()");
        return true;
      }
      get value() {
        return this[_delegateState].value;
      }
      dependOnInheritedElement(ancestor, opts) {
        let aspect = opts && 'aspect' in opts ? opts.aspect : null;
        if (!dart.fn(() => {
          if (this[_debugInheritLocked]) {
            dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Tried to listen to an InheritedWidget " + "in a life-cycle that will never be called again."), new assertions.ErrorDescription.new("This error typically happens when calling Provider.of with `listen` to `true`,\nin a situation where listening to the provider doesn't make sense, such as:\n- initState of a StatefulWidget\n- the \"create\" callback of a provider\n\nThis is undesired because these life-cycles are called only once in the\nlifetime of a widget. As such, while `listen` is `true`, the widget has\nno mean to handle the update scenario.\n\nTo fix, consider:\n- passing `listen: false` to `Provider.of`\n- use a life-cycle that handles updates (like didChangeDependencies)\n- use a provider that handles updates (like ProxyProvider).\n")])));
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 597, 12, "() {\n      if (_debugInheritLocked) {\n        throw FlutterError.fromParts(\n          <DiagnosticsNode>[\n            ErrorSummary(\n              'Tried to listen to an InheritedWidget '\n              'in a life-cycle that will never be called again.',\n            ),\n            ErrorDescription('''\nThis error typically happens when calling Provider.of with `listen` to `true`,\nin a situation where listening to the provider doesn't make sense, such as:\n- initState of a StatefulWidget\n- the \"create\" callback of a provider\n\nThis is undesired because these life-cycles are called only once in the\nlifetime of a widget. As such, while `listen` is `true`, the widget has\nno mean to handle the update scenario.\n\nTo fix, consider:\n- passing `listen: false` to `Provider.of`\n- use a life-cycle that handles updates (like didChangeDependencies)\n- use a provider that handles updates (like ProxyProvider).\n'''),\n          ],\n        );\n      }\n      return true;\n    }()");
        return super.dependOnInheritedElement(ancestor, {aspect: aspect});
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        this[_delegateState].debugFillProperties(properties);
      }
    }
    (_InheritedProviderScopeElement.new = function(widget) {
      this[_shouldNotifyDependents] = false;
      this[_debugInheritLocked] = false;
      this[_isNotifyDependentsEnabled] = true;
      this[_updatedShouldNotify] = false;
      this[_isBuildFromExternalSources] = false;
      this[___InheritedProviderScopeElement__delegateState] = null;
      this[___InheritedProviderScopeElement__debugId] = null;
      _InheritedProviderScopeElement.__proto__.new.call(this, widget);
      ;
    }).prototype = _InheritedProviderScopeElement.prototype;
    dart.addTypeTests(_InheritedProviderScopeElement);
    _InheritedProviderScopeElement.prototype[_is__InheritedProviderScopeElement_default] = true;
    dart.addTypeCaches(_InheritedProviderScopeElement);
    _InheritedProviderScopeElement[dart.implements] = () => [provider$.InheritedContext$(T)];
    dart.setMethodSignature(_InheritedProviderScopeElement, () => ({
      __proto__: dart.getMethods(_InheritedProviderScopeElement.__proto__),
      mount: dart.fnType(dart.void, [dart.nullable(framework.Element), dart.dynamic]),
      markNeedsNotifyDependents: dart.fnType(dart.void, []),
      [_debugSetInheritedLock]: dart.fnType(core.bool, [core.bool])
    }));
    dart.setGetterSignature(_InheritedProviderScopeElement, () => ({
      __proto__: dart.getGetters(_InheritedProviderScopeElement.__proto__),
      [_delegateState]: provider$._DelegateState$(T, provider$._Delegate$(T)),
      [_debugId]: core.String,
      widget: provider$._InheritedProviderScope$(T),
      hasValue: core.bool,
      value: T
    }));
    dart.setSetterSignature(_InheritedProviderScopeElement, () => ({
      __proto__: dart.getSetters(_InheritedProviderScopeElement.__proto__),
      [_debugId]: core.String
    }));
    dart.setLibraryUri(_InheritedProviderScopeElement, I[21]);
    dart.setFieldSignature(_InheritedProviderScopeElement, () => ({
      __proto__: dart.getFields(_InheritedProviderScopeElement.__proto__),
      [_shouldNotifyDependents]: dart.fieldType(core.bool),
      [_debugInheritLocked]: dart.fieldType(core.bool),
      [_isNotifyDependentsEnabled]: dart.fieldType(core.bool),
      [_updatedShouldNotify]: dart.fieldType(core.bool),
      [_isBuildFromExternalSources]: dart.fieldType(core.bool),
      [___InheritedProviderScopeElement__delegateState]: dart.fieldType(dart.nullable(provider$._DelegateState$(T, provider$._Delegate$(T)))),
      [___InheritedProviderScopeElement__debugId]: dart.fieldType(dart.nullable(core.String))
    }));
    dart.setStaticFieldSignature(_InheritedProviderScopeElement, () => ['_nextProviderId']);
    return _InheritedProviderScopeElement;
  });
  provider$._InheritedProviderScopeElement = provider$._InheritedProviderScopeElement$();
  dart.defineLazy(provider$._InheritedProviderScopeElement, {
    /*provider$._InheritedProviderScopeElement._nextProviderId*/get _nextProviderId() {
      return 0;
    },
    set _nextProviderId(value) {}
  }, false);
  dart.addTypeTests(provider$._InheritedProviderScopeElement, _is__InheritedProviderScopeElement_default);
  var _updateShouldNotify = dart.privateName(provider$, "_updateShouldNotify");
  const _is__CreateInheritedProvider_default = Symbol('_is__CreateInheritedProvider_default');
  provider$._CreateInheritedProvider$ = dart.generic(T => {
    var __t$_CreateInheritedProviderStateOfT = () => (__t$_CreateInheritedProviderStateOfT = dart.constFn(provider$._CreateInheritedProviderState$(T)))();
    class _CreateInheritedProvider extends provider$._Delegate$(T) {
      static ['_#new#tearOff'](T, opts) {
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let debugCheckInvalidValueType = opts && 'debugCheckInvalidValueType' in opts ? opts.debugCheckInvalidValueType : null;
        let startListening = opts && 'startListening' in opts ? opts.startListening : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        return new (provider$._CreateInheritedProvider$(T)).new({create: create, update: update, updateShouldNotify: updateShouldNotify, debugCheckInvalidValueType: debugCheckInvalidValueType, startListening: startListening, dispose: dispose});
      }
      createState() {
        return new (__t$_CreateInheritedProviderStateOfT()).new();
      }
    }
    (_CreateInheritedProvider.new = function(opts) {
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let debugCheckInvalidValueType = opts && 'debugCheckInvalidValueType' in opts ? opts.debugCheckInvalidValueType : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      this.create = create;
      this.update = update;
      this.debugCheckInvalidValueType = debugCheckInvalidValueType;
      this.startListening = startListening;
      this.dispose = dispose;
      if (!(create != null || update != null)) dart.assertFailed(null, I[26], 674, 16, "create != null || update != null");
      this[_updateShouldNotify] = updateShouldNotify;
      ;
    }).prototype = _CreateInheritedProvider.prototype;
    dart.addTypeTests(_CreateInheritedProvider);
    _CreateInheritedProvider.prototype[_is__CreateInheritedProvider_default] = true;
    dart.addTypeCaches(_CreateInheritedProvider);
    dart.setMethodSignature(_CreateInheritedProvider, () => ({
      __proto__: dart.getMethods(_CreateInheritedProvider.__proto__),
      createState: dart.fnType(provider$._CreateInheritedProviderState$(T), [])
    }));
    dart.setLibraryUri(_CreateInheritedProvider, I[21]);
    dart.setFieldSignature(_CreateInheritedProvider, () => ({
      __proto__: dart.getFields(_CreateInheritedProvider.__proto__),
      create: dart.finalFieldType(dart.nullable(dart.fnType(T, [framework.BuildContext]))),
      update: dart.finalFieldType(dart.nullable(dart.fnType(T, [framework.BuildContext, dart.nullable(T)]))),
      [_updateShouldNotify]: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [T, T]))),
      debugCheckInvalidValueType: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [T]))),
      startListening: dart.finalFieldType(dart.nullable(dart.fnType(dart.fnType(dart.void, []), [provider$.InheritedContext$(dart.nullable(T)), T]))),
      dispose: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [framework.BuildContext, T])))
    }));
    return _CreateInheritedProvider;
  });
  provider$._CreateInheritedProvider = provider$._CreateInheritedProvider$();
  dart.addTypeTests(provider$._CreateInheritedProvider, _is__CreateInheritedProvider_default);
  var _didInitValue = dart.privateName(provider$, "_didInitValue");
  var _previousWidget = dart.privateName(provider$, "_previousWidget");
  var _initError = dart.privateName(provider$, "_initError");
  const _is__CreateInheritedProviderState_default = Symbol('_is__CreateInheritedProviderState_default');
  provider$._CreateInheritedProviderState$ = dart.generic(T => {
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    var __t$TToNvoid = () => (__t$TToNvoid = dart.constFn(dart.nullable(__t$TTovoid())))();
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$BuildContextAndTNToT = () => (__t$BuildContextAndTNToT = dart.constFn(dart.fnType(T, [framework.BuildContext, __t$TN()])))();
    var __t$BuildContextAndTNToNT = () => (__t$BuildContextAndTNToNT = dart.constFn(dart.nullable(__t$BuildContextAndTNToT())))();
    var __t$InheritedContextOfTN = () => (__t$InheritedContextOfTN = dart.constFn(provider$.InheritedContext$(__t$TN())))();
    var __t$InheritedContextOfTNAndTToFn = () => (__t$InheritedContextOfTNAndTToFn = dart.constFn(dart.fnType(T$.VoidTovoid(), [__t$InheritedContextOfTN(), T])))();
    var __t$InheritedContextOfTNAndTToNFn = () => (__t$InheritedContextOfTNAndTToNFn = dart.constFn(dart.nullable(__t$InheritedContextOfTNAndTToFn())))();
    var __t$BuildContextAndTTovoid = () => (__t$BuildContextAndTTovoid = dart.constFn(dart.fnType(dart.void, [framework.BuildContext, T])))();
    var __t$BuildContextAndTToNvoid = () => (__t$BuildContextAndTToNvoid = dart.constFn(dart.nullable(__t$BuildContextAndTTovoid())))();
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    var __t$TAndTTobool = () => (__t$TAndTTobool = dart.constFn(dart.fnType(core.bool, [T, T])))();
    var __t$TAndTToNbool = () => (__t$TAndTToNbool = dart.constFn(dart.nullable(__t$TAndTTobool())))();
    class _CreateInheritedProviderState extends provider$._DelegateState$(T, provider$._CreateInheritedProvider$(T)) {
      get value() {
        let t27, t28;
        if (this[_didInitValue] && this[_initError] != null) {
          dart.throw(new core.StateError.new("Tried to read a provider that threw during the creation of its value.\n" + "The exception occurred during the creation of type " + dart.str(dart.wrapType(T)) + ".\n\n" + dart.str((t27 = this[_initError], t27 == null ? null : dart.toString(t27)))));
        }
        let _debugPreviousIsInInheritedProviderCreate = null;
        let _debugPreviousIsInInheritedProviderUpdate = null;
        if (!dart.fn(() => {
          _debugPreviousIsInInheritedProviderCreate = provider$.debugIsInInheritedProviderCreate;
          _debugPreviousIsInInheritedProviderUpdate = provider$.debugIsInInheritedProviderUpdate;
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 718, 12, "() {\n      _debugPreviousIsInInheritedProviderCreate =\n          debugIsInInheritedProviderCreate;\n      _debugPreviousIsInInheritedProviderUpdate =\n          debugIsInInheritedProviderUpdate;\n      return true;\n    }()");
        if (!this[_didInitValue]) {
          this[_didInitValue] = true;
          if (this.delegate.create != null) {
            if (!this.debugSetInheritedLock(true)) dart.assertFailed(null, I[26], 729, 16, "debugSetInheritedLock(true)");
            try {
              if (!dart.fn(() => {
                provider$.debugIsInInheritedProviderCreate = true;
                provider$.debugIsInInheritedProviderUpdate = false;
                return true;
              }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 731, 18, "() {\n            debugIsInInheritedProviderCreate = true;\n            debugIsInInheritedProviderUpdate = false;\n            return true;\n          }()");
              this[_value$0] = dart.nullCheck(this.delegate.create)(dart.nullCheck(this.element));
            } catch (e$) {
              let e = dart.getThrown(e$);
              let stackTrace = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                this[_initError] = new assertions.FlutterErrorDetails.new({library: "provider", exception: e, stack: stackTrace});
                dart.rethrow(e$);
              } else
                throw e$;
            } finally {
              if (!dart.fn(() => {
                provider$.debugIsInInheritedProviderCreate = dart.nullCheck(_debugPreviousIsInInheritedProviderCreate);
                provider$.debugIsInInheritedProviderUpdate = dart.nullCheck(_debugPreviousIsInInheritedProviderUpdate);
                return true;
              }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 745, 18, "() {\n            debugIsInInheritedProviderCreate =\n                _debugPreviousIsInInheritedProviderCreate!;\n            debugIsInInheritedProviderUpdate =\n                _debugPreviousIsInInheritedProviderUpdate!;\n            return true;\n          }()");
            }
            if (!this.debugSetInheritedLock(false)) dart.assertFailed(null, I[26], 753, 16, "debugSetInheritedLock(false)");
            if (!dart.fn(() => {
              let t28;
              t28 = __t$TToNvoid().as(this.delegate.debugCheckInvalidValueType);
              t28 == null ? null : t28(T.as(this[_value$0]));
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 755, 16, "() {\n          delegate.debugCheckInvalidValueType?.call(_value as T);\n          return true;\n        }()");
          }
          if (__t$BuildContextAndTNToNT().as(this.delegate.update) != null) {
            try {
              if (!dart.fn(() => {
                provider$.debugIsInInheritedProviderCreate = false;
                provider$.debugIsInInheritedProviderUpdate = true;
                return true;
              }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 762, 18, "() {\n            debugIsInInheritedProviderCreate = false;\n            debugIsInInheritedProviderUpdate = true;\n            return true;\n          }()");
              this[_value$0] = dart.nullCheck(__t$BuildContextAndTNToNT().as(this.delegate.update))(dart.nullCheck(this.element), this[_value$0]);
            } finally {
              if (!dart.fn(() => {
                provider$.debugIsInInheritedProviderCreate = dart.nullCheck(_debugPreviousIsInInheritedProviderCreate);
                provider$.debugIsInInheritedProviderUpdate = dart.nullCheck(_debugPreviousIsInInheritedProviderUpdate);
                return true;
              }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 769, 18, "() {\n            debugIsInInheritedProviderCreate =\n                _debugPreviousIsInInheritedProviderCreate!;\n            debugIsInInheritedProviderUpdate =\n                _debugPreviousIsInInheritedProviderUpdate!;\n            return true;\n          }()");
            }
            if (!dart.fn(() => {
              let t28;
              t28 = __t$TToNvoid().as(this.delegate.debugCheckInvalidValueType);
              t28 == null ? null : t28(T.as(this[_value$0]));
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 778, 16, "() {\n          delegate.debugCheckInvalidValueType?.call(_value as T);\n          return true;\n        }()");
          }
        }
        dart.nullCheck(this.element)[_isNotifyDependentsEnabled] = false;
        this[_removeListener] == null ? this[_removeListener] = (t28 = __t$InheritedContextOfTNAndTToNFn().as(this.delegate.startListening), t28 == null ? null : t28(dart.nullCheck(this.element), T.as(this[_value$0]))) : null;
        dart.nullCheck(this.element)[_isNotifyDependentsEnabled] = true;
        if (!(__t$InheritedContextOfTNAndTToNFn().as(this.delegate.startListening) == null || this[_removeListener] != null)) dart.assertFailed(null, I[26], 788, 12, "delegate.startListening == null || _removeListener != null");
        return T.as(this[_value$0]);
      }
      dispose() {
        let t28, t28$;
        super.dispose();
        t28 = this[_removeListener];
        t28 == null ? null : t28();
        if (this[_didInitValue]) {
          t28$ = __t$BuildContextAndTToNvoid().as(this.delegate.dispose);
          t28$ == null ? null : t28$(dart.nullCheck(this.element), T.as(this[_value$0]));
        }
      }
      debugFillProperties(properties) {
        let t28;
        super.debugFillProperties(properties);
        if (this[_didInitValue]) {
          t28 = properties;
          (() => {
            t28.add(new (__t$DiagnosticsPropertyOfT()).new("value", this.value));
            t28.add(new diagnostics.FlagProperty.new("", {value: this[_removeListener] != null, defaultValue: false, ifTrue: "listening to value"}));
            return t28;
          })();
        } else {
          properties.add(new diagnostics.FlagProperty.new("value", {value: true, showName: true, ifTrue: "<not yet loaded>"}));
        }
      }
      build(opts) {
        let t29, t28;
        let isBuildFromExternalSources = opts && 'isBuildFromExternalSources' in opts ? opts.isBuildFromExternalSources : null;
        let shouldNotify = false;
        if (isBuildFromExternalSources && this[_didInitValue] && __t$BuildContextAndTNToNT().as(this.delegate.update) != null) {
          let previousValue = this[_value$0];
          let _debugPreviousIsInInheritedProviderCreate = null;
          let _debugPreviousIsInInheritedProviderUpdate = null;
          if (!dart.fn(() => {
            _debugPreviousIsInInheritedProviderCreate = provider$.debugIsInInheritedProviderCreate;
            _debugPreviousIsInInheritedProviderUpdate = provider$.debugIsInInheritedProviderUpdate;
            return true;
          }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 839, 14, "() {\n        _debugPreviousIsInInheritedProviderCreate =\n            debugIsInInheritedProviderCreate;\n        _debugPreviousIsInInheritedProviderUpdate =\n            debugIsInInheritedProviderUpdate;\n        return true;\n      }()");
          try {
            if (!dart.fn(() => {
              provider$.debugIsInInheritedProviderCreate = false;
              provider$.debugIsInInheritedProviderUpdate = true;
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 847, 16, "() {\n          debugIsInInheritedProviderCreate = false;\n          debugIsInInheritedProviderUpdate = true;\n          return true;\n        }()");
            this[_value$0] = dart.nullCheck(__t$BuildContextAndTNToNT().as(this.delegate.update))(dart.nullCheck(this.element), T.as(this[_value$0]));
          } finally {
            if (!dart.fn(() => {
              provider$.debugIsInInheritedProviderCreate = dart.nullCheck(_debugPreviousIsInInheritedProviderCreate);
              provider$.debugIsInInheritedProviderUpdate = dart.nullCheck(_debugPreviousIsInInheritedProviderUpdate);
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 854, 16, "() {\n          debugIsInInheritedProviderCreate =\n              _debugPreviousIsInInheritedProviderCreate!;\n          debugIsInInheritedProviderUpdate =\n              _debugPreviousIsInInheritedProviderUpdate!;\n          return true;\n        }()");
          }
          if (__t$TAndTToNbool().as(this.delegate[_updateShouldNotify]) != null) {
            shouldNotify = dart.nullCheck(__t$TAndTToNbool().as(this.delegate[_updateShouldNotify]))(T.as(previousValue), T.as(this[_value$0]));
          } else {
            shouldNotify = !dart.equals(this[_value$0], previousValue);
          }
          if (shouldNotify) {
            if (!dart.fn(() => {
              let t28;
              t28 = __t$TToNvoid().as(this.delegate.debugCheckInvalidValueType);
              t28 == null ? null : t28(T.as(this[_value$0]));
              return true;
            }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 873, 16, "() {\n          delegate.debugCheckInvalidValueType?.call(_value as T);\n          return true;\n        }()");
            if (this[_removeListener] != null) {
              dart.nullCheck(this[_removeListener])();
              this[_removeListener] = null;
            }
            t28 = this[_previousWidget];
            t28 == null ? null : (t29 = __t$BuildContextAndTToNvoid().as(t28.dispose), t29 == null ? null : t29(dart.nullCheck(this.element), T.as(previousValue)));
          }
        }
        if (shouldNotify) {
          dart.nullCheck(this.element)[_shouldNotifyDependents] = true;
        }
        this[_previousWidget] = this.delegate;
        return super.build({isBuildFromExternalSources: isBuildFromExternalSources});
      }
      get hasValue() {
        return this[_didInitValue];
      }
      static ['_#new#tearOff'](T) {
        return new (provider$._CreateInheritedProviderState$(T)).new();
      }
    }
    (_CreateInheritedProviderState.new = function() {
      this[_removeListener] = null;
      this[_didInitValue] = false;
      this[_value$0] = null;
      this[_previousWidget] = null;
      this[_initError] = null;
      _CreateInheritedProviderState.__proto__.new.call(this);
      ;
    }).prototype = _CreateInheritedProviderState.prototype;
    dart.addTypeTests(_CreateInheritedProviderState);
    _CreateInheritedProviderState.prototype[_is__CreateInheritedProviderState_default] = true;
    dart.addTypeCaches(_CreateInheritedProviderState);
    dart.setGetterSignature(_CreateInheritedProviderState, () => ({
      __proto__: dart.getGetters(_CreateInheritedProviderState.__proto__),
      value: T,
      hasValue: core.bool
    }));
    dart.setLibraryUri(_CreateInheritedProviderState, I[21]);
    dart.setFieldSignature(_CreateInheritedProviderState, () => ({
      __proto__: dart.getFields(_CreateInheritedProviderState.__proto__),
      [_removeListener]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
      [_didInitValue]: dart.fieldType(core.bool),
      [_value$0]: dart.fieldType(dart.nullable(T)),
      [_previousWidget]: dart.fieldType(dart.nullable(provider$._CreateInheritedProvider$(T))),
      [_initError]: dart.fieldType(dart.nullable(assertions.FlutterErrorDetails))
    }));
    return _CreateInheritedProviderState;
  });
  provider$._CreateInheritedProviderState = provider$._CreateInheritedProviderState$();
  dart.addTypeTests(provider$._CreateInheritedProviderState, _is__CreateInheritedProviderState_default);
  const _is__ValueInheritedProvider_default = Symbol('_is__ValueInheritedProvider_default');
  provider$._ValueInheritedProvider$ = dart.generic(T => {
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    var __t$_ValueInheritedProviderStateOfT = () => (__t$_ValueInheritedProviderStateOfT = dart.constFn(provider$._ValueInheritedProviderState$(T)))();
    class _ValueInheritedProvider extends provider$._Delegate$(T) {
      static ['_#new#tearOff'](T, opts) {
        let value = opts && 'value' in opts ? opts.value : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let startListening = opts && 'startListening' in opts ? opts.startListening : null;
        return new (provider$._ValueInheritedProvider$(T)).new({value: value, updateShouldNotify: updateShouldNotify, startListening: startListening});
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new (__t$DiagnosticsPropertyOfT()).new("value", this.value));
      }
      createState() {
        return new (__t$_ValueInheritedProviderStateOfT()).new();
      }
    }
    (_ValueInheritedProvider.new = function(opts) {
      let value = opts && 'value' in opts ? opts.value : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let startListening = opts && 'startListening' in opts ? opts.startListening : null;
      this.value = value;
      this.startListening = startListening;
      this[_updateShouldNotify] = updateShouldNotify;
      ;
    }).prototype = _ValueInheritedProvider.prototype;
    dart.addTypeTests(_ValueInheritedProvider);
    _ValueInheritedProvider.prototype[_is__ValueInheritedProvider_default] = true;
    dart.addTypeCaches(_ValueInheritedProvider);
    dart.setMethodSignature(_ValueInheritedProvider, () => ({
      __proto__: dart.getMethods(_ValueInheritedProvider.__proto__),
      createState: dart.fnType(provider$._ValueInheritedProviderState$(T), [])
    }));
    dart.setLibraryUri(_ValueInheritedProvider, I[21]);
    dart.setFieldSignature(_ValueInheritedProvider, () => ({
      __proto__: dart.getFields(_ValueInheritedProvider.__proto__),
      value: dart.finalFieldType(T),
      [_updateShouldNotify]: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [T, T]))),
      startListening: dart.finalFieldType(dart.nullable(dart.fnType(dart.fnType(dart.void, []), [provider$.InheritedContext$(dart.nullable(T)), T])))
    }));
    return _ValueInheritedProvider;
  });
  provider$._ValueInheritedProvider = provider$._ValueInheritedProvider$();
  dart.addTypeTests(provider$._ValueInheritedProvider, _is__ValueInheritedProvider_default);
  const _is__ValueInheritedProviderState_default = Symbol('_is__ValueInheritedProviderState_default');
  provider$._ValueInheritedProviderState$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$InheritedContextOfTN = () => (__t$InheritedContextOfTN = dart.constFn(provider$.InheritedContext$(__t$TN())))();
    var __t$InheritedContextOfTNAndTToFn = () => (__t$InheritedContextOfTNAndTToFn = dart.constFn(dart.fnType(T$.VoidTovoid(), [__t$InheritedContextOfTN(), T])))();
    var __t$InheritedContextOfTNAndTToNFn = () => (__t$InheritedContextOfTNAndTToNFn = dart.constFn(dart.nullable(__t$InheritedContextOfTNAndTToFn())))();
    var __t$_ValueInheritedProviderOfT = () => (__t$_ValueInheritedProviderOfT = dart.constFn(provider$._ValueInheritedProvider$(T)))();
    var __t$TAndTTobool = () => (__t$TAndTTobool = dart.constFn(dart.fnType(core.bool, [T, T])))();
    var __t$TAndTToNbool = () => (__t$TAndTToNbool = dart.constFn(dart.nullable(__t$TAndTTobool())))();
    class _ValueInheritedProviderState extends provider$._DelegateState$(T, provider$._ValueInheritedProvider$(T)) {
      get value() {
        let t28;
        dart.nullCheck(this.element)[_isNotifyDependentsEnabled] = false;
        this[_removeListener] == null ? this[_removeListener] = (t28 = __t$InheritedContextOfTNAndTToNFn().as(this.delegate.startListening), t28 == null ? null : t28(dart.nullCheck(this.element), this.delegate.value)) : null;
        dart.nullCheck(this.element)[_isNotifyDependentsEnabled] = true;
        if (!(__t$InheritedContextOfTNAndTToNFn().as(this.delegate.startListening) == null || this[_removeListener] != null)) dart.assertFailed(null, I[26], 928, 12, "delegate.startListening == null || _removeListener != null");
        return this.delegate.value;
      }
      willUpdateDelegate(newDelegate) {
        __t$_ValueInheritedProviderOfT().as(newDelegate);
        let shouldNotify = null;
        if (__t$TAndTToNbool().as(this.delegate[_updateShouldNotify]) != null) {
          shouldNotify = dart.nullCheck(__t$TAndTToNbool().as(this.delegate[_updateShouldNotify]))(this.delegate.value, newDelegate.value);
        } else {
          shouldNotify = !dart.equals(newDelegate.value, this.delegate.value);
        }
        if (shouldNotify && this[_removeListener] != null) {
          dart.nullCheck(this[_removeListener])();
          this[_removeListener] = null;
        }
        return shouldNotify;
      }
      dispose() {
        let t28;
        super.dispose();
        t28 = this[_removeListener];
        t28 == null ? null : t28();
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new diagnostics.FlagProperty.new("", {value: this[_removeListener] != null, defaultValue: false, ifTrue: "listening to value"}));
      }
      get hasValue() {
        return true;
      }
      static ['_#new#tearOff'](T) {
        return new (provider$._ValueInheritedProviderState$(T)).new();
      }
    }
    (_ValueInheritedProviderState.new = function() {
      this[_removeListener] = null;
      _ValueInheritedProviderState.__proto__.new.call(this);
      ;
    }).prototype = _ValueInheritedProviderState.prototype;
    dart.addTypeTests(_ValueInheritedProviderState);
    _ValueInheritedProviderState.prototype[_is__ValueInheritedProviderState_default] = true;
    dart.addTypeCaches(_ValueInheritedProviderState);
    dart.setGetterSignature(_ValueInheritedProviderState, () => ({
      __proto__: dart.getGetters(_ValueInheritedProviderState.__proto__),
      value: T,
      hasValue: core.bool
    }));
    dart.setLibraryUri(_ValueInheritedProviderState, I[21]);
    dart.setFieldSignature(_ValueInheritedProviderState, () => ({
      __proto__: dart.getFields(_ValueInheritedProviderState.__proto__),
      [_removeListener]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [])))
    }));
    return _ValueInheritedProviderState;
  });
  provider$._ValueInheritedProviderState = provider$._ValueInheritedProviderState$();
  dart.addTypeTests(provider$._ValueInheritedProviderState, _is__ValueInheritedProviderState_default);
  var DeepCollectionEquality__unordered = dart.privateName(equality, "DeepCollectionEquality._unordered");
  var DeepCollectionEquality__base = dart.privateName(equality, "DeepCollectionEquality._base");
  provider$.debugPostEvent = function debugPostEvent(eventKind, event = C[44] || CT.C44) {
    if (provider$._debugPostEventOverride != null) {
      dart.nullCheck(provider$._debugPostEventOverride)(eventKind, event);
    } else {
      developer.postEvent(eventKind, event);
    }
  };
  provider$.spyPostEvent = function spyPostEvent() {
    if (!(provider$._debugPostEventOverride == null)) dart.assertFailed("postEvent is already spied", I[62], 22, 10, "_debugPostEventOverride == null");
    let spy = new provider$.PostEventSpy.__();
    provider$._debugPostEventOverride = dart.bind(spy, _postEvent);
    return spy;
  };
  provider$['SelectContext|select'] = function SelectContext$124select(T, R, $this, selector) {
    let t29;
    if (!!sliver.SliverWithKeepAliveWidget.is($this.widget)) dart.assertFailed("    Tried to use context.select inside a SliverList/SliderGridView.\n\n    This is likely a mistake, as instead of rebuilding only the item that cares\n    about the selected value, this would rebuild the entire list/grid.\n\n    To fix, add a `Builder` or extract the content of `itemBuilder` in a separate widget:\n\n    ```dart\n    ListView.builder(\n      itemBuilder: (context, index) {\n        return Builder(builder: (context) {\n          final todo = context.select((TodoList list) => list[index]);\n          return Text(todo.name);\n        });\n      },\n    );\n    ```\n    ", I[26], 247, 12, "widget is! SliverWithKeepAliveWidget");
    if (!(layout_builder.LayoutBuilder.is($this.widget) || $this.debugDoingBuild)) dart.assertFailed("Tried to use `context.select` outside of the `build` method of a widget.\n\nAny usage other than inside the `build` method of a widget are not supported.\n", I[26], 266, 12, "widget is LayoutBuilder || debugDoingBuild");
    let inheritedElement = provider$.Provider._inheritedElementOf(T, $this);
    try {
      let value = (t29 = inheritedElement, t29 == null ? null : t29.value);
      if (!T.is(value)) {
        dart.throw(new provider$.ProviderNullException.new(dart.wrapType(T), $this.widget[$runtimeType]));
      }
      if (!dart.fn(() => {
        provider$._debugIsSelecting = true;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 279, 14, "() {\n        _debugIsSelecting = true;\n        return true;\n      }()");
      let selected = selector(value);
      if (inheritedElement != null) {
        $this.dependOnInheritedElement(inheritedElement, {aspect: dart.fn(newValue => {
            if (!T.is(newValue)) {
              dart.throw(new provider$.ProviderNullException.new(dart.wrapType(T), $this.widget[$runtimeType]));
            }
            return !(C[45] || CT.C45).equals(selector(newValue), selected);
          }, dart.fnType(core.bool, [dart.nullable(T)]))});
      } else {
        $this.dependOnInheritedWidgetOfExactType(provider$._InheritedProviderScope$(dart.nullable(T)));
      }
      return selected;
    } finally {
      if (!dart.fn(() => {
        provider$._debugIsSelecting = false;
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 304, 14, "() {\n        _debugIsSelecting = false;\n        return true;\n      }()");
    }
  };
  provider$['SelectContext|get#select'] = function SelectContext$124get$35select($this) {
    return dart.fn((T, R, selector) => provider$['SelectContext|select'](T, R, $this, selector), T$.FnToR());
  };
  provider$['ReadContext|read'] = function ReadContext$124read(T, $this) {
    return provider$.Provider.of(T, $this, {listen: false});
  };
  provider$['ReadContext|get#read'] = function ReadContext$124get$35read($this) {
    return dart.fn(T => provider$['ReadContext|read'](T, $this), T$.VoidToT());
  };
  provider$['WatchContext|watch'] = function WatchContext$124watch(T, $this) {
    return provider$.Provider.of(T, $this);
  };
  provider$['WatchContext|get#watch'] = function WatchContext$124get$35watch($this) {
    return dart.fn(T => provider$['WatchContext|watch'](T, $this), T$.VoidToT());
  };
  dart.defineLazy(provider$, {
    /*provider$._isSoundMode*/get _isSoundMode() {
      return !T$.ListOfint().is(T$.JSArrayOfintN().of([]));
    },
    /*provider$._debugPostEventOverride*/get _debugPostEventOverride() {
      return null;
    },
    set _debugPostEventOverride(value) {},
    /*provider$._debugIsSelecting*/get _debugIsSelecting() {
      return false;
    },
    set _debugIsSelecting(value) {},
    /*provider$.debugIsInInheritedProviderUpdate*/get debugIsInInheritedProviderUpdate() {
      return false;
    },
    set debugIsInInheritedProviderUpdate(value) {},
    /*provider$.debugIsInInheritedProviderCreate*/get debugIsInInheritedProviderCreate() {
      return false;
    },
    set debugIsInInheritedProviderCreate(value) {}
  }, false);
  const _is_ProxyProvider0_default = Symbol('_is_ProxyProvider0_default');
  proxy_provider.ProxyProvider0$ = dart.generic(R => {
    var __t$RTovoid = () => (__t$RTovoid = dart.constFn(dart.fnType(dart.void, [R])))();
    class ProxyProvider0 extends provider$.InheritedProvider$(R) {
      static ['_#new#tearOff'](R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (proxy_provider.ProxyProvider0$(R)).new({key: key, create: create, update: update, updateShouldNotify: updateShouldNotify, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ProxyProvider0.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ProxyProvider0.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, update: update, dispose: dispose, updateShouldNotify: updateShouldNotify, debugCheckInvalidValueType: dart.fn(value => {
          let t34;
          t34 = provider$.Provider.debugCheckInvalidValueType;
          return t34 == null ? null : t34(R, value);
        }, __t$RTovoid()), child: child});
      ;
    }).prototype = ProxyProvider0.prototype;
    dart.addTypeTests(ProxyProvider0);
    ProxyProvider0.prototype[_is_ProxyProvider0_default] = true;
    dart.addTypeCaches(ProxyProvider0);
    dart.setLibraryUri(ProxyProvider0, I[63]);
    return ProxyProvider0;
  });
  proxy_provider.ProxyProvider0 = proxy_provider.ProxyProvider0$();
  dart.addTypeTests(proxy_provider.ProxyProvider0, _is_ProxyProvider0_default);
  const _is_ProxyProvider_default = Symbol('_is_ProxyProvider_default');
  proxy_provider.ProxyProvider$ = dart.generic((T, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ProxyProvider extends proxy_provider.ProxyProvider0$(R) {
      static ['_#new#tearOff'](T, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (proxy_provider.ProxyProvider$(T, R)).new({key: key, create: create, update: update, updateShouldNotify: updateShouldNotify, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ProxyProvider.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ProxyProvider.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, update: dart.fn((context, value) => update(context, provider$.Provider.of(T, context), value), __t$BuildContextAndRNToR()), updateShouldNotify: updateShouldNotify, dispose: dispose, child: child});
      ;
    }).prototype = ProxyProvider.prototype;
    dart.addTypeTests(ProxyProvider);
    ProxyProvider.prototype[_is_ProxyProvider_default] = true;
    dart.addTypeCaches(ProxyProvider);
    dart.setLibraryUri(ProxyProvider, I[63]);
    return ProxyProvider;
  });
  proxy_provider.ProxyProvider = proxy_provider.ProxyProvider$();
  dart.addTypeTests(proxy_provider.ProxyProvider, _is_ProxyProvider_default);
  const _is_ProxyProvider2_default = Symbol('_is_ProxyProvider2_default');
  proxy_provider.ProxyProvider2$ = dart.generic((T, T2, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ProxyProvider2 extends proxy_provider.ProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (proxy_provider.ProxyProvider2$(T, T2, R)).new({key: key, create: create, update: update, updateShouldNotify: updateShouldNotify, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ProxyProvider2.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ProxyProvider2.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, update: dart.fn((context, value) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), value), __t$BuildContextAndRNToR()), updateShouldNotify: updateShouldNotify, dispose: dispose, child: child});
      ;
    }).prototype = ProxyProvider2.prototype;
    dart.addTypeTests(ProxyProvider2);
    ProxyProvider2.prototype[_is_ProxyProvider2_default] = true;
    dart.addTypeCaches(ProxyProvider2);
    dart.setLibraryUri(ProxyProvider2, I[63]);
    return ProxyProvider2;
  });
  proxy_provider.ProxyProvider2 = proxy_provider.ProxyProvider2$();
  dart.addTypeTests(proxy_provider.ProxyProvider2, _is_ProxyProvider2_default);
  const _is_ProxyProvider3_default = Symbol('_is_ProxyProvider3_default');
  proxy_provider.ProxyProvider3$ = dart.generic((T, T2, T3, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ProxyProvider3 extends proxy_provider.ProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, T3, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (proxy_provider.ProxyProvider3$(T, T2, T3, R)).new({key: key, create: create, update: update, updateShouldNotify: updateShouldNotify, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ProxyProvider3.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ProxyProvider3.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, update: dart.fn((context, value) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), provider$.Provider.of(T3, context), value), __t$BuildContextAndRNToR()), updateShouldNotify: updateShouldNotify, dispose: dispose, child: child});
      ;
    }).prototype = ProxyProvider3.prototype;
    dart.addTypeTests(ProxyProvider3);
    ProxyProvider3.prototype[_is_ProxyProvider3_default] = true;
    dart.addTypeCaches(ProxyProvider3);
    dart.setLibraryUri(ProxyProvider3, I[63]);
    return ProxyProvider3;
  });
  proxy_provider.ProxyProvider3 = proxy_provider.ProxyProvider3$();
  dart.addTypeTests(proxy_provider.ProxyProvider3, _is_ProxyProvider3_default);
  const _is_ProxyProvider4_default = Symbol('_is_ProxyProvider4_default');
  proxy_provider.ProxyProvider4$ = dart.generic((T, T2, T3, T4, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ProxyProvider4 extends proxy_provider.ProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, T3, T4, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (proxy_provider.ProxyProvider4$(T, T2, T3, T4, R)).new({key: key, create: create, update: update, updateShouldNotify: updateShouldNotify, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ProxyProvider4.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ProxyProvider4.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, update: dart.fn((context, value) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), provider$.Provider.of(T3, context), provider$.Provider.of(T4, context), value), __t$BuildContextAndRNToR()), updateShouldNotify: updateShouldNotify, dispose: dispose, child: child});
      ;
    }).prototype = ProxyProvider4.prototype;
    dart.addTypeTests(ProxyProvider4);
    ProxyProvider4.prototype[_is_ProxyProvider4_default] = true;
    dart.addTypeCaches(ProxyProvider4);
    dart.setLibraryUri(ProxyProvider4, I[63]);
    return ProxyProvider4;
  });
  proxy_provider.ProxyProvider4 = proxy_provider.ProxyProvider4$();
  dart.addTypeTests(proxy_provider.ProxyProvider4, _is_ProxyProvider4_default);
  const _is_ProxyProvider5_default = Symbol('_is_ProxyProvider5_default');
  proxy_provider.ProxyProvider5$ = dart.generic((T, T2, T3, T4, T5, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ProxyProvider5 extends proxy_provider.ProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, T3, T4, T5, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (proxy_provider.ProxyProvider5$(T, T2, T3, T4, T5, R)).new({key: key, create: create, update: update, updateShouldNotify: updateShouldNotify, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ProxyProvider5.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ProxyProvider5.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, update: dart.fn((context, value) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), provider$.Provider.of(T3, context), provider$.Provider.of(T4, context), provider$.Provider.of(T5, context), value), __t$BuildContextAndRNToR()), updateShouldNotify: updateShouldNotify, dispose: dispose, child: child});
      ;
    }).prototype = ProxyProvider5.prototype;
    dart.addTypeTests(ProxyProvider5);
    ProxyProvider5.prototype[_is_ProxyProvider5_default] = true;
    dart.addTypeCaches(ProxyProvider5);
    dart.setLibraryUri(ProxyProvider5, I[63]);
    return ProxyProvider5;
  });
  proxy_provider.ProxyProvider5 = proxy_provider.ProxyProvider5$();
  dart.addTypeTests(proxy_provider.ProxyProvider5, _is_ProxyProvider5_default);
  const _is_ProxyProvider6_default = Symbol('_is_ProxyProvider6_default');
  proxy_provider.ProxyProvider6$ = dart.generic((T, T2, T3, T4, T5, T6, R) => {
    var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
    var __t$BuildContextAndRNToR = () => (__t$BuildContextAndRNToR = dart.constFn(dart.fnType(R, [framework.BuildContext, __t$RN()])))();
    class ProxyProvider6 extends proxy_provider.ProxyProvider0$(R) {
      static ['_#new#tearOff'](T, T2, T3, T4, T5, T6, R, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let create = opts && 'create' in opts ? opts.create : null;
        let update = opts && 'update' in opts ? opts.update : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let lazy = opts && 'lazy' in opts ? opts.lazy : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (proxy_provider.ProxyProvider6$(T, T2, T3, T4, T5, T6, R)).new({key: key, create: create, update: update, updateShouldNotify: updateShouldNotify, dispose: dispose, lazy: lazy, builder: builder, child: child});
      }
    }
    (ProxyProvider6.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let create = opts && 'create' in opts ? opts.create : null;
      let update = opts && 'update' in opts ? opts.update : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      ProxyProvider6.__proto__.new.call(this, {key: key, lazy: lazy, builder: builder, create: create, update: dart.fn((context, value) => update(context, provider$.Provider.of(T, context), provider$.Provider.of(T2, context), provider$.Provider.of(T3, context), provider$.Provider.of(T4, context), provider$.Provider.of(T5, context), provider$.Provider.of(T6, context), value), __t$BuildContextAndRNToR()), updateShouldNotify: updateShouldNotify, dispose: dispose, child: child});
      ;
    }).prototype = ProxyProvider6.prototype;
    dart.addTypeTests(ProxyProvider6);
    ProxyProvider6.prototype[_is_ProxyProvider6_default] = true;
    dart.addTypeCaches(ProxyProvider6);
    dart.setLibraryUri(ProxyProvider6, I[63]);
    return ProxyProvider6;
  });
  proxy_provider.ProxyProvider6 = proxy_provider.ProxyProvider6$();
  dart.addTypeTests(proxy_provider.ProxyProvider6, _is_ProxyProvider6_default);
  reassemble_handler.ReassembleHandler = class ReassembleHandler extends core.Object {};
  (reassemble_handler.ReassembleHandler.new = function() {
    ;
  }).prototype = reassemble_handler.ReassembleHandler.prototype;
  dart.addTypeTests(reassemble_handler.ReassembleHandler);
  dart.addTypeCaches(reassemble_handler.ReassembleHandler);
  dart.setLibraryUri(reassemble_handler.ReassembleHandler, I[64]);
  var builder$9 = dart.privateName(selector$, "Selector0.builder");
  var selector$1 = dart.privateName(selector$, "Selector0.selector");
  var _shouldRebuild = dart.privateName(selector$, "_shouldRebuild");
  const _is_Selector0_default = Symbol('_is_Selector0_default');
  selector$.Selector0$ = dart.generic(T => {
    var __t$_Selector0StateOfT = () => (__t$_Selector0StateOfT = dart.constFn(selector$._Selector0State$(T)))();
    class Selector0 extends nested.SingleChildStatefulWidget {
      get builder() {
        return this[builder$9];
      }
      set builder(value) {
        super.builder = value;
      }
      get selector() {
        return this[selector$1];
      }
      set selector(value) {
        super.selector = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let selector = opts && 'selector' in opts ? opts.selector : null;
        let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (selector$.Selector0$(T)).new({key: key, builder: builder, selector: selector, shouldRebuild: shouldRebuild, child: child});
      }
      createState() {
        return new (__t$_Selector0StateOfT()).new();
      }
    }
    (Selector0.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let selector = opts && 'selector' in opts ? opts.selector : null;
      let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[builder$9] = builder;
      this[selector$1] = selector;
      this[_shouldRebuild] = shouldRebuild;
      Selector0.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = Selector0.prototype;
    dart.addTypeTests(Selector0);
    Selector0.prototype[_is_Selector0_default] = true;
    dart.addTypeCaches(Selector0);
    dart.setMethodSignature(Selector0, () => ({
      __proto__: dart.getMethods(Selector0.__proto__),
      createState: dart.fnType(selector$._Selector0State$(T), [])
    }));
    dart.setLibraryUri(Selector0, I[65]);
    dart.setFieldSignature(Selector0, () => ({
      __proto__: dart.getFields(Selector0.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, T, dart.nullable(framework.Widget)])),
      selector: dart.finalFieldType(dart.fnType(T, [framework.BuildContext])),
      [_shouldRebuild]: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [T, T])))
    }));
    return Selector0;
  });
  selector$.Selector0 = selector$.Selector0$();
  dart.addTypeTests(selector$.Selector0, _is_Selector0_default);
  var value$0 = dart.privateName(selector$, "_Selector0State.value");
  const _is__Selector0State_default = Symbol('_is__Selector0State_default');
  selector$._Selector0State$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$TAndTTobool = () => (__t$TAndTTobool = dart.constFn(dart.fnType(core.bool, [T, T])))();
    var __t$TAndTToNbool = () => (__t$TAndTToNbool = dart.constFn(dart.nullable(__t$TAndTTobool())))();
    var __t$BuildContextAndTAndWidgetNToWidget = () => (__t$BuildContextAndTAndWidgetNToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T, T$.WidgetN()])))();
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    class _Selector0State extends nested.SingleChildState$(selector$.Selector0$(T)) {
      get value() {
        return this[value$0];
      }
      set value(value) {
        this[value$0] = __t$TN().as(value);
      }
      buildWithChild(context, child) {
        let t35, t34;
        let selected = (t34 = this.widget, t35 = context, t34.selector(t35));
        let shouldInvalidateCache = !dart.equals(this.oldWidget, this.widget) || __t$TAndTToNbool().as(this.widget[_shouldRebuild]) != null && dart.nullCheck(__t$TAndTToNbool().as(this.widget[_shouldRebuild]))(T.as(this.value), selected) || __t$TAndTToNbool().as(this.widget[_shouldRebuild]) == null && !(C[45] || CT.C45).equals(this.value, selected);
        if (shouldInvalidateCache) {
          this.value = selected;
          this.oldWidget = this.widget;
          this.cache = new basic.Builder.new({builder: dart.fn(context => {
              let t37, t36, t35, t34;
              t34 = this.widget;
              t35 = context;
              t36 = selected;
              t37 = child;
              return __t$BuildContextAndTAndWidgetNToWidget().as(t34.builder)(t35, t36, t37);
            }, T$.BuildContextToWidget())});
        }
        return dart.nullCheck(this.cache);
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new (__t$DiagnosticsPropertyOfT()).new("value", this.value));
      }
      static ['_#new#tearOff'](T) {
        return new (selector$._Selector0State$(T)).new();
      }
    }
    (_Selector0State.new = function() {
      this[value$0] = null;
      this.cache = null;
      this.oldWidget = null;
      _Selector0State.__proto__.new.call(this);
      ;
    }).prototype = _Selector0State.prototype;
    dart.addTypeTests(_Selector0State);
    _Selector0State.prototype[_is__Selector0State_default] = true;
    dart.addTypeCaches(_Selector0State);
    dart.setMethodSignature(_Selector0State, () => ({
      __proto__: dart.getMethods(_Selector0State.__proto__),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setLibraryUri(_Selector0State, I[65]);
    dart.setFieldSignature(_Selector0State, () => ({
      __proto__: dart.getFields(_Selector0State.__proto__),
      value: dart.fieldType(dart.nullable(T)),
      cache: dart.fieldType(dart.nullable(framework.Widget)),
      oldWidget: dart.fieldType(dart.nullable(framework.Widget))
    }));
    return _Selector0State;
  });
  selector$._Selector0State = selector$._Selector0State$();
  dart.addTypeTests(selector$._Selector0State, _is__Selector0State_default);
  const _is_Selector_default = Symbol('_is_Selector_default');
  selector$.Selector$ = dart.generic((A, S) => {
    var __t$BuildContextToS = () => (__t$BuildContextToS = dart.constFn(dart.fnType(S, [framework.BuildContext])))();
    class Selector extends selector$.Selector0$(S) {
      static ['_#new#tearOff'](A, S, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let selector = opts && 'selector' in opts ? opts.selector : null;
        let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (selector$.Selector$(A, S)).new({key: key, builder: builder, selector: selector, shouldRebuild: shouldRebuild, child: child});
      }
    }
    (Selector.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let selector = opts && 'selector' in opts ? opts.selector : null;
      let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
      let child = opts && 'child' in opts ? opts.child : null;
      Selector.__proto__.new.call(this, {key: key, shouldRebuild: shouldRebuild, builder: builder, selector: dart.fn(context => selector(context, provider$.Provider.of(A, context)), __t$BuildContextToS()), child: child});
      ;
    }).prototype = Selector.prototype;
    dart.addTypeTests(Selector);
    Selector.prototype[_is_Selector_default] = true;
    dart.addTypeCaches(Selector);
    dart.setLibraryUri(Selector, I[65]);
    return Selector;
  });
  selector$.Selector = selector$.Selector$();
  dart.addTypeTests(selector$.Selector, _is_Selector_default);
  const _is_Selector2_default = Symbol('_is_Selector2_default');
  selector$.Selector2$ = dart.generic((A, B, S) => {
    var __t$BuildContextToS = () => (__t$BuildContextToS = dart.constFn(dart.fnType(S, [framework.BuildContext])))();
    class Selector2 extends selector$.Selector0$(S) {
      static ['_#new#tearOff'](A, B, S, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let selector = opts && 'selector' in opts ? opts.selector : null;
        let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (selector$.Selector2$(A, B, S)).new({key: key, builder: builder, selector: selector, shouldRebuild: shouldRebuild, child: child});
      }
    }
    (Selector2.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let selector = opts && 'selector' in opts ? opts.selector : null;
      let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
      let child = opts && 'child' in opts ? opts.child : null;
      Selector2.__proto__.new.call(this, {key: key, shouldRebuild: shouldRebuild, builder: builder, selector: dart.fn(context => selector(context, provider$.Provider.of(A, context), provider$.Provider.of(B, context)), __t$BuildContextToS()), child: child});
      ;
    }).prototype = Selector2.prototype;
    dart.addTypeTests(Selector2);
    Selector2.prototype[_is_Selector2_default] = true;
    dart.addTypeCaches(Selector2);
    dart.setLibraryUri(Selector2, I[65]);
    return Selector2;
  });
  selector$.Selector2 = selector$.Selector2$();
  dart.addTypeTests(selector$.Selector2, _is_Selector2_default);
  const _is_Selector3_default = Symbol('_is_Selector3_default');
  selector$.Selector3$ = dart.generic((A, B, C, S) => {
    var __t$BuildContextToS = () => (__t$BuildContextToS = dart.constFn(dart.fnType(S, [framework.BuildContext])))();
    class Selector3 extends selector$.Selector0$(S) {
      static ['_#new#tearOff'](A, B, C, S, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let selector = opts && 'selector' in opts ? opts.selector : null;
        let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (selector$.Selector3$(A, B, C, S)).new({key: key, builder: builder, selector: selector, shouldRebuild: shouldRebuild, child: child});
      }
    }
    (Selector3.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let selector = opts && 'selector' in opts ? opts.selector : null;
      let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
      let child = opts && 'child' in opts ? opts.child : null;
      Selector3.__proto__.new.call(this, {key: key, shouldRebuild: shouldRebuild, builder: builder, selector: dart.fn(context => selector(context, provider$.Provider.of(A, context), provider$.Provider.of(B, context), provider$.Provider.of(C, context)), __t$BuildContextToS()), child: child});
      ;
    }).prototype = Selector3.prototype;
    dart.addTypeTests(Selector3);
    Selector3.prototype[_is_Selector3_default] = true;
    dart.addTypeCaches(Selector3);
    dart.setLibraryUri(Selector3, I[65]);
    return Selector3;
  });
  selector$.Selector3 = selector$.Selector3$();
  dart.addTypeTests(selector$.Selector3, _is_Selector3_default);
  const _is_Selector4_default = Symbol('_is_Selector4_default');
  selector$.Selector4$ = dart.generic((A, B, C, D, S) => {
    var __t$BuildContextToS = () => (__t$BuildContextToS = dart.constFn(dart.fnType(S, [framework.BuildContext])))();
    class Selector4 extends selector$.Selector0$(S) {
      static ['_#new#tearOff'](A, B, C, D, S, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let selector = opts && 'selector' in opts ? opts.selector : null;
        let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (selector$.Selector4$(A, B, C, D, S)).new({key: key, builder: builder, selector: selector, shouldRebuild: shouldRebuild, child: child});
      }
    }
    (Selector4.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let selector = opts && 'selector' in opts ? opts.selector : null;
      let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
      let child = opts && 'child' in opts ? opts.child : null;
      Selector4.__proto__.new.call(this, {key: key, shouldRebuild: shouldRebuild, builder: builder, selector: dart.fn(context => selector(context, provider$.Provider.of(A, context), provider$.Provider.of(B, context), provider$.Provider.of(C, context), provider$.Provider.of(D, context)), __t$BuildContextToS()), child: child});
      ;
    }).prototype = Selector4.prototype;
    dart.addTypeTests(Selector4);
    Selector4.prototype[_is_Selector4_default] = true;
    dart.addTypeCaches(Selector4);
    dart.setLibraryUri(Selector4, I[65]);
    return Selector4;
  });
  selector$.Selector4 = selector$.Selector4$();
  dart.addTypeTests(selector$.Selector4, _is_Selector4_default);
  const _is_Selector5_default = Symbol('_is_Selector5_default');
  selector$.Selector5$ = dart.generic((A, B, C, D, E, S) => {
    var __t$BuildContextToS = () => (__t$BuildContextToS = dart.constFn(dart.fnType(S, [framework.BuildContext])))();
    class Selector5 extends selector$.Selector0$(S) {
      static ['_#new#tearOff'](A, B, C, D, E, S, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let selector = opts && 'selector' in opts ? opts.selector : null;
        let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (selector$.Selector5$(A, B, C, D, E, S)).new({key: key, builder: builder, selector: selector, shouldRebuild: shouldRebuild, child: child});
      }
    }
    (Selector5.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let selector = opts && 'selector' in opts ? opts.selector : null;
      let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
      let child = opts && 'child' in opts ? opts.child : null;
      Selector5.__proto__.new.call(this, {key: key, shouldRebuild: shouldRebuild, builder: builder, selector: dart.fn(context => selector(context, provider$.Provider.of(A, context), provider$.Provider.of(B, context), provider$.Provider.of(C, context), provider$.Provider.of(D, context), provider$.Provider.of(E, context)), __t$BuildContextToS()), child: child});
      ;
    }).prototype = Selector5.prototype;
    dart.addTypeTests(Selector5);
    Selector5.prototype[_is_Selector5_default] = true;
    dart.addTypeCaches(Selector5);
    dart.setLibraryUri(Selector5, I[65]);
    return Selector5;
  });
  selector$.Selector5 = selector$.Selector5$();
  dart.addTypeTests(selector$.Selector5, _is_Selector5_default);
  const _is_Selector6_default = Symbol('_is_Selector6_default');
  selector$.Selector6$ = dart.generic((A, B, C, D, E, F, S) => {
    var __t$BuildContextToS = () => (__t$BuildContextToS = dart.constFn(dart.fnType(S, [framework.BuildContext])))();
    class Selector6 extends selector$.Selector0$(S) {
      static ['_#new#tearOff'](A, B, C, D, E, F, S, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let selector = opts && 'selector' in opts ? opts.selector : null;
        let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (selector$.Selector6$(A, B, C, D, E, F, S)).new({key: key, builder: builder, selector: selector, shouldRebuild: shouldRebuild, child: child});
      }
    }
    (Selector6.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let selector = opts && 'selector' in opts ? opts.selector : null;
      let shouldRebuild = opts && 'shouldRebuild' in opts ? opts.shouldRebuild : null;
      let child = opts && 'child' in opts ? opts.child : null;
      Selector6.__proto__.new.call(this, {key: key, shouldRebuild: shouldRebuild, builder: builder, selector: dart.fn(context => selector(context, provider$.Provider.of(A, context), provider$.Provider.of(B, context), provider$.Provider.of(C, context), provider$.Provider.of(D, context), provider$.Provider.of(E, context), provider$.Provider.of(F, context)), __t$BuildContextToS()), child: child});
      ;
    }).prototype = Selector6.prototype;
    dart.addTypeTests(Selector6);
    Selector6.prototype[_is_Selector6_default] = true;
    dart.addTypeCaches(Selector6);
    dart.setLibraryUri(Selector6, I[65]);
    return Selector6;
  });
  selector$.Selector6 = selector$.Selector6$();
  dart.addTypeTests(selector$.Selector6, _is_Selector6_default);
  var _valueListenable = dart.privateName(value_listenable_provider, "_valueListenable");
  var _updateShouldNotify$ = dart.privateName(value_listenable_provider, "_updateShouldNotify");
  const _is_ValueListenableProvider_default = Symbol('_is_ValueListenableProvider_default');
  value_listenable_provider.ValueListenableProvider$ = dart.generic(T => {
    var __t$ValueListenableBuilderOfT = () => (__t$ValueListenableBuilderOfT = dart.constFn(value_listenable_builder.ValueListenableBuilder$(T)))();
    var __t$ProviderOfT = () => (__t$ProviderOfT = dart.constFn(provider$.Provider$(T)))();
    var __t$BuildContextAndTAndWidgetNToProviderOfT = () => (__t$BuildContextAndTAndWidgetNToProviderOfT = dart.constFn(dart.fnType(__t$ProviderOfT(), [framework.BuildContext, T, T$.WidgetN()])))();
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    class ValueListenableProvider extends nested.SingleChildStatelessWidget {
      static ['_#value#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
        let child = opts && 'child' in opts ? opts.child : null;
        return new (value_listenable_provider.ValueListenableProvider$(T)).value({key: key, value: value, updateShouldNotify: updateShouldNotify, child: child});
      }
      buildWithChild(context, child) {
        return new (__t$ValueListenableBuilderOfT()).new({valueListenable: this[_valueListenable], builder: dart.fn((context, value, _) => new (__t$ProviderOfT()).value({value: value, updateShouldNotify: this[_updateShouldNotify$], child: child}), __t$BuildContextAndTAndWidgetNToProviderOfT())});
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new (__t$DiagnosticsPropertyOfT()).new("value", this[_valueListenable].value));
      }
    }
    (ValueListenableProvider.value = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let updateShouldNotify = opts && 'updateShouldNotify' in opts ? opts.updateShouldNotify : null;
      let child = opts && 'child' in opts ? opts.child : null;
      this[_valueListenable] = value;
      this[_updateShouldNotify$] = updateShouldNotify;
      ValueListenableProvider.__proto__.new.call(this, {key: key, child: child});
      ;
    }).prototype = ValueListenableProvider.prototype;
    dart.addTypeTests(ValueListenableProvider);
    ValueListenableProvider.prototype[_is_ValueListenableProvider_default] = true;
    dart.addTypeCaches(ValueListenableProvider);
    dart.setMethodSignature(ValueListenableProvider, () => ({
      __proto__: dart.getMethods(ValueListenableProvider.__proto__),
      buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
    }));
    dart.setLibraryUri(ValueListenableProvider, I[66]);
    dart.setFieldSignature(ValueListenableProvider, () => ({
      __proto__: dart.getFields(ValueListenableProvider.__proto__),
      [_valueListenable]: dart.finalFieldType(change_notifier.ValueListenable$(T)),
      [_updateShouldNotify$]: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [T, T])))
    }));
    return ValueListenableProvider;
  });
  value_listenable_provider.ValueListenableProvider = value_listenable_provider.ValueListenableProvider$();
  dart.addTypeTests(value_listenable_provider.ValueListenableProvider, _is_ValueListenableProvider_default);
  var index$ = dart.privateName(edit_card, "EditCardPage.index");
  edit_card.EditCardPage = class EditCardPage extends framework.StatefulWidget {
    get index() {
      return this[index$];
    }
    set index(value) {
      super.index = value;
    }
    static ['_#new#tearOff'](opts) {
      let index = opts && 'index' in opts ? opts.index : null;
      return new edit_card.EditCardPage.new({index: index});
    }
    createState() {
      return new edit_card._EditCardPageState.new();
    }
  };
  (edit_card.EditCardPage.new = function(opts) {
    let index = opts && 'index' in opts ? opts.index : null;
    this[index$] = index;
    edit_card.EditCardPage.__proto__.new.call(this);
    ;
  }).prototype = edit_card.EditCardPage.prototype;
  dart.addTypeTests(edit_card.EditCardPage);
  dart.addTypeCaches(edit_card.EditCardPage);
  dart.setMethodSignature(edit_card.EditCardPage, () => ({
    __proto__: dart.getMethods(edit_card.EditCardPage.__proto__),
    createState: dart.fnType(edit_card._EditCardPageState, [])
  }));
  dart.setLibraryUri(edit_card.EditCardPage, I[67]);
  dart.setFieldSignature(edit_card.EditCardPage, () => ({
    __proto__: dart.getFields(edit_card.EditCardPage.__proto__),
    index: dart.finalFieldType(core.int)
  }));
  var ___EditCardPageState__cardNameController = dart.privateName(edit_card, "_#_EditCardPageState#_cardNameController");
  var ___EditCardPageState__tasks = dart.privateName(edit_card, "_#_EditCardPageState#_tasks");
  var _cardNameController$ = dart.privateName(edit_card, "_cardNameController");
  var _tasks$ = dart.privateName(edit_card, "_tasks");
  var _addTask$ = dart.privateName(edit_card, "_addTask");
  var _removeTask$ = dart.privateName(edit_card, "_removeTask");
  var _saveChanges = dart.privateName(edit_card, "_saveChanges");
  var _deleteCard = dart.privateName(edit_card, "_deleteCard");
  var _confirmDeleteCard = dart.privateName(edit_card, "_confirmDeleteCard");
  edit_card._EditCardPageState = class _EditCardPageState extends framework.State$(edit_card.EditCardPage) {
    get [_cardNameController$]() {
      let t34;
      t34 = this[___EditCardPageState__cardNameController];
      return t34 == null ? dart.throw(new _internal.LateError.fieldNI("_cardNameController")) : t34;
    }
    set [_cardNameController$](_cardNameController$35param) {
      this[___EditCardPageState__cardNameController] = _cardNameController$35param;
    }
    get [_tasks$]() {
      let t34;
      t34 = this[___EditCardPageState__tasks];
      return t34 == null ? dart.throw(new _internal.LateError.fieldNI("_tasks")) : t34;
    }
    set [_tasks$](_tasks$35param) {
      this[___EditCardPageState__tasks] = _tasks$35param;
    }
    initState() {
      super.initState();
      let card = provider$['ReadContext|read'](task_bloc.TaskBloc, this.context).state.cards[$_get](this.widget.index);
      this[_cardNameController$] = new editable_text.TextEditingController.new({text: card.cardName});
      this[_tasks$] = T$.ListOfTask().from(card.tasks);
    }
    dispose() {
      this[_cardNameController$].dispose();
      super.dispose();
    }
    [_addTask$]() {
      this.setState(dart.fn(() => {
        this[_tasks$][$add](new task_model.Task.new({description: "", isDone: false}));
      }, T$.VoidTovoid()));
    }
    [_removeTask$](index) {
      this.setState(dart.fn(() => {
        this[_tasks$][$removeAt](index);
      }, T$.VoidTovoid()));
    }
    [_saveChanges]() {
      provider$['ReadContext|read'](task_bloc.TaskBloc, this.context).add(new task_bloc.EditCard.new(this.widget.index, this[_cardNameController$].text, this[_tasks$]));
      navigator.Navigator.pop(T$.ObjectN(), this.context);
    }
    [_confirmDeleteCard]() {
      dialog.showDialog(dart.dynamic, {context: this.context, builder: dart.fn(context => new dialog.AlertDialog.new({title: new text.Text.new("Подтверждение удаления"), content: new text.Text.new("Вы уверены, что хотите удалить эту карточку?"), actions: T$.JSArrayOfWidget().of([new text_button.TextButton.new({onPressed: dart.fn(() => navigator.Navigator.pop(T$.ObjectN(), context), T$.VoidTovoid()), child: new text.Text.new("Отмена")}), new text_button.TextButton.new({onPressed: dart.fn(() => {
                navigator.Navigator.pop(T$.ObjectN(), context);
                this[_deleteCard]();
              }, T$.VoidTovoid()), child: new text.Text.new("Удалить")})])}), T$.BuildContextToAlertDialog())});
    }
    [_deleteCard]() {
      provider$['ReadContext|read'](task_bloc.TaskBloc, this.context).add(new task_bloc.DeleteCard.new(this.widget.index));
      navigator.Navigator.pop(T$.ObjectN(), this.context);
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Редактирование карточки"), actions: T$.JSArrayOfWidget().of([new icon_button.IconButton.new({icon: new icon.Icon.new(icons.Icons.delete), onPressed: dart.bind(this, _confirmDeleteCard)})])}), body: new basic.Padding.new({padding: C[1] || CT.C1, child: new basic.Column.new({children: T$.JSArrayOfWidget().of([new text_field.TextField.new({controller: this[_cardNameController$], decoration: new input_decorator.InputDecoration.new({labelText: "Название карточки"})}), new basic.SizedBox.new({height: 20}), new basic.Expanded.new({child: new scroll_view.ListView.builder({itemCount: this[_tasks$][$length], itemBuilder: dart.fn((context, index) => new list_tile.ListTile.new({title: new text_field.TextField.new({controller: new editable_text.TextEditingController.new({text: this[_tasks$][$_get](index).description}), decoration: new input_decorator.InputDecoration.new({labelText: "Описание задачи"}), onChanged: dart.fn(value => {
                        this[_tasks$][$_get](index).description = value;
                      }, T$.StringTovoid())}), trailing: new icon_button.IconButton.new({icon: new icon.Icon.new(icons.Icons.delete), onPressed: dart.fn(() => this[_removeTask$](index), T$.VoidTovoid())})}), T$.BuildContextAndintToListTile())})}), new elevated_button.ElevatedButton.new({onPressed: dart.bind(this, _addTask$), child: new text.Text.new("Добавить задачу")}), new basic.SizedBox.new({height: 20}), new elevated_button.ElevatedButton.new({onPressed: dart.bind(this, _saveChanges), child: new text.Text.new("Сохранить")})])})})});
    }
    static ['_#new#tearOff']() {
      return new edit_card._EditCardPageState.new();
    }
  };
  (edit_card._EditCardPageState.new = function() {
    this[___EditCardPageState__cardNameController] = null;
    this[___EditCardPageState__tasks] = null;
    edit_card._EditCardPageState.__proto__.new.call(this);
    ;
  }).prototype = edit_card._EditCardPageState.prototype;
  dart.addTypeTests(edit_card._EditCardPageState);
  dart.addTypeCaches(edit_card._EditCardPageState);
  dart.setMethodSignature(edit_card._EditCardPageState, () => ({
    __proto__: dart.getMethods(edit_card._EditCardPageState.__proto__),
    [_addTask$]: dart.fnType(dart.void, []),
    [_removeTask$]: dart.fnType(dart.void, [core.int]),
    [_saveChanges]: dart.fnType(dart.void, []),
    [_confirmDeleteCard]: dart.fnType(dart.void, []),
    [_deleteCard]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(edit_card._EditCardPageState, () => ({
    __proto__: dart.getGetters(edit_card._EditCardPageState.__proto__),
    [_cardNameController$]: editable_text.TextEditingController,
    [_tasks$]: core.List$(task_model.Task)
  }));
  dart.setSetterSignature(edit_card._EditCardPageState, () => ({
    __proto__: dart.getSetters(edit_card._EditCardPageState.__proto__),
    [_cardNameController$]: editable_text.TextEditingController,
    [_tasks$]: core.List$(task_model.Task)
  }));
  dart.setLibraryUri(edit_card._EditCardPageState, I[67]);
  dart.setFieldSignature(edit_card._EditCardPageState, () => ({
    __proto__: dart.getFields(edit_card._EditCardPageState.__proto__),
    [___EditCardPageState__cardNameController]: dart.fieldType(dart.nullable(editable_text.TextEditingController)),
    [___EditCardPageState__tasks]: dart.fieldType(dart.nullable(core.List$(task_model.Task)))
  }));
  var xhrs = dart.privateName(browser_adapter, "BrowserHttpClientAdapter.xhrs");
  var withCredentials$ = dart.privateName(browser_adapter, "BrowserHttpClientAdapter.withCredentials");
  browser_adapter.BrowserHttpClientAdapter = class BrowserHttpClientAdapter extends core.Object {
    get xhrs() {
      return this[xhrs];
    }
    set xhrs(value) {
      super.xhrs = value;
    }
    get withCredentials() {
      return this[withCredentials$];
    }
    set withCredentials(value) {
      this[withCredentials$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let withCredentials = opts && 'withCredentials' in opts ? opts.withCredentials : false;
      return new browser_adapter.BrowserHttpClientAdapter.new({withCredentials: withCredentials});
    }
    fetch(options, requestStream, cancelFuture) {
      return async.async(adapter.ResponseBody, (function* fetch() {
        let t34, t34$, t34$0, t34$1, t34$2;
        let xhr = html.HttpRequest.new();
        this.xhrs.add(xhr);
        t34 = xhr;
        (() => {
          t34.open(options.method, dart.str(options.uri));
          t34[$responseType] = "arraybuffer";
          return t34;
        })();
        let withCredentialsOption = options.extra[$_get]("withCredentials");
        if (withCredentialsOption != null) {
          xhr.withCredentials = dart.equals(withCredentialsOption, true);
        } else {
          xhr.withCredentials = this.withCredentials;
        }
        options.headers[$remove]("content-length");
        options.headers[$forEach](dart.fn((key, v) => {
          if (core.Iterable.is(v)) {
            xhr.setRequestHeader(key, v[$join](", "));
          } else {
            xhr.setRequestHeader(key, dart.toString(v));
          }
        }, T$.StringAnddynamicTovoid()));
        let sendTimeout = (t34$ = options.sendTimeout, t34$ == null ? core.Duration.zero : t34$);
        let connectTimeout = (t34$0 = options.connectTimeout, t34$0 == null ? core.Duration.zero : t34$0);
        let receiveTimeout = (t34$1 = options.receiveTimeout, t34$1 == null ? core.Duration.zero : t34$1);
        let xhrTimeout = connectTimeout['+'](receiveTimeout).inMilliseconds;
        xhr.timeout = xhrTimeout;
        let completer = T$.CompleterOfResponseBody().new();
        xhr[$onLoad].first.then(core.Null, dart.fn(_ => {
          let body = typed_data.ByteBuffer.as(xhr[$response])[$asUint8List]();
          completer.complete(new adapter.ResponseBody.fromBytes(body, dart.nullCheck(xhr.status), {headers: xhr[$responseHeaders][$map](core.String, T$.ListOfString(), dart.fn((k, v) => new (T$.MapEntryOfString$ListOfString()).__(k, v[$split](",")), T$.StringAndStringToMapEntryOfString$ListOfString())), statusMessage: xhr.statusText, isRedirect: xhr.status === 302 || xhr.status === 301 || options.uri.toString() !== xhr[$responseUrl]}));
        }, T$.ProgressEventToNull()));
        let connectTimeoutTimer = null;
        if (connectTimeout['>'](core.Duration.zero)) {
          connectTimeoutTimer = async.Timer.new(connectTimeout, dart.fn(() => {
            connectTimeoutTimer = null;
            if (completer.isCompleted) {
              return;
            }
            xhr.abort();
            completer.completeError(dio_exception.DioException.connectionTimeout({requestOptions: options, timeout: connectTimeout}), core.StackTrace.current);
          }, T$.VoidTovoid()));
        }
        if (requestStream != null) {
          if (connectTimeoutTimer != null) {
            xhr[$upload][$onProgress].listen(dart.fn(event => {
              let t34;
              t34 = connectTimeoutTimer;
              t34 == null ? null : t34.cancel();
              connectTimeoutTimer = null;
            }, T$.ProgressEventTovoid()));
          }
          if (sendTimeout['>'](core.Duration.zero)) {
            let uploadStopwatch = new core.Stopwatch.new();
            xhr[$upload][$onProgress].listen(dart.fn(event => {
              if (!uploadStopwatch.isRunning) {
                uploadStopwatch.start();
              }
              let duration = uploadStopwatch.elapsed;
              if (duration['>'](sendTimeout)) {
                uploadStopwatch.stop();
                completer.completeError(dio_exception.DioException.sendTimeout({timeout: sendTimeout, requestOptions: options}), core.StackTrace.current);
                xhr.abort();
              }
            }, T$.ProgressEventTovoid()));
          }
          let onSendProgress = options.onSendProgress;
          if (onSendProgress != null) {
            xhr[$upload][$onProgress].listen(dart.fn(event => {
              if (event.loaded != null && event.total != null) {
                onSendProgress(dart.nullCheck(event.loaded), dart.nullCheck(event.total));
              }
            }, T$.ProgressEventTovoid()));
          }
        } else {
          if (sendTimeout['>'](core.Duration.zero)) {
            utils.debugLog("sendTimeout cannot be used without a request body to send", core.StackTrace.current);
          }
          if (options.onSendProgress != null) {
            utils.debugLog("onSendProgress cannot be used without a request body to send", core.StackTrace.current);
          }
        }
        let receiveStopwatch = new core.Stopwatch.new();
        let receiveTimer = null;
        function stopWatchReceiveTimeout() {
          let t34;
          t34 = receiveTimer;
          t34 == null ? null : t34.cancel();
          receiveTimer = null;
          receiveStopwatch.stop();
        }
        dart.fn(stopWatchReceiveTimeout, T$.VoidTovoid());
        function watchReceiveTimeout() {
          let t34;
          if (receiveTimeout['<='](core.Duration.zero)) {
            return;
          }
          receiveStopwatch.reset();
          if (!receiveStopwatch.isRunning) {
            receiveStopwatch.start();
          }
          t34 = receiveTimer;
          t34 == null ? null : t34.cancel();
          receiveTimer = async.Timer.new(receiveTimeout, dart.fn(() => {
            if (!completer.isCompleted) {
              xhr.abort();
              completer.completeError(dio_exception.DioException.receiveTimeout({timeout: receiveTimeout, requestOptions: options}), core.StackTrace.current);
            }
            stopWatchReceiveTimeout();
          }, T$.VoidTovoid()));
        }
        dart.fn(watchReceiveTimeout, T$.VoidTovoid());
        xhr[$onProgress].listen(dart.fn(event => {
          if (connectTimeoutTimer != null) {
            dart.nullCheck(connectTimeoutTimer).cancel();
            connectTimeoutTimer = null;
          }
          watchReceiveTimeout();
          if (options.onReceiveProgress != null && event.loaded != null && event.total != null) {
            dart.nullCheck(options.onReceiveProgress)(dart.nullCheck(event.loaded), dart.nullCheck(event.total));
          }
        }, T$.ProgressEventTovoid()), {onDone: dart.fn(() => stopWatchReceiveTimeout(), T$.VoidTovoid())});
        xhr[$onError].first.then(core.Null, dart.fn(_ => {
          let t34;
          t34 = connectTimeoutTimer;
          t34 == null ? null : t34.cancel();
          completer.completeError(dio_exception.DioException.connectionError({requestOptions: options, reason: "The XMLHttpRequest onError callback was called. " + "This typically indicates an error on the network layer."}), core.StackTrace.current);
        }, T$.ProgressEventToNull()));
        xhr[$onTimeout].first.then(core.Null, dart.fn(_ => {
          let t34;
          let isConnectTimeout = connectTimeoutTimer != null;
          if (connectTimeoutTimer != null) {
            t34 = connectTimeoutTimer;
            t34 == null ? null : t34.cancel();
          }
          if (!completer.isCompleted) {
            if (isConnectTimeout) {
              completer.completeError(dio_exception.DioException.connectionTimeout({timeout: connectTimeout, requestOptions: options}));
            } else {
              completer.completeError(dio_exception.DioException.receiveTimeout({timeout: new core.Duration.new({milliseconds: xhrTimeout}), requestOptions: options}), core.StackTrace.current);
            }
          }
        }, T$.ProgressEventToNull()));
        t34$2 = cancelFuture;
        t34$2 == null ? null : t34$2.then(core.Null, dart.fn(_ => {
          let t35;
          if (xhr[$readyState] < 4 && xhr[$readyState] > 0) {
            t35 = connectTimeoutTimer;
            t35 == null ? null : t35.cancel();
            try {
              xhr.abort();
            } catch (e) {
              let _ = dart.getThrown(e);
              if (core.Object.is(_)) {
              } else
                throw e;
            }
            if (!completer.isCompleted) {
              completer.completeError(dio_exception.DioException.requestCancelled({requestOptions: options, reason: "The XMLHttpRequest was aborted."}));
            }
          }
        }, T$.voidToNull()));
        if (requestStream != null) {
          if (options.method === "GET") {
            utils.debugLog("GET request with a body data are not support on the " + "web platform. Use POST/PUT instead.", core.StackTrace.current);
          }
          let completer = T$.CompleterOfUint8List().new();
          let sink = new convert._ByteCallbackSink.new(dart.fn(bytes => completer.complete(typed_data.Uint8List.is(bytes) ? bytes : _native_typed_data.NativeUint8List.fromList(bytes)), T$.ListOfintTovoid()));
          requestStream.listen(T$.ListOfintTovoid().as(dart.bind(sink, 'add')), {onError: dart.fn((e, s) => completer.completeError(e, s), T$.ObjectAndStackTraceTovoid()), onDone: dart.bind(sink, 'close'), cancelOnError: true});
          let bytes = (yield completer.future);
          xhr.send(bytes);
        } else {
          xhr.send();
        }
        return completer.future.whenComplete(dart.fn(() => {
          this.xhrs.remove(xhr);
        }, T$.VoidToNull()));
      }).bind(this));
    }
    close(opts) {
      let force = opts && 'force' in opts ? opts.force : false;
      if (force) {
        for (let xhr of this.xhrs) {
          xhr.abort();
        }
      }
      this.xhrs.clear();
    }
  };
  (browser_adapter.BrowserHttpClientAdapter.new = function(opts) {
    let withCredentials = opts && 'withCredentials' in opts ? opts.withCredentials : false;
    this[xhrs] = T$.LinkedHashSetOfHttpRequest().new();
    this[withCredentials$] = withCredentials;
    ;
  }).prototype = browser_adapter.BrowserHttpClientAdapter.prototype;
  dart.addTypeTests(browser_adapter.BrowserHttpClientAdapter);
  dart.addTypeCaches(browser_adapter.BrowserHttpClientAdapter);
  browser_adapter.BrowserHttpClientAdapter[dart.implements] = () => [adapter.HttpClientAdapter];
  dart.setMethodSignature(browser_adapter.BrowserHttpClientAdapter, () => ({
    __proto__: dart.getMethods(browser_adapter.BrowserHttpClientAdapter.__proto__),
    fetch: dart.fnType(async.Future$(adapter.ResponseBody), [options$.RequestOptions, dart.nullable(async.Stream$(typed_data.Uint8List)), dart.nullable(async.Future$(dart.void))]),
    close: dart.fnType(dart.void, [], {force: core.bool}, {})
  }));
  dart.setLibraryUri(browser_adapter.BrowserHttpClientAdapter, I[68]);
  dart.setFieldSignature(browser_adapter.BrowserHttpClientAdapter, () => ({
    __proto__: dart.getFields(browser_adapter.BrowserHttpClientAdapter.__proto__),
    xhrs: dart.finalFieldType(core.Set$(html.HttpRequest)),
    withCredentials: dart.fieldType(core.bool)
  }));
  browser_adapter.createAdapter = function createAdapter() {
    return new browser_adapter.BrowserHttpClientAdapter.new();
  };
  var __Dio_transformer$ = dart.privateName(dio_for_browser, "_#Dio#transformer");
  var __Dio_httpClientAdapter$ = dart.privateName(dio_for_browser, "_#Dio#httpClientAdapter");
  var __Dio_options$ = dart.privateName(dio_for_browser, "_#Dio#options");
  var __Dio_transformer_ = dart.privateName(dio_for_browser, "_#Dio#transformer=");
  var __Dio_httpClientAdapter_ = dart.privateName(dio_for_browser, "_#Dio#httpClientAdapter=");
  var __Dio_options_ = dart.privateName(dio_for_browser, "_#Dio#options=");
  const Object_DioMixin$36 = class Object_DioMixin extends core.Object {};
  (Object_DioMixin$36.new = function() {
    dio_mixin.DioMixin.new.call(this);
  }).prototype = Object_DioMixin$36.prototype;
  dart.applyMixin(Object_DioMixin$36, dio_mixin.DioMixin);
  dio_for_browser.DioForBrowser = class DioForBrowser extends Object_DioMixin$36 {
    static ['_#new#tearOff'](options = null) {
      return new dio_for_browser.DioForBrowser.new(options);
    }
    download(urlPath, savePath, opts) {
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let deleteOnError = opts && 'deleteOnError' in opts ? opts.deleteOnError : true;
      let lengthHeader = opts && 'lengthHeader' in opts ? opts.lengthHeader : "content-length";
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      dart.throw(new core.UnsupportedError.new("The download method is not available in the Web environment."));
    }
    get [__Dio_transformer]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[47] || CT.C47)));
    }
    get [__Dio_httpClientAdapter]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[48] || CT.C48)));
    }
    get [__Dio_options]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[49] || CT.C49)));
    }
    set [__Dio_transformer](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[50] || CT.C50, value)));
    }
    set [__Dio_httpClientAdapter](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[51] || CT.C51, value)));
    }
    set [__Dio_options](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[52] || CT.C52, value)));
    }
  };
  (dio_for_browser.DioForBrowser.new = function(options = null) {
    let t35;
    dio_for_browser.DioForBrowser.__proto__.new.call(this);
    this.options = (t35 = options, t35 == null ? new options$.BaseOptions.new() : t35);
    this.httpClientAdapter = new browser_adapter.BrowserHttpClientAdapter.new();
  }).prototype = dio_for_browser.DioForBrowser.prototype;
  dart.addTypeTests(dio_for_browser.DioForBrowser);
  dart.addTypeCaches(dio_for_browser.DioForBrowser);
  dio_for_browser.DioForBrowser[dart.implements] = () => [dio$.Dio];
  dart.setGetterSignature(dio_for_browser.DioForBrowser, () => ({
    __proto__: dart.getGetters(dio_for_browser.DioForBrowser.__proto__),
    [__Dio_transformer]: dart.nullable(transformer.Transformer),
    [__Dio_httpClientAdapter]: dart.nullable(adapter.HttpClientAdapter),
    [__Dio_options]: dart.nullable(options$.BaseOptions)
  }));
  dart.setSetterSignature(dio_for_browser.DioForBrowser, () => ({
    __proto__: dart.getSetters(dio_for_browser.DioForBrowser.__proto__),
    [__Dio_transformer]: dart.nullable(transformer.Transformer),
    [__Dio_httpClientAdapter]: dart.nullable(adapter.HttpClientAdapter),
    [__Dio_options]: dart.nullable(options$.BaseOptions)
  }));
  dart.setLibraryUri(dio_for_browser.DioForBrowser, I[69]);
  dio_for_browser.createDio = function createDio(options = null) {
    return new dio_for_browser.DioForBrowser.new(options);
  };
  imply_content_type.ImplyContentTypeInterceptor = class ImplyContentTypeInterceptor extends dio_mixin.Interceptor {
    static ['_#new#tearOff']() {
      return new imply_content_type.ImplyContentTypeInterceptor.new();
    }
    onRequest(options, handler) {
      let data = options.data;
      if (data != null && options.contentType == null) {
        let contentType = null;
        if (form_data.FormData.is(data)) {
          contentType = "multipart/form-data";
        } else if (T$.ListOfMap().is(data) || core.Map.is(data) || typeof data == 'string') {
          contentType = "application/json";
        } else {
          utils.debugLog(dart.str(dart.runtimeType(data)) + " cannot be used " + "to imply a default content-type, " + "please set a proper content-type in the request.", core.StackTrace.current);
          contentType = null;
        }
        options.contentType = contentType;
      }
      handler.next(options);
    }
  };
  (imply_content_type.ImplyContentTypeInterceptor.new = function() {
    imply_content_type.ImplyContentTypeInterceptor.__proto__.new.call(this);
    ;
  }).prototype = imply_content_type.ImplyContentTypeInterceptor.prototype;
  dart.addTypeTests(imply_content_type.ImplyContentTypeInterceptor);
  dart.addTypeCaches(imply_content_type.ImplyContentTypeInterceptor);
  dart.setLibraryUri(imply_content_type.ImplyContentTypeInterceptor, I[70]);
  response_stream_handler.handleResponseStream = function handleResponseStream(options, response, opts) {
    let t41, t41$;
    let onReceiveTimeoutWatchCancelled = opts && 'onReceiveTimeoutWatchCancelled' in opts ? opts.onReceiveTimeoutWatchCancelled : null;
    let source = response.stream;
    let responseSink = T$.StreamControllerOfUint8List().new();
    let responseSubscription = null;
    function responseSubscription$35get() {
      let t36;
      t36 = responseSubscription;
      return t36 == null ? dart.throw(new _internal.LateError.localNI("responseSubscription")) : t36;
    }
    function responseSubscription$35set(responseSubscription$35param) {
      return responseSubscription = responseSubscription$35param;
    }
    let totalLength = null;
    function totalLength$35get() {
      let t39;
      t39 = totalLength;
      return t39 == null ? dart.throw(new _internal.LateError.localNI("totalLength")) : t39;
    }
    function totalLength$35set(totalLength$35param) {
      return totalLength = totalLength$35param;
    }
    let receivedLength = 0;
    if (options.onReceiveProgress != null) {
      totalLength$35set(response.contentLength);
    }
    let receiveTimeout = (t41 = options.receiveTimeout, t41 == null ? core.Duration.zero : t41);
    let receiveStopwatch = new core.Stopwatch.new();
    let receiveTimer = null;
    function stopWatchReceiveTimeout() {
      let t41, t41$, t41$0;
      t41 = onReceiveTimeoutWatchCancelled;
      t41 == null ? null : t41();
      t41$ = receiveTimer;
      t41$ == null ? null : t41$.cancel();
      receiveTimer = null;
      t41$0 = receiveStopwatch;
      (() => {
        t41$0.stop();
        t41$0.reset();
        return t41$0;
      })();
    }
    dart.fn(stopWatchReceiveTimeout, T$.VoidTovoid());
    function watchReceiveTimeout() {
      let t41, t41$;
      if (receiveTimeout['<='](core.Duration.zero)) {
        return;
      }
      t41 = receiveTimer;
      t41 == null ? null : t41.cancel();
      t41$ = receiveStopwatch;
      (() => {
        t41$.reset();
        t41$.start();
        return t41$;
      })();
      receiveTimer = async.Timer.new(receiveTimeout, dart.fn(() => {
        stopWatchReceiveTimeout();
        response.close();
        responseSubscription$35get().cancel();
        response_stream_handler['_extension#0|addErrorAndClose'](responseSink, dio_exception.DioException.receiveTimeout({timeout: receiveTimeout, requestOptions: options}));
      }, T$.VoidTovoid()));
    }
    dart.fn(watchReceiveTimeout, T$.VoidTovoid());
    responseSubscription$35set(source.listen(dart.fn(data => {
      let t41;
      watchReceiveTimeout();
      if (receiveStopwatch.elapsed['<='](receiveTimeout)) {
        responseSink.add(data);
        t41 = options.onReceiveProgress;
        t41 == null ? null : t41(receivedLength = receivedLength + data[$length], totalLength$35get());
      }
    }, T$.Uint8ListTovoid()), {onError: dart.fn((error, stackTrace) => {
        stopWatchReceiveTimeout();
        response_stream_handler['_extension#0|addErrorAndClose'](responseSink, core.Object.as(error), T$.StackTraceN().as(stackTrace));
      }, T$.dynamicAnddynamicToNull()), onDone: dart.fn(() => {
        stopWatchReceiveTimeout();
        responseSubscription$35get().cancel();
        responseSink.close();
      }, T$.VoidTovoid()), cancelOnError: true}));
    t41$ = options.cancelToken;
    t41$ == null ? null : t41$.whenCancel.whenComplete(dart.fn(() => {
      stopWatchReceiveTimeout();
      response.close();
      responseSubscription$35get().cancel();
      response_stream_handler['_extension#0|addErrorAndClose'](responseSink, dart.nullCheck(dart.nullCheck(options.cancelToken).cancelError));
    }, T$.VoidToNull()));
    return responseSink.stream;
  };
  response_stream_handler['_extension#0|addErrorAndClose'] = function _extension$350$124addErrorAndClose($this, error, stackTrace = null) {
    if (!$this.isClosed) {
      $this.addError(error, stackTrace);
      $this.close();
    }
  };
  response_stream_handler['_extension#0|get#addErrorAndClose'] = function _extension$350$124get$35addErrorAndClose($this) {
    return dart.fn((error, stackTrace = null) => response_stream_handler['_extension#0|addErrorAndClose']($this, error, stackTrace), T$.ObjectAndStackTraceNTovoid());
  };
  browser_progress_stream.addProgress = function addProgress(stream, length, options) {
    if (T$.StreamOfUint8List().is(stream)) {
      return stream;
    }
    let streamTransformer = browser_progress_stream._transform(T$.ListOfint(), stream, length, options);
    return stream.transform(typed_data.Uint8List, streamTransformer);
  };
  browser_progress_stream._transform = function _transform(S, stream, length, options) {
    return new (async._StreamHandlerTransformer$(S, typed_data.Uint8List)).new({handleData: dart.fn((data, sink) => {
        let t43;
        let cancelToken = options.cancelToken;
        if (cancelToken != null && cancelToken.isCancelled) {
          cancelToken.requestOptions = options;
          t43 = sink;
          (() => {
            t43.addError(dart.nullCheck(cancelToken.cancelError));
            t43.close();
            return t43;
          })();
        } else {
          if (typed_data.Uint8List.is(data)) {
            sink.add(data);
          } else {
            sink.add(_native_typed_data.NativeUint8List.fromList(data));
          }
        }
      }, dart.fnType(dart.void, [S, T$.EventSinkOfUint8List()]))});
  };
  var Latin1Codec__allowInvalid = dart.privateName(convert, "Latin1Codec._allowInvalid");
  utils.writeStreamToSink = function writeStreamToSink(stream, sink) {
    let completer = async.Completer.new();
    stream.listen(T$.dynamicTovoid().as(dart.bind(sink, 'add')), {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => completer.complete(), T$.VoidTovoid())});
    return completer.future;
  };
  utils.encodingForCharset = function encodingForCharset(charset, fallback = C[53] || CT.C53) {
    let t43;
    if (charset == null) return fallback;
    let encoding = convert.Encoding.getByName(charset);
    t43 = encoding;
    return t43 == null ? fallback : t43;
  };
  utils.encodeMap = function encodeMap(data, handler, opts) {
    let encode = opts && 'encode' in opts ? opts.encode : true;
    let isQuery = opts && 'isQuery' in opts ? opts.isQuery : false;
    let listFormat = opts && 'listFormat' in opts ? opts.listFormat : C[22] || CT.C22;
    let urlData = new core.StringBuffer.new("");
    let first = true;
    let leftBracket = isQuery || !encode ? "[" : "%5B";
    let rightBracket = isQuery || !encode ? "]" : "%5D";
    let encodeComponent = encode ? C[54] || CT.C54 : dart.fn(e => e, T$.StringToString());
    function maybeEncode(value) {
      if (!isQuery || value == null || !(typeof value == 'string')) {
        return value;
      }
      return encodeComponent(value);
    }
    dart.fn(maybeEncode, T$.ObjectNToObjectN());
    function urlEncode(sub, path) {
      let format = parameter.ListParam.is(sub) ? sub.format : listFormat;
      let separatorChar = utils._getSeparatorChar(format, isQuery);
      if (parameter.ListParam.is(sub)) {
        sub = sub.value;
      }
      if (core.List.is(sub)) {
        if (format === options$.ListFormat.multi || format === options$.ListFormat.multiCompatible) {
          for (let i = 0; i < sub[$length]; i = i + 1) {
            let isCollection = core.Map.is(sub[$_get](i)) || core.List.is(sub[$_get](i)) || parameter.ListParam.is(sub[$_get](i));
            if (format === options$.ListFormat.multi) {
              urlEncode(maybeEncode(sub[$_get](i)), path + (isCollection ? leftBracket + dart.str(i) + rightBracket : ""));
            } else {
              urlEncode(maybeEncode(sub[$_get](i)), path + leftBracket + dart.str(isCollection ? i : "") + rightBracket);
            }
          }
        } else {
          urlEncode(sub[$map](T$.ObjectN(), maybeEncode)[$join](separatorChar), path);
        }
      } else if (core.Map.is(sub)) {
        sub[$forEach](dart.fn((k, v) => {
          if (path === "") {
            urlEncode(maybeEncode(v), encodeComponent(core.String.as(k)));
          } else {
            urlEncode(maybeEncode(v), path + leftBracket + encodeComponent(core.String.as(k)) + rightBracket);
          }
        }, T$.dynamicAnddynamicTovoid()));
      } else {
        let str = handler(path, sub);
        let isNotEmpty = str != null && str[$trim]()[$isNotEmpty];
        if (!first && isNotEmpty) {
          urlData.write("&");
        }
        first = false;
        if (isNotEmpty) {
          urlData.write(str);
        }
      }
    }
    dart.fn(urlEncode, T$.ObjectNAndStringTovoid());
    urlEncode(data, "");
    return urlData.toString();
  };
  utils._getSeparatorChar = function _getSeparatorChar(collectionFormat, isQuery) {
    switch (collectionFormat) {
      case C[30] || CT.C30:
        {
          return ",";
        }
      case C[31] || CT.C31:
        {
          return isQuery ? "%20" : " ";
        }
      case C[32] || CT.C32:
        {
          return "\\t";
        }
      case C[33] || CT.C33:
        {
          return "|";
        }
      default:
        {
          return "";
        }
    }
  };
  utils.caseInsensitiveKeyMap = function caseInsensitiveKeyMap(V, value = null) {
    let map = collection.LinkedHashMap$(core.String, V).new({equals: dart.fn((key1, key2) => key1[$toLowerCase]() === key2[$toLowerCase](), T$.StringAndStringTobool()), hashCode: dart.fn(key => key[$toLowerCase]()[$hashCode], T$.StringToint())});
    if (value != null && value[$isNotEmpty]) map[$addAll](value);
    return map;
  };
  utils.debugLog = function debugLog(message, stackTrace) {
    {
      developer.log(message, {level: 900, name: "🔔 Dio", stackTrace: stackTrace});
    }
  };
  dart.defineLazy(utils, {
    /*utils.kIsWeb*/get kIsWeb() {
      return true;
    },
    /*utils.kReleaseMode*/get kReleaseMode() {
      return false;
    }
  }, false);
  browser_multipart_file.multipartFileFromPath = function multipartFileFromPath(filePath, opts) {
    let filename = opts && 'filename' in opts ? opts.filename : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return dart.throw(browser_multipart_file._err);
  };
  browser_multipart_file.multipartFileFromPathSync = function multipartFileFromPathSync(filePath, opts) {
    let filename = opts && 'filename' in opts ? opts.filename : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return dart.throw(browser_multipart_file._err);
  };
  dart.defineLazy(browser_multipart_file, {
    /*browser_multipart_file._err*/get _err() {
      return new core.UnsupportedError.new("MultipartFile is only supported where dart:io is available.");
    }
  }, false);
  dart.defineLazy(compute, {
    /*compute.compute*/get compute() {
      return C[55] || CT.C55;
    }
  }, false);
  plugin_platform_interface.MockPlatformInterfaceMixin = class MockPlatformInterfaceMixin extends core.Object {};
  (plugin_platform_interface.MockPlatformInterfaceMixin.new = function() {
    ;
  }).prototype = plugin_platform_interface.MockPlatformInterfaceMixin.prototype;
  dart.addTypeTests(plugin_platform_interface.MockPlatformInterfaceMixin);
  dart.addTypeCaches(plugin_platform_interface.MockPlatformInterfaceMixin);
  plugin_platform_interface.MockPlatformInterfaceMixin[dart.implements] = () => [plugin_platform_interface.PlatformInterface];
  dart.setLibraryUri(plugin_platform_interface.MockPlatformInterfaceMixin, I[9]);
  method_channel_shared_preferences.MethodChannelSharedPreferencesStore = class MethodChannelSharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    remove(key) {
      return async.async(core.bool, function* remove() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "remove", new (T$.IdentityMapOfString$dynamic()).from(["key", key])));
      });
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, function* setValue() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "set" + valueType, new (T$.IdentityMapOfString$dynamic()).from(["key", key, "value", value])));
      });
    }
    clear() {
      return async.async(core.bool, function* clear() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "clear"));
      });
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, function* clearWithParameters() {
        let t43;
        let filter = parameters.filter;
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "clearWithParameters", new (T$.IdentityMapOfString$dynamic()).from(["prefix", filter.prefix, "allowList", (t43 = filter.allowList, t43 == null ? null : t43[$toList]())])));
      });
    }
    getAll() {
      return async.async(T$.MapOfString$Object(), function* getAll() {
        let t43;
        t43 = (yield method_channel_shared_preferences._kChannel.invokeMapMethod(core.String, core.Object, "getAll"));
        return t43 == null ? new (T$.IdentityMapOfString$Object()).new() : t43;
      });
    }
    getAllWithPrefix(prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return async.async(T$.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T$.MapOfString$Object(), function* getAllWithParameters() {
        let t43, t43$;
        let filter = parameters.filter;
        let allowListAsList = (t43 = filter.allowList, t43 == null ? null : t43[$toList]());
        t43$ = (yield method_channel_shared_preferences._kChannel.invokeMapMethod(core.String, core.Object, "getAllWithParameters", new (T$.IdentityMapOfString$dynamic()).from(["prefix", filter.prefix, "allowList", allowListAsList])));
        return t43$ == null ? new (T$.IdentityMapOfString$Object()).new() : t43$;
      });
    }
    static ['_#new#tearOff']() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    }
  };
  (method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new = function() {
    method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = method_channel_shared_preferences.MethodChannelSharedPreferencesStore.prototype;
  dart.addTypeTests(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.addTypeCaches(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.setMethodSignature(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, () => ({
    __proto__: dart.getMethods(method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    getAllWithPrefix: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [core.String], {allowList: dart.nullable(core.Set$(core.String))}, {})
  }));
  dart.setLibraryUri(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, I[71]);
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  dart.defineLazy(method_channel_shared_preferences, {
    /*method_channel_shared_preferences._kChannel*/get _kChannel() {
      return C[56] || CT.C56;
    }
  }, false);
  const StatelessElement_SingleChildWidgetElementMixin$36$ = class StatelessElement_SingleChildWidgetElementMixin extends framework.StatelessElement {};
  (StatelessElement_SingleChildWidgetElementMixin$36$.new = function(widget) {
    nested.SingleChildWidgetElementMixin[dart.mixinNew].call(this);
    StatelessElement_SingleChildWidgetElementMixin$36$.__proto__.new.call(this, widget);
  }).prototype = StatelessElement_SingleChildWidgetElementMixin$36$.prototype;
  dart.applyMixin(StatelessElement_SingleChildWidgetElementMixin$36$, nested.SingleChildWidgetElementMixin);
  nested._NestedElement = class _NestedElement extends StatelessElement_SingleChildWidgetElementMixin$36$ {
    static ['_#new#tearOff'](widget) {
      return new nested._NestedElement.new(widget);
    }
    get widget() {
      return nested.Nested.as(super.widget);
    }
    build() {
      let t43, t43$, t43$0;
      let nestedHook = null;
      let nextNode = (t43$ = (t43 = this[_parent], t43 == null ? null : t43.injectedChild), t43$ == null ? this.widget[_child$] : t43$);
      for (let child of this.widget[_children][$reversed]) {
        nextNode = nestedHook = new nested._NestedHook.new({owner: this, wrappedWidget: child, injectedChild: nextNode});
      }
      if (nestedHook != null) {
        for (let node of this.nodes) {
          t43$0 = node;
          (() => {
            t43$0.wrappedChild = dart.nullCheck(nestedHook).wrappedWidget;
            t43$0.injectedChild = nestedHook.injectedChild;
            return t43$0;
          })();
          let next = nestedHook.injectedChild;
          if (nested._NestedHook.is(next)) {
            nestedHook = next;
          } else {
            break;
          }
        }
      }
      return dart.nullCheck(nextNode);
    }
  };
  (nested._NestedElement.new = function(widget) {
    this.nodes = T$.LinkedHashSetOf_NestedHookElement().new();
    nested._NestedElement.__proto__.new.call(this, widget);
    ;
  }).prototype = nested._NestedElement.prototype;
  dart.addTypeTests(nested._NestedElement);
  dart.addTypeCaches(nested._NestedElement);
  dart.setGetterSignature(nested._NestedElement, () => ({
    __proto__: dart.getGetters(nested._NestedElement.__proto__),
    widget: nested.Nested
  }));
  dart.setLibraryUri(nested._NestedElement, I[14]);
  dart.setFieldSignature(nested._NestedElement, () => ({
    __proto__: dart.getFields(nested._NestedElement.__proto__),
    nodes: dart.finalFieldType(core.Set$(nested._NestedHookElement))
  }));
  nested._NestedHook = class _NestedHook extends framework.StatelessWidget {
    static ['_#new#tearOff'](opts) {
      let injectedChild = opts && 'injectedChild' in opts ? opts.injectedChild : null;
      let wrappedWidget = opts && 'wrappedWidget' in opts ? opts.wrappedWidget : null;
      let owner = opts && 'owner' in opts ? opts.owner : null;
      return new nested._NestedHook.new({injectedChild: injectedChild, wrappedWidget: wrappedWidget, owner: owner});
    }
    createElement() {
      return new nested._NestedHookElement.new(this);
    }
    build(context) {
      return dart.throw(new core.StateError.new("handled internally"));
    }
  };
  (nested._NestedHook.new = function(opts) {
    let injectedChild = opts && 'injectedChild' in opts ? opts.injectedChild : null;
    let wrappedWidget = opts && 'wrappedWidget' in opts ? opts.wrappedWidget : null;
    let owner = opts && 'owner' in opts ? opts.owner : null;
    this.injectedChild = injectedChild;
    this.wrappedWidget = wrappedWidget;
    this.owner = owner;
    nested._NestedHook.__proto__.new.call(this);
    ;
  }).prototype = nested._NestedHook.prototype;
  dart.addTypeTests(nested._NestedHook);
  dart.addTypeCaches(nested._NestedHook);
  dart.setMethodSignature(nested._NestedHook, () => ({
    __proto__: dart.getMethods(nested._NestedHook.__proto__),
    createElement: dart.fnType(nested._NestedHookElement, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(nested._NestedHook, I[14]);
  dart.setFieldSignature(nested._NestedHook, () => ({
    __proto__: dart.getFields(nested._NestedHook.__proto__),
    wrappedWidget: dart.finalFieldType(nested.SingleChildWidget),
    injectedChild: dart.finalFieldType(dart.nullable(framework.Widget)),
    owner: dart.finalFieldType(nested._NestedElement)
  }));
  var _injectedChild = dart.privateName(nested, "_injectedChild");
  var _wrappedChild = dart.privateName(nested, "_wrappedChild");
  nested._NestedHookElement = class _NestedHookElement extends framework.StatelessElement {
    static ['_#new#tearOff'](widget) {
      return new nested._NestedHookElement.new(widget);
    }
    get widget() {
      return nested._NestedHook.as(super.widget);
    }
    get injectedChild() {
      return this[_injectedChild];
    }
    set injectedChild(value) {
      let previous = this[_injectedChild];
      if (nested._NestedHook.is(value) && nested._NestedHook.is(previous) && framework.Widget.canUpdate(value.wrappedWidget, previous.wrappedWidget)) {
        return;
      }
      if (!dart.equals(previous, value)) {
        this[_injectedChild] = value;
        this.visitChildren(dart.fn(e => e.markNeedsBuild(), T$.ElementTovoid()));
      }
    }
    get wrappedChild() {
      return this[_wrappedChild];
    }
    set wrappedChild(value) {
      if (!dart.equals(this[_wrappedChild], value)) {
        this[_wrappedChild] = value;
        this.markNeedsBuild();
      }
    }
    mount(parent, newSlot) {
      this.widget.owner.nodes.add(this);
      this[_wrappedChild] = this.widget.wrappedWidget;
      this[_injectedChild] = this.widget.injectedChild;
      super.mount(parent, newSlot);
    }
    unmount() {
      this.widget.owner.nodes.remove(this);
      super.unmount();
    }
    build() {
      return dart.nullCheck(this.wrappedChild);
    }
  };
  (nested._NestedHookElement.new = function(widget) {
    this[_injectedChild] = null;
    this[_wrappedChild] = null;
    nested._NestedHookElement.__proto__.new.call(this, widget);
    ;
  }).prototype = nested._NestedHookElement.prototype;
  dart.addTypeTests(nested._NestedHookElement);
  dart.addTypeCaches(nested._NestedHookElement);
  dart.setMethodSignature(nested._NestedHookElement, () => ({
    __proto__: dart.getMethods(nested._NestedHookElement.__proto__),
    mount: dart.fnType(dart.void, [dart.nullable(framework.Element), dart.dynamic])
  }));
  dart.setGetterSignature(nested._NestedHookElement, () => ({
    __proto__: dart.getGetters(nested._NestedHookElement.__proto__),
    widget: nested._NestedHook,
    injectedChild: dart.nullable(framework.Widget),
    wrappedChild: dart.nullable(nested.SingleChildWidget)
  }));
  dart.setSetterSignature(nested._NestedHookElement, () => ({
    __proto__: dart.getSetters(nested._NestedHookElement.__proto__),
    injectedChild: dart.nullable(framework.Widget),
    wrappedChild: dart.nullable(nested.SingleChildWidget)
  }));
  dart.setLibraryUri(nested._NestedHookElement, I[14]);
  dart.setFieldSignature(nested._NestedHookElement, () => ({
    __proto__: dart.getFields(nested._NestedHookElement.__proto__),
    [_injectedChild]: dart.fieldType(dart.nullable(framework.Widget)),
    [_wrappedChild]: dart.fieldType(dart.nullable(nested.SingleChildWidget))
  }));
  nested.SingleChildWidget = class SingleChildWidget extends core.Object {};
  (nested.SingleChildWidget.new = function() {
    ;
  }).prototype = nested.SingleChildWidget.prototype;
  dart.addTypeTests(nested.SingleChildWidget);
  dart.addTypeCaches(nested.SingleChildWidget);
  nested.SingleChildWidget[dart.implements] = () => [framework.Widget];
  dart.setLibraryUri(nested.SingleChildWidget, I[14]);
  const StatefulElement_SingleChildWidgetElementMixin$36 = class StatefulElement_SingleChildWidgetElementMixin extends framework.StatefulElement {};
  (StatefulElement_SingleChildWidgetElementMixin$36.new = function(widget) {
    nested.SingleChildWidgetElementMixin[dart.mixinNew].call(this);
    StatefulElement_SingleChildWidgetElementMixin$36.__proto__.new.call(this, widget);
  }).prototype = StatefulElement_SingleChildWidgetElementMixin$36.prototype;
  dart.applyMixin(StatefulElement_SingleChildWidgetElementMixin$36, nested.SingleChildWidgetElementMixin);
  nested.SingleChildStatefulElement = class SingleChildStatefulElement extends StatefulElement_SingleChildWidgetElementMixin$36 {
    static ['_#new#tearOff'](widget) {
      return new nested.SingleChildStatefulElement.new(widget);
    }
    get widget() {
      return nested.SingleChildStatefulWidget.as(super.widget);
    }
    get state() {
      return T$.SingleChildStateOfSingleChildStatefulWidget().as(super.state);
    }
    build() {
      if (this[_parent] != null) {
        return this.state.buildWithChild(this, dart.nullCheck(dart.nullCheck(this[_parent]).injectedChild));
      }
      return super.build();
    }
  };
  (nested.SingleChildStatefulElement.new = function(widget) {
    nested.SingleChildStatefulElement.__proto__.new.call(this, widget);
    ;
  }).prototype = nested.SingleChildStatefulElement.prototype;
  dart.addTypeTests(nested.SingleChildStatefulElement);
  dart.addTypeCaches(nested.SingleChildStatefulElement);
  dart.setGetterSignature(nested.SingleChildStatefulElement, () => ({
    __proto__: dart.getGetters(nested.SingleChildStatefulElement.__proto__),
    widget: nested.SingleChildStatefulWidget,
    state: nested.SingleChildState$(nested.SingleChildStatefulWidget)
  }));
  dart.setLibraryUri(nested.SingleChildStatefulElement, I[14]);
  var builder$10 = dart.privateName(nested, "SingleChildBuilder.builder");
  nested.SingleChildBuilder = class SingleChildBuilder extends nested.SingleChildStatelessWidget {
    get builder() {
      return this[builder$10];
    }
    set builder(value) {
      super.builder = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new nested.SingleChildBuilder.new({key: key, builder: builder, child: child});
    }
    buildWithChild(context, child) {
      let t44, t43;
      t43 = context;
      t44 = child;
      return this.builder(t43, t44);
    }
  };
  (nested.SingleChildBuilder.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[builder$10] = builder;
    nested.SingleChildBuilder.__proto__.new.call(this, {key: key, child: child});
    ;
  }).prototype = nested.SingleChildBuilder.prototype;
  dart.addTypeTests(nested.SingleChildBuilder);
  dart.addTypeCaches(nested.SingleChildBuilder);
  dart.setMethodSignature(nested.SingleChildBuilder, () => ({
    __proto__: dart.getMethods(nested.SingleChildBuilder.__proto__),
    buildWithChild: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])
  }));
  dart.setLibraryUri(nested.SingleChildBuilder, I[14]);
  dart.setFieldSignature(nested.SingleChildBuilder, () => ({
    __proto__: dart.getFields(nested.SingleChildBuilder.__proto__),
    builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)]))
  }));
  nested.SingleChildStatelessWidgetMixin = class SingleChildStatelessWidgetMixin extends core.Object {};
  nested.SingleChildStatelessWidgetMixin[dart.mixinOn] = Object => class SingleChildStatelessWidgetMixin extends Object {
    get [_child$]() {
      return this.child;
    }
    createElement() {
      return new nested.SingleChildStatelessElement.new(this);
    }
    build(context) {
      return this.buildWithChild(context, this.child);
    }
  };
  (nested.SingleChildStatelessWidgetMixin[dart.mixinNew] = function() {
  }).prototype = nested.SingleChildStatelessWidgetMixin.prototype;
  dart.addTypeTests(nested.SingleChildStatelessWidgetMixin);
  dart.addTypeCaches(nested.SingleChildStatelessWidgetMixin);
  nested.SingleChildStatelessWidgetMixin[dart.implements] = () => [framework.StatelessWidget, nested.SingleChildStatelessWidget, core.Object];
  dart.setMethodSignature(nested.SingleChildStatelessWidgetMixin, () => ({
    __proto__: dart.getMethods(nested.SingleChildStatelessWidgetMixin.__proto__),
    createElement: dart.fnType(nested.SingleChildStatelessElement, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(nested.SingleChildStatelessWidgetMixin, () => ({
    __proto__: dart.getGetters(nested.SingleChildStatelessWidgetMixin.__proto__),
    [_child$]: dart.nullable(framework.Widget)
  }));
  dart.setLibraryUri(nested.SingleChildStatelessWidgetMixin, I[14]);
  nested.SingleChildStatefulWidgetMixin = class SingleChildStatefulWidgetMixin extends framework.StatefulWidget {};
  nested.SingleChildStatefulWidgetMixin[dart.mixinOn] = StatefulWidget => class SingleChildStatefulWidgetMixin extends StatefulWidget {
    createElement() {
      return new nested._SingleChildStatefulMixinElement.new(this);
    }
  };
  dart.addTypeTests(nested.SingleChildStatefulWidgetMixin);
  dart.addTypeCaches(nested.SingleChildStatefulWidgetMixin);
  nested.SingleChildStatefulWidgetMixin[dart.implements] = () => [nested.SingleChildWidget, framework.StatefulWidget];
  dart.setMethodSignature(nested.SingleChildStatefulWidgetMixin, () => ({
    __proto__: dart.getMethods(nested.SingleChildStatefulWidgetMixin.__proto__),
    createElement: dart.fnType(nested._SingleChildStatefulMixinElement, [])
  }));
  dart.setLibraryUri(nested.SingleChildStatefulWidgetMixin, I[14]);
  const _is_SingleChildStateMixin_default = Symbol('_is_SingleChildStateMixin_default');
  nested.SingleChildStateMixin$ = dart.generic(T => {
    class SingleChildStateMixin extends framework.State$(T) {}
    SingleChildStateMixin[dart.mixinOn] = State => class SingleChildStateMixin extends State {
      build(context) {
        return this.buildWithChild(context, dart.nullCheck(nested.SingleChildStatefulWidgetMixin.as(this.widget).child));
      }
    };
    dart.addTypeTests(SingleChildStateMixin);
    SingleChildStateMixin.prototype[_is_SingleChildStateMixin_default] = true;
    dart.addTypeCaches(SingleChildStateMixin);
    SingleChildStateMixin[dart.implements] = () => [framework.State$(T)];
    dart.setMethodSignature(SingleChildStateMixin, () => ({
      __proto__: dart.getMethods(SingleChildStateMixin.__proto__),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setLibraryUri(SingleChildStateMixin, I[14]);
    return SingleChildStateMixin;
  });
  nested.SingleChildStateMixin = nested.SingleChildStateMixin$();
  dart.addTypeTests(nested.SingleChildStateMixin, _is_SingleChildStateMixin_default);
  const StatefulElement_SingleChildWidgetElementMixin$36$ = class StatefulElement_SingleChildWidgetElementMixin extends framework.StatefulElement {};
  (StatefulElement_SingleChildWidgetElementMixin$36$.new = function(widget) {
    nested.SingleChildWidgetElementMixin[dart.mixinNew].call(this);
    StatefulElement_SingleChildWidgetElementMixin$36$.__proto__.new.call(this, widget);
  }).prototype = StatefulElement_SingleChildWidgetElementMixin$36$.prototype;
  dart.applyMixin(StatefulElement_SingleChildWidgetElementMixin$36$, nested.SingleChildWidgetElementMixin);
  nested._SingleChildStatefulMixinElement = class _SingleChildStatefulMixinElement extends StatefulElement_SingleChildWidgetElementMixin$36$ {
    static ['_#new#tearOff'](widget) {
      return new nested._SingleChildStatefulMixinElement.new(widget);
    }
    get widget() {
      return nested.SingleChildStatefulWidgetMixin.as(super.widget);
    }
    get state() {
      return T$.SingleChildStateMixinOfStatefulWidget().as(super.state);
    }
    build() {
      if (this[_parent] != null) {
        return this.state.buildWithChild(this, dart.nullCheck(dart.nullCheck(this[_parent]).injectedChild));
      }
      return super.build();
    }
  };
  (nested._SingleChildStatefulMixinElement.new = function(widget) {
    nested._SingleChildStatefulMixinElement.__proto__.new.call(this, widget);
    ;
  }).prototype = nested._SingleChildStatefulMixinElement.prototype;
  dart.addTypeTests(nested._SingleChildStatefulMixinElement);
  dart.addTypeCaches(nested._SingleChildStatefulMixinElement);
  dart.setGetterSignature(nested._SingleChildStatefulMixinElement, () => ({
    __proto__: dart.getGetters(nested._SingleChildStatefulMixinElement.__proto__),
    widget: nested.SingleChildStatefulWidgetMixin,
    state: nested.SingleChildStateMixin$(framework.StatefulWidget)
  }));
  dart.setLibraryUri(nested._SingleChildStatefulMixinElement, I[14]);
  nested.SingleChildInheritedElementMixin = class SingleChildInheritedElementMixin extends core.Object {};
  nested.SingleChildInheritedElementMixin[dart.mixinOn] = _SingleChildInheritedElementMixin$36InheritedElement$36SingleChildWidgetElementMixin => class SingleChildInheritedElementMixin extends _SingleChildInheritedElementMixin$36InheritedElement$36SingleChildWidgetElementMixin {
    build() {
      if (this[_parent] != null) {
        return dart.nullCheck(dart.nullCheck(this[_parent]).injectedChild);
      }
      return super.build();
    }
  };
  dart.addTypeTests(nested.SingleChildInheritedElementMixin);
  dart.addTypeCaches(nested.SingleChildInheritedElementMixin);
  nested.SingleChildInheritedElementMixin[dart.implements] = () => [nested.SingleChildWidgetElementMixin, framework.InheritedElement];
  dart.setMethodSignature(nested.SingleChildInheritedElementMixin, () => ({
    __proto__: dart.getMethods(nested.SingleChildInheritedElementMixin.__proto__),
    build: dart.fnType(framework.Widget, [])
  }));
  dart.setLibraryUri(nested.SingleChildInheritedElementMixin, I[14]);
  var frontWidget$ = dart.privateName(widget, "SimpleFoldingCell.frontWidget");
  var innerWidget$ = dart.privateName(widget, "SimpleFoldingCell.innerWidget");
  var cellSize$ = dart.privateName(widget, "SimpleFoldingCell.cellSize");
  var unfoldCell$ = dart.privateName(widget, "SimpleFoldingCell.unfoldCell");
  var skipAnimation$ = dart.privateName(widget, "SimpleFoldingCell.skipAnimation");
  var padding$ = dart.privateName(widget, "SimpleFoldingCell.padding");
  var animationDuration$ = dart.privateName(widget, "SimpleFoldingCell.animationDuration");
  var borderRadius$ = dart.privateName(widget, "SimpleFoldingCell.borderRadius");
  var onOpen$ = dart.privateName(widget, "SimpleFoldingCell.onOpen");
  var onClose$ = dart.privateName(widget, "SimpleFoldingCell.onClose");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  widget.SimpleFoldingCell = class SimpleFoldingCell extends framework.StatefulWidget {
    get frontWidget() {
      return this[frontWidget$];
    }
    set frontWidget(value) {
      super.frontWidget = value;
    }
    get innerWidget() {
      return this[innerWidget$];
    }
    set innerWidget(value) {
      super.innerWidget = value;
    }
    get cellSize() {
      return this[cellSize$];
    }
    set cellSize(value) {
      super.cellSize = value;
    }
    get unfoldCell() {
      return this[unfoldCell$];
    }
    set unfoldCell(value) {
      super.unfoldCell = value;
    }
    get skipAnimation() {
      return this[skipAnimation$];
    }
    set skipAnimation(value) {
      super.skipAnimation = value;
    }
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    get animationDuration() {
      return this[animationDuration$];
    }
    set animationDuration(value) {
      super.animationDuration = value;
    }
    get borderRadius() {
      return this[borderRadius$];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get onOpen() {
      return this[onOpen$];
    }
    set onOpen(value) {
      super.onOpen = value;
    }
    get onClose() {
      return this[onClose$];
    }
    set onClose(value) {
      super.onClose = value;
    }
    static ['_#create#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let frontWidget = opts && 'frontWidget' in opts ? opts.frontWidget : null;
      let innerWidget = opts && 'innerWidget' in opts ? opts.innerWidget : null;
      let cellSize = opts && 'cellSize' in opts ? opts.cellSize : C[59] || CT.C59;
      let unfoldCell = opts && 'unfoldCell' in opts ? opts.unfoldCell : false;
      let skipAnimation = opts && 'skipAnimation' in opts ? opts.skipAnimation : false;
      let padding = opts && 'padding' in opts ? opts.padding : C[60] || CT.C60;
      let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : C[61] || CT.C61;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : 0;
      let onOpen = opts && 'onOpen' in opts ? opts.onOpen : null;
      let onClose = opts && 'onClose' in opts ? opts.onClose : null;
      return new widget.SimpleFoldingCell.create({key: key, frontWidget: frontWidget, innerWidget: innerWidget, cellSize: cellSize, unfoldCell: unfoldCell, skipAnimation: skipAnimation, padding: padding, animationDuration: animationDuration, borderRadius: borderRadius, onOpen: onOpen, onClose: onClose});
    }
    createState() {
      return new widget.SimpleFoldingCellState.new();
    }
  };
  (widget.SimpleFoldingCell.create = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let frontWidget = opts && 'frontWidget' in opts ? opts.frontWidget : null;
    let innerWidget = opts && 'innerWidget' in opts ? opts.innerWidget : null;
    let cellSize = opts && 'cellSize' in opts ? opts.cellSize : C[59] || CT.C59;
    let unfoldCell = opts && 'unfoldCell' in opts ? opts.unfoldCell : false;
    let skipAnimation = opts && 'skipAnimation' in opts ? opts.skipAnimation : false;
    let padding = opts && 'padding' in opts ? opts.padding : C[60] || CT.C60;
    let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : C[61] || CT.C61;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : 0;
    let onOpen = opts && 'onOpen' in opts ? opts.onOpen : null;
    let onClose = opts && 'onClose' in opts ? opts.onClose : null;
    this[frontWidget$] = frontWidget;
    this[innerWidget$] = innerWidget;
    this[cellSize$] = cellSize;
    this[unfoldCell$] = unfoldCell;
    this[skipAnimation$] = skipAnimation;
    this[padding$] = padding;
    this[animationDuration$] = animationDuration;
    this[borderRadius$] = borderRadius;
    this[onOpen$] = onOpen;
    this[onClose$] = onClose;
    if (!(frontWidget != null)) dart.assertFailed(null, I[72], 20, 16, "frontWidget != null");
    if (!(innerWidget != null)) dart.assertFailed(null, I[72], 21, 16, "innerWidget != null");
    if (!(cellSize != null)) dart.assertFailed(null, I[72], 22, 16, "cellSize != null");
    if (!(unfoldCell != null)) dart.assertFailed(null, I[72], 23, 16, "unfoldCell != null");
    if (!(skipAnimation != null)) dart.assertFailed(null, I[72], 24, 16, "skipAnimation != null");
    if (!(padding != null)) dart.assertFailed(null, I[72], 25, 16, "padding != null");
    if (!(animationDuration != null)) dart.assertFailed(null, I[72], 26, 16, "animationDuration != null");
    if (!(borderRadius != null && dart.notNull(borderRadius) >= 0)) dart.assertFailed(null, I[72], 27, 16, "borderRadius != null && borderRadius >= 0.0");
    widget.SimpleFoldingCell.__proto__.new.call(this, {key: key});
    ;
  }).prototype = widget.SimpleFoldingCell.prototype;
  dart.addTypeTests(widget.SimpleFoldingCell);
  dart.addTypeCaches(widget.SimpleFoldingCell);
  dart.setMethodSignature(widget.SimpleFoldingCell, () => ({
    __proto__: dart.getMethods(widget.SimpleFoldingCell.__proto__),
    createState: dart.fnType(widget.SimpleFoldingCellState, [])
  }));
  dart.setLibraryUri(widget.SimpleFoldingCell, I[73]);
  dart.setFieldSignature(widget.SimpleFoldingCell, () => ({
    __proto__: dart.getFields(widget.SimpleFoldingCell.__proto__),
    frontWidget: dart.finalFieldType(dart.nullable(framework.Widget)),
    innerWidget: dart.finalFieldType(dart.nullable(framework.Widget)),
    cellSize: dart.finalFieldType(dart.nullable(ui.Size)),
    unfoldCell: dart.finalFieldType(dart.nullable(core.bool)),
    skipAnimation: dart.finalFieldType(dart.nullable(core.bool)),
    padding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    animationDuration: dart.finalFieldType(dart.nullable(core.Duration)),
    borderRadius: dart.finalFieldType(dart.nullable(core.double)),
    onOpen: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onClose: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  var _isExpanded = dart.privateName(widget, "_isExpanded");
  var __SimpleFoldingCellState__animationController = dart.privateName(widget, "_#SimpleFoldingCellState#_animationController");
  var _animationController = dart.privateName(widget, "_animationController");
  const State_SingleTickerProviderStateMixin$36$ = class State_SingleTickerProviderStateMixin extends framework.State$(widget.SimpleFoldingCell) {};
  (State_SingleTickerProviderStateMixin$36$.new = function() {
    ticker_provider.SingleTickerProviderStateMixin$(widget.SimpleFoldingCell)[dart.mixinNew].call(this);
    State_SingleTickerProviderStateMixin$36$.__proto__.new.call(this);
  }).prototype = State_SingleTickerProviderStateMixin$36$.prototype;
  dart.applyMixin(State_SingleTickerProviderStateMixin$36$, ticker_provider.SingleTickerProviderStateMixin$(widget.SimpleFoldingCell));
  widget.SimpleFoldingCellState = class SimpleFoldingCellState extends State_SingleTickerProviderStateMixin$36$ {
    get [_animationController]() {
      let t43;
      t43 = this[__SimpleFoldingCellState__animationController];
      return t43 == null ? dart.throw(new _internal.LateError.fieldNI("_animationController")) : t43;
    }
    set [_animationController](_animationController$35param) {
      this[__SimpleFoldingCellState__animationController] = _animationController$35param;
    }
    initState() {
      super.initState();
      this[_animationController] = new animation_controller.AnimationController.new({vsync: this, duration: this.widget.animationDuration});
      this[_animationController].addStatusListener(dart.fn(status => {
        if (status === animation.AnimationStatus.completed) {
          if (this.widget.onOpen != null) dart.nullCheck(this.widget.onOpen)();
        } else if (status === animation.AnimationStatus.dismissed) {
          if (this.widget.onClose != null) dart.nullCheck(this.widget.onClose)();
        }
      }, T$.AnimationStatusTovoid()));
      if (this.widget.unfoldCell === true) {
        this[_animationController].value = 1;
        this[_isExpanded] = true;
      }
    }
    dispose() {
      this[_animationController].dispose();
      super.dispose();
    }
    build(context) {
      return new transitions.AnimatedBuilder.new({animation: this[_animationController], builder: dart.fn((context, child) => {
          let t43, t43$, t43$0, t43$1;
          let angle = this[_animationController].value * 3.141592653589793;
          let cellWidth = (t43 = this.widget.cellSize, t43 == null ? null : t43.width);
          let cellHeight = (t43$ = this.widget.cellSize, t43$ == null ? null : t43$.height);
          return new basic.Padding.new({padding: dart.nullCheck(this.widget.padding), child: new container.Container.new({color: colors.Colors.transparent, width: cellWidth, height: dart.nullCheck(cellHeight) + dart.notNull(cellHeight) * this[_animationController].value, child: new basic.Stack.new({children: T$.JSArrayOfWidget().of([new basic.ClipRRect.new({borderRadius: new border_radius.BorderRadius.only({topLeft: new ui.Radius.circular(dart.nullCheck(this.widget.borderRadius)), topRight: new ui.Radius.circular(dart.nullCheck(this.widget.borderRadius))}), child: new container.Container.new({width: cellWidth, height: cellHeight, child: new basic.OverflowBox.new({minHeight: cellHeight, maxHeight: dart.notNull(cellHeight) * 2, alignment: alignment.Alignment.topCenter, child: new basic.ClipRect.new({child: new basic.Align.new({heightFactor: 0.5, alignment: alignment.Alignment.topCenter, child: this.widget.innerWidget})})})})}), new basic.Transform.new({alignment: alignment.Alignment.bottomCenter, transform: (t43$0 = vector_math_64.Matrix4.identity(), (() => {
                      t43$0.setEntry(3, 2, 0.001);
                      t43$0.rotateX(angle);
                      return t43$0;
                    })()), child: new basic.Transform.new({alignment: alignment.Alignment.center, transform: vector_math_64.Matrix4.rotationX(3.141592653589793), child: new basic.ClipRRect.new({borderRadius: new border_radius.BorderRadius.only({bottomLeft: new ui.Radius.circular(dart.nullCheck(this.widget.borderRadius)), bottomRight: new ui.Radius.circular(dart.nullCheck(this.widget.borderRadius))}), child: new container.Container.new({width: cellWidth, height: cellHeight, child: new basic.OverflowBox.new({minHeight: cellHeight, maxHeight: dart.notNull(cellHeight) * 2, alignment: alignment.Alignment.topCenter, child: new basic.ClipRect.new({child: new basic.Align.new({heightFactor: 0.5, alignment: alignment.Alignment.bottomCenter, child: this.widget.innerWidget})})})})})})}), new basic.Transform.new({alignment: alignment.Alignment.bottomCenter, transform: (t43$1 = vector_math_64.Matrix4.identity(), (() => {
                      t43$1.setEntry(3, 2, 0.001);
                      t43$1.rotateX(angle);
                      return t43$1;
                    })()), child: new basic.Opacity.new({opacity: angle >= 1.5708 ? 0 : 1, child: new basic.ClipRRect.new({borderRadius: new border_radius.BorderRadius.only({topLeft: new ui.Radius.circular(dart.nullCheck(this.widget.borderRadius)), topRight: new ui.Radius.circular(dart.nullCheck(this.widget.borderRadius))}), child: new container.Container.new({width: angle >= 1.5708 ? 0 : cellWidth, height: angle >= 1.5708 ? 0 : cellHeight, child: this.widget.frontWidget})})})})])})})});
        }, T$.BuildContextAndWidgetNToPadding())});
    }
    toggleFold() {
      if (this[_isExpanded]) {
        if (this.widget.skipAnimation === true) {
          this[_animationController].value = 0;
        } else {
          this[_animationController].reverse();
        }
      } else {
        if (this.widget.skipAnimation === true) {
          this[_animationController].value = 1;
        } else {
          this[_animationController].forward();
        }
      }
      this[_isExpanded] = !this[_isExpanded];
    }
    static ['_#new#tearOff']() {
      return new widget.SimpleFoldingCellState.new();
    }
  };
  (widget.SimpleFoldingCellState.new = function() {
    this[_isExpanded] = false;
    this[__SimpleFoldingCellState__animationController] = null;
    widget.SimpleFoldingCellState.__proto__.new.call(this);
    ;
  }).prototype = widget.SimpleFoldingCellState.prototype;
  dart.addTypeTests(widget.SimpleFoldingCellState);
  dart.addTypeCaches(widget.SimpleFoldingCellState);
  dart.setMethodSignature(widget.SimpleFoldingCellState, () => ({
    __proto__: dart.getMethods(widget.SimpleFoldingCellState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    toggleFold: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(widget.SimpleFoldingCellState, () => ({
    __proto__: dart.getGetters(widget.SimpleFoldingCellState.__proto__),
    [_animationController]: animation_controller.AnimationController
  }));
  dart.setSetterSignature(widget.SimpleFoldingCellState, () => ({
    __proto__: dart.getSetters(widget.SimpleFoldingCellState.__proto__),
    [_animationController]: animation_controller.AnimationController
  }));
  dart.setLibraryUri(widget.SimpleFoldingCellState, I[73]);
  dart.setFieldSignature(widget.SimpleFoldingCellState, () => ({
    __proto__: dart.getFields(widget.SimpleFoldingCellState.__proto__),
    [_isExpanded]: dart.fieldType(core.bool),
    [__SimpleFoldingCellState__animationController]: dart.fieldType(dart.nullable(animation_controller.AnimationController))
  }));
  var scheme$ = dart.privateName(authentication_challenge, "AuthenticationChallenge.scheme");
  var parameters$ = dart.privateName(authentication_challenge, "AuthenticationChallenge.parameters");
  authentication_challenge.AuthenticationChallenge = class AuthenticationChallenge extends core.Object {
    get scheme() {
      return this[scheme$];
    }
    set scheme(value) {
      super.scheme = value;
    }
    get parameters() {
      return this[parameters$];
    }
    set parameters(value) {
      super.parameters = value;
    }
    static parseHeader(header) {
      return utils$.wrapFormatException(T$.ListOfAuthenticationChallenge(), "authentication header", header, dart.fn(() => {
        let scanner = new string_scanner.StringScanner.new(header);
        scanner.scan(scan.whitespace);
        let challenges = scan.parseList(authentication_challenge.AuthenticationChallenge, scanner, dart.fn(() => {
          let scheme = authentication_challenge.AuthenticationChallenge._scanScheme(scanner, {whitespaceName: "\" \" or \"=\""});
          let params = new (T$.IdentityMapOfString$String()).new();
          while (scanner.scan(",")) {
            scanner.scan(scan.whitespace);
          }
          authentication_challenge.AuthenticationChallenge._scanAuthParam(scanner, params);
          let beforeComma = scanner.position;
          while (scanner.scan(",")) {
            scanner.scan(scan.whitespace);
            if (scanner.matches(",") || scanner.isDone) continue;
            scanner.expect(scan.token, {name: "a token"});
            let name = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
            scanner.scan(scan.whitespace);
            if (!scanner.scan("=")) {
              scanner.position = beforeComma;
              break;
            }
            scanner.scan(scan.whitespace);
            if (scanner.scan(scan.token)) {
              params[$_set](name, dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)));
            } else {
              params[$_set](name, scan.expectQuotedString(scanner, {name: "a token or a quoted string"}));
            }
            scanner.scan(scan.whitespace);
            beforeComma = scanner.position;
          }
          return new authentication_challenge.AuthenticationChallenge.new(scheme, params);
        }, T$.VoidToAuthenticationChallenge()));
        scanner.expectDone();
        return challenges;
      }, T$.VoidToListOfAuthenticationChallenge()));
    }
    static parse(challenge) {
      return utils$.wrapFormatException(authentication_challenge.AuthenticationChallenge, "authentication challenge", challenge, dart.fn(() => {
        let scanner = new string_scanner.StringScanner.new(challenge);
        scanner.scan(scan.whitespace);
        let scheme = authentication_challenge.AuthenticationChallenge._scanScheme(scanner);
        let params = new (T$.IdentityMapOfString$String()).new();
        scan.parseList(dart.void, scanner, dart.fn(() => authentication_challenge.AuthenticationChallenge._scanAuthParam(scanner, params), T$.VoidTovoid()));
        scanner.expectDone();
        return new authentication_challenge.AuthenticationChallenge.new(scheme, params);
      }, T$.VoidToAuthenticationChallenge()));
    }
    static ['_#parse#tearOff'](challenge) {
      return authentication_challenge.AuthenticationChallenge.parse(challenge);
    }
    static _scanScheme(scanner, opts) {
      let whitespaceName = opts && 'whitespaceName' in opts ? opts.whitespaceName : null;
      scanner.expect(scan.token, {name: "a token"});
      let scheme = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))[$toLowerCase]();
      scanner.scan(scan.whitespace);
      if (scanner.lastMatch == null || !dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))[$contains](" ")) {
        scanner.expect(" ", {name: whitespaceName});
      }
      return scheme;
    }
    static _scanAuthParam(scanner, params) {
      scanner.expect(scan.token, {name: "a token"});
      let name = dart.nullCheck(scanner.lastMatch)._get(0);
      scanner.scan(scan.whitespace);
      scanner.expect("=");
      scanner.scan(scan.whitespace);
      if (scanner.scan(scan.token)) {
        params[$_set](name, dart.nullCheck(scanner.lastMatch)._get(0));
      } else {
        params[$_set](name, scan.expectQuotedString(scanner, {name: "a token or a quoted string"}));
      }
      scanner.scan(scan.whitespace);
    }
    static ['_#new#tearOff'](scheme, parameters) {
      return new authentication_challenge.AuthenticationChallenge.new(scheme, parameters);
    }
  };
  (authentication_challenge.AuthenticationChallenge.new = function(scheme, parameters) {
    this[scheme$] = scheme;
    this[parameters$] = new (T$.UnmodifiableMapViewOfString$String()).new(new (T$.CaseInsensitiveMapOfString()).from(parameters));
    ;
  }).prototype = authentication_challenge.AuthenticationChallenge.prototype;
  dart.addTypeTests(authentication_challenge.AuthenticationChallenge);
  dart.addTypeCaches(authentication_challenge.AuthenticationChallenge);
  dart.setStaticMethodSignature(authentication_challenge.AuthenticationChallenge, () => ['parseHeader', 'parse', '_scanScheme', '_scanAuthParam']);
  dart.setLibraryUri(authentication_challenge.AuthenticationChallenge, I[74]);
  dart.setFieldSignature(authentication_challenge.AuthenticationChallenge, () => ({
    __proto__: dart.getFields(authentication_challenge.AuthenticationChallenge.__proto__),
    scheme: dart.finalFieldType(core.String),
    parameters: dart.finalFieldType(core.Map$(core.String, core.String))
  }));
  const _is_CaseInsensitiveMap_default = Symbol('_is_CaseInsensitiveMap_default');
  case_insensitive_map.CaseInsensitiveMap$ = dart.generic(V => {
    class CaseInsensitiveMap extends canonicalized_map.CanonicalizedMap$(core.String, core.String, V) {
      static ['_#new#tearOff'](V) {
        return new (case_insensitive_map.CaseInsensitiveMap$(V)).new();
      }
      static ['_#from#tearOff'](V, other) {
        return new (case_insensitive_map.CaseInsensitiveMap$(V)).from(other);
      }
    }
    (CaseInsensitiveMap.new = function() {
      CaseInsensitiveMap.__proto__.new.call(this, dart.fn(key => key[$toLowerCase](), T$.StringToString()));
      ;
    }).prototype = CaseInsensitiveMap.prototype;
    (CaseInsensitiveMap.from = function(other) {
      CaseInsensitiveMap.__proto__.from.call(this, other, dart.fn(key => key[$toLowerCase](), T$.StringToString()));
      ;
    }).prototype = CaseInsensitiveMap.prototype;
    dart.addTypeTests(CaseInsensitiveMap);
    CaseInsensitiveMap.prototype[_is_CaseInsensitiveMap_default] = true;
    dart.addTypeCaches(CaseInsensitiveMap);
    dart.setLibraryUri(CaseInsensitiveMap, I[75]);
    return CaseInsensitiveMap;
  });
  case_insensitive_map.CaseInsensitiveMap = case_insensitive_map.CaseInsensitiveMap$();
  dart.addTypeTests(case_insensitive_map.CaseInsensitiveMap, _is_CaseInsensitiveMap_default);
  chunked_coding.ChunkedCodingCodec = class ChunkedCodingCodec extends convert.Codec$(core.List$(core.int), core.List$(core.int)) {
    get encoder() {
      return encoder.chunkedCodingEncoder;
    }
    get decoder() {
      return decoder.chunkedCodingDecoder;
    }
    static ['_#_#tearOff']() {
      return new chunked_coding.ChunkedCodingCodec.__();
    }
  };
  (chunked_coding.ChunkedCodingCodec.__ = function() {
    chunked_coding.ChunkedCodingCodec.__proto__.new.call(this);
    ;
  }).prototype = chunked_coding.ChunkedCodingCodec.prototype;
  dart.addTypeTests(chunked_coding.ChunkedCodingCodec);
  dart.addTypeCaches(chunked_coding.ChunkedCodingCodec);
  dart.setGetterSignature(chunked_coding.ChunkedCodingCodec, () => ({
    __proto__: dart.getGetters(chunked_coding.ChunkedCodingCodec.__proto__),
    encoder: encoder.ChunkedCodingEncoder,
    decoder: decoder.ChunkedCodingDecoder
  }));
  dart.setLibraryUri(chunked_coding.ChunkedCodingCodec, I[76]);
  dart.defineLazy(chunked_coding, {
    /*chunked_coding.chunkedCoding*/get chunkedCoding() {
      return C[62] || CT.C62;
    }
  }, false);
  http_date.formatHttpDate = function formatHttpDate(date) {
    let t43;
    date = date.toUtc();
    let buffer = (t43 = new core.StringBuffer.new(), (() => {
      t43.write(http_date._weekdays[$_get](date.weekday - 1));
      t43.write(", ");
      t43.write(date.day <= 9 ? "0" : "");
      t43.write(date.day[$toString]());
      t43.write(" ");
      t43.write(http_date._months[$_get](date.month - 1));
      t43.write(" ");
      t43.write(date.year[$toString]());
      t43.write(date.hour <= 9 ? " 0" : " ");
      t43.write(date.hour[$toString]());
      t43.write(date.minute <= 9 ? ":0" : ":");
      t43.write(date.minute[$toString]());
      t43.write(date.second <= 9 ? ":0" : ":");
      t43.write(date.second[$toString]());
      t43.write(" GMT");
      return t43;
    })());
    return buffer.toString();
  };
  http_date.parseHttpDate = function parseHttpDate(date) {
    return utils$.wrapFormatException(core.DateTime, "HTTP date", date, dart.fn(() => {
      let scanner = new string_scanner.StringScanner.new(date);
      if (scanner.scan(http_date._longWeekdayRegExp)) {
        scanner.expect(", ");
        let day = http_date._parseInt(scanner, 2);
        scanner.expect("-");
        let month = http_date._parseMonth(scanner);
        scanner.expect("-");
        let year = 1900 + http_date._parseInt(scanner, 2);
        scanner.expect(" ");
        let time = http_date._parseTime(scanner);
        scanner.expect(" GMT");
        scanner.expectDone();
        return http_date._makeDateTime(year, month, day, time);
      }
      scanner.expect(http_date._shortWeekdayRegExp);
      if (scanner.scan(", ")) {
        let day = http_date._parseInt(scanner, 2);
        scanner.expect(" ");
        let month = http_date._parseMonth(scanner);
        scanner.expect(" ");
        let year = http_date._parseInt(scanner, 4);
        scanner.expect(" ");
        let time = http_date._parseTime(scanner);
        scanner.expect(" GMT");
        scanner.expectDone();
        return http_date._makeDateTime(year, month, day, time);
      }
      scanner.expect(" ");
      let month = http_date._parseMonth(scanner);
      scanner.expect(" ");
      let day = scanner.scan(" ") ? http_date._parseInt(scanner, 1) : http_date._parseInt(scanner, 2);
      scanner.expect(" ");
      let time = http_date._parseTime(scanner);
      scanner.expect(" ");
      let year = http_date._parseInt(scanner, 4);
      scanner.expectDone();
      return http_date._makeDateTime(year, month, day, time);
    }, T$.VoidToDateTime()));
  };
  http_date._parseMonth = function _parseMonth(scanner) {
    scanner.expect(http_date._monthRegExp);
    return http_date._months[$indexOf](dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))) + 1;
  };
  http_date._parseInt = function _parseInt(scanner, digits) {
    scanner.expect(http_date._digitRegExp);
    if (dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)).length !== digits) {
      scanner.error("expected a " + dart.str(digits) + "-digit number.");
    }
    return core.int.parse(dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)));
  };
  http_date._parseTime = function _parseTime(scanner) {
    let hours = http_date._parseInt(scanner, 2);
    if (hours >= 24) scanner.error("hours may not be greater than 24.");
    scanner.expect(":");
    let minutes = http_date._parseInt(scanner, 2);
    if (minutes >= 60) scanner.error("minutes may not be greater than 60.");
    scanner.expect(":");
    let seconds = http_date._parseInt(scanner, 2);
    if (seconds >= 60) scanner.error("seconds may not be greater than 60.");
    return new core.DateTime.new(1, 1, 1, hours, minutes, seconds);
  };
  http_date._makeDateTime = function _makeDateTime(year, month, day, time) {
    let dateTime = new core.DateTime.utc(year, month, day, time.hour, time.minute, time.second);
    if (dateTime.month !== month) {
      dart.throw(new core.FormatException.new("invalid day '" + dart.str(day) + "' for month '" + dart.str(month) + "'."));
    }
    return dateTime;
  };
  dart.defineLazy(http_date, {
    /*http_date._weekdays*/get _weekdays() {
      return C[63] || CT.C63;
    },
    /*http_date._months*/get _months() {
      return C[64] || CT.C64;
    },
    /*http_date._shortWeekdayRegExp*/get _shortWeekdayRegExp() {
      return core.RegExp.new("Mon|Tue|Wed|Thu|Fri|Sat|Sun");
    },
    /*http_date._longWeekdayRegExp*/get _longWeekdayRegExp() {
      return core.RegExp.new("Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday");
    },
    /*http_date._monthRegExp*/get _monthRegExp() {
      return core.RegExp.new("Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec");
    },
    /*http_date._digitRegExp*/get _digitRegExp() {
      return core.RegExp.new("\\d+");
    }
  }, false);
  var type$3 = dart.privateName(media_type, "MediaType.type");
  var subtype$ = dart.privateName(media_type, "MediaType.subtype");
  var parameters$0 = dart.privateName(media_type, "MediaType.parameters");
  media_type.MediaType = class MediaType extends core.Object {
    get type() {
      return this[type$3];
    }
    set type(value) {
      super.type = value;
    }
    get subtype() {
      return this[subtype$];
    }
    set subtype(value) {
      super.subtype = value;
    }
    get parameters() {
      return this[parameters$0];
    }
    set parameters(value) {
      super.parameters = value;
    }
    get mimeType() {
      return this.type + "/" + this.subtype;
    }
    static parse(mediaType) {
      return utils$.wrapFormatException(media_type.MediaType, "media type", mediaType, dart.fn(() => {
        let scanner = new string_scanner.StringScanner.new(mediaType);
        scanner.scan(scan.whitespace);
        scanner.expect(scan.token);
        let type = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
        scanner.expect("/");
        scanner.expect(scan.token);
        let subtype = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
        scanner.scan(scan.whitespace);
        let parameters = new (T$.IdentityMapOfString$String()).new();
        while (scanner.scan(";")) {
          scanner.scan(scan.whitespace);
          scanner.expect(scan.token);
          let attribute = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
          scanner.expect("=");
          let value = null;
          if (scanner.scan(scan.token)) {
            value = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
          } else {
            value = scan.expectQuotedString(scanner);
          }
          scanner.scan(scan.whitespace);
          parameters[$_set](attribute, value);
        }
        scanner.expectDone();
        return new media_type.MediaType.new(type, subtype, parameters);
      }, T$.VoidToMediaType()));
    }
    static ['_#parse#tearOff'](mediaType) {
      return media_type.MediaType.parse(mediaType);
    }
    static ['_#new#tearOff'](type, subtype, parameters = null) {
      return new media_type.MediaType.new(type, subtype, parameters);
    }
    change(opts) {
      let type = opts && 'type' in opts ? opts.type : null;
      let subtype = opts && 'subtype' in opts ? opts.subtype : null;
      let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;
      let parameters = opts && 'parameters' in opts ? opts.parameters : null;
      let clearParameters = opts && 'clearParameters' in opts ? opts.clearParameters : false;
      if (mimeType != null) {
        if (type != null) {
          dart.throw(new core.ArgumentError.new("You may not pass both [type] and [mimeType]."));
        } else if (subtype != null) {
          dart.throw(new core.ArgumentError.new("You may not pass both [subtype] and " + "[mimeType]."));
        }
        let segments = mimeType[$split]("/");
        if (segments[$length] !== 2) {
          dart.throw(new core.FormatException.new("Invalid mime type \"" + dart.str(mimeType) + "\"."));
        }
        type = segments[$_get](0);
        subtype = segments[$_get](1);
      }
      type == null ? type = this.type : null;
      subtype == null ? subtype = this.subtype : null;
      parameters == null ? parameters = new (T$.IdentityMapOfString$String()).new() : null;
      if (!clearParameters) {
        let newParameters = parameters;
        parameters = T$.LinkedHashMapOfString$String().from(this.parameters);
        parameters[$addAll](newParameters);
      }
      return new media_type.MediaType.new(type, subtype, parameters);
    }
    toString() {
      let t43;
      let buffer = (t43 = new core.StringBuffer.new(), (() => {
        t43.write(this.type);
        t43.write("/");
        t43.write(this.subtype);
        return t43;
      })());
      this.parameters[$forEach](dart.fn((attribute, value) => {
        let t43;
        buffer.write("; " + attribute + "=");
        if (scan.nonToken.hasMatch(value)) {
          t43 = buffer;
          (() => {
            t43.write("\"");
            t43.write(value[$replaceAllMapped](media_type._escapedChar, dart.fn(match => "\\" + dart.str(match._get(0)), T$.MatchToString())));
            t43.write("\"");
            return t43;
          })();
        } else {
          buffer.write(value);
        }
      }, T$.StringAndStringTovoid()));
      return buffer.toString();
    }
  };
  (media_type.MediaType.new = function(type, subtype, parameters = null) {
    this[type$3] = type[$toLowerCase]();
    this[subtype$] = subtype[$toLowerCase]();
    this[parameters$0] = new (T$.UnmodifiableMapViewOfString$String()).new(parameters == null ? new (T$.IdentityMapOfString$String()).new() : new (T$.CaseInsensitiveMapOfString()).from(parameters));
    ;
  }).prototype = media_type.MediaType.prototype;
  dart.addTypeTests(media_type.MediaType);
  dart.addTypeCaches(media_type.MediaType);
  dart.setMethodSignature(media_type.MediaType, () => ({
    __proto__: dart.getMethods(media_type.MediaType.__proto__),
    change: dart.fnType(media_type.MediaType, [], {clearParameters: core.bool, mimeType: dart.nullable(core.String), parameters: dart.nullable(core.Map$(core.String, core.String)), subtype: dart.nullable(core.String), type: dart.nullable(core.String)}, {})
  }));
  dart.setStaticMethodSignature(media_type.MediaType, () => ['parse']);
  dart.setGetterSignature(media_type.MediaType, () => ({
    __proto__: dart.getGetters(media_type.MediaType.__proto__),
    mimeType: core.String
  }));
  dart.setLibraryUri(media_type.MediaType, I[77]);
  dart.setFieldSignature(media_type.MediaType, () => ({
    __proto__: dart.getFields(media_type.MediaType.__proto__),
    type: dart.finalFieldType(core.String),
    subtype: dart.finalFieldType(core.String),
    parameters: dart.finalFieldType(core.Map$(core.String, core.String))
  }));
  dart.defineExtensionMethods(media_type.MediaType, ['toString']);
  dart.defineLazy(media_type, {
    /*media_type._escapedChar*/get _escapedChar() {
      return core.RegExp.new("[\"\\x00-\\x1F\\x7F]");
    }
  }, false);
  compute_web.compute = function compute$(Q, R, callback, message, opts) {
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    return async.async(R, function* compute() {
      yield null;
      return callback(message);
    });
  };
  scan.parseList = function parseList(T, scanner, parseElement) {
    let result = _interceptors.JSArray$(T).of([]);
    while (scanner.scan(",")) {
      scanner.scan(scan.whitespace);
    }
    result[$add](parseElement());
    scanner.scan(scan.whitespace);
    while (scanner.scan(",")) {
      scanner.scan(scan.whitespace);
      if (scanner.matches(",") || scanner.isDone) continue;
      result[$add](parseElement());
      scanner.scan(scan.whitespace);
    }
    return result;
  };
  scan.expectQuotedString = function expectQuotedString(scanner, opts) {
    let name = opts && 'name' in opts ? opts.name : "quoted string";
    scanner.expect(scan._quotedString, {name: name});
    let string = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
    return string[$substring](1, string.length - 1)[$replaceAllMapped](scan._quotedPair, dart.fn(match => dart.nullCheck(match._get(1)), T$.MatchToString()));
  };
  dart.defineLazy(scan, {
    /*scan.token*/get token() {
      return core.RegExp.new("[^()<>@,;:\"\\\\/[\\]?={} \\t\\x00-\\x1F\\x7F]+");
    },
    /*scan._lws*/get _lws() {
      return core.RegExp.new("(?:\\r\\n)?[ \\t]+");
    },
    /*scan._quotedString*/get _quotedString() {
      return core.RegExp.new("\"(?:[^\"\\x00-\\x1F\\x7F]|\\\\.)*\"");
    },
    /*scan._quotedPair*/get _quotedPair() {
      return core.RegExp.new("\\\\(.)");
    },
    /*scan.nonToken*/get nonToken() {
      return core.RegExp.new("[()<>@,;:\"\\\\/\\[\\]?={} \\t\\x00-\\x1F\\x7F]");
    },
    /*scan.whitespace*/get whitespace() {
      return core.RegExp.new("(?:" + scan._lws.pattern + ")*");
    }
  }, false);
  utils$.wrapFormatException = function wrapFormatException(T, name, value, body) {
    try {
      return body();
    } catch (e) {
      let ex = dart.getThrown(e);
      if (span_exception.SourceSpanFormatException.is(ex)) {
        let error = ex;
        dart.throw(new span_exception.SourceSpanFormatException.new("Invalid " + name + ": " + error.message, error.span, error.source));
      } else if (core.FormatException.is(ex)) {
        let error = ex;
        dart.throw(new core.FormatException.new("Invalid " + name + " \"" + value + "\": " + error.message, error.source, error.offset));
      } else
        throw e;
    }
  };
  var _decode = dart.privateName(decoder, "_decode");
  var _state$1 = dart.privateName(decoder, "_state");
  decoder.ChunkedCodingDecoder = class ChunkedCodingDecoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {
    static ['_#_#tearOff']() {
      return new decoder.ChunkedCodingDecoder.__();
    }
    convert(input) {
      T$.ListOfint().as(input);
      let sink = new decoder._Sink.new(T$.StreamControllerOfListOfint().new());
      let output = sink[_decode](input, 0, input[$length]);
      if (sink[_state$1][$_equals](decoder._State.end)) return output;
      dart.throw(new core.FormatException.new("Input ended unexpectedly.", input, input[$length]));
    }
    startChunkedConversion(sink) {
      T$.SinkOfListOfint().as(sink);
      return new decoder._Sink.new(sink);
    }
  };
  (decoder.ChunkedCodingDecoder.__ = function() {
    decoder.ChunkedCodingDecoder.__proto__.new.call(this);
    ;
  }).prototype = decoder.ChunkedCodingDecoder.prototype;
  dart.addTypeTests(decoder.ChunkedCodingDecoder);
  dart.addTypeCaches(decoder.ChunkedCodingDecoder);
  dart.setMethodSignature(decoder.ChunkedCodingDecoder, () => ({
    __proto__: dart.getMethods(decoder.ChunkedCodingDecoder.__proto__),
    convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(decoder.ChunkedCodingDecoder, I[78]);
  var ___Sink__size = dart.privateName(decoder, "_#_Sink#_size");
  var _sink$ = dart.privateName(decoder, "_sink");
  var _size = dart.privateName(decoder, "_size");
  var _close$ = dart.privateName(decoder, "_close");
  var _digitForByte = dart.privateName(decoder, "_digitForByte");
  var _State__name = dart.privateName(decoder, "_State._name");
  decoder._Sink = class _Sink extends convert.ByteConversionSinkBase {
    get [_size]() {
      let t45;
      t45 = this[___Sink__size];
      return t45 == null ? dart.throw(new _internal.LateError.fieldNI("_size")) : t45;
    }
    set [_size](_size$35param) {
      this[___Sink__size] = _size$35param;
    }
    static ['_#new#tearOff'](_sink) {
      return new decoder._Sink.new(_sink);
    }
    add(chunk) {
      T$.ListOfint().as(chunk);
      return this.addSlice(chunk, 0, chunk[$length], false);
    }
    addSlice(chunk, start, end, isLast) {
      core.RangeError.checkValidRange(start, end, chunk[$length]);
      let output = this[_decode](chunk, start, end);
      if (output[$isNotEmpty]) this[_sink$].add(output);
      if (isLast) this[_close$](chunk, end);
    }
    close() {
      return this[_close$]();
    }
    [_close$](chunk = null, index = null) {
      if (!this[_state$1][$_equals](decoder._State.end)) {
        dart.throw(new core.FormatException.new("Input ended unexpectedly.", chunk, index));
      }
      this[_sink$].close();
    }
    [_decode](bytes, start, end) {
      function assertCurrentChar(char, name) {
        if (bytes[$_get](start) !== char) {
          dart.throw(new core.FormatException.new("Expected " + name + ".", bytes, start));
        }
      }
      dart.fn(assertCurrentChar, T$.intAndStringTovoid());
      let buffer = new typed_buffer.Uint8Buffer.new();
      while (start !== end) {
        switch (this[_state$1]) {
          case C[65] || CT.C65:
            {
              this[_size] = this[_digitForByte](bytes, start);
              this[_state$1] = decoder._State.size;
              start = start + 1;
              break;
            }
          case C[66] || CT.C66:
            {
              if (bytes[$_get](start) === 13) {
                this[_state$1] = decoder._State.sizeBeforeLF;
              } else {
                this[_size] = (this[_size] << 4 >>> 0) + this[_digitForByte](bytes, start);
              }
              start = start + 1;
              break;
            }
          case C[67] || CT.C67:
            {
              assertCurrentChar(10, "LF");
              this[_state$1] = this[_size] === 0 ? decoder._State.endBeforeCR : decoder._State.body;
              start = start + 1;
              break;
            }
          case C[68] || CT.C68:
            {
              let chunkEnd = math.min(core.int, end, start + this[_size]);
              buffer.addAll(bytes, start, chunkEnd);
              this[_size] = this[_size] - (chunkEnd - start);
              start = chunkEnd;
              if (this[_size] === 0) this[_state$1] = decoder._State.bodyBeforeCR;
              break;
            }
          case C[69] || CT.C69:
            {
              assertCurrentChar(13, "CR");
              this[_state$1] = decoder._State.bodyBeforeLF;
              start = start + 1;
              break;
            }
          case C[70] || CT.C70:
            {
              assertCurrentChar(10, "LF");
              this[_state$1] = decoder._State.boundary;
              start = start + 1;
              break;
            }
          case C[71] || CT.C71:
            {
              assertCurrentChar(13, "CR");
              this[_state$1] = decoder._State.endBeforeLF;
              start = start + 1;
              break;
            }
          case C[72] || CT.C72:
            {
              assertCurrentChar(10, "LF");
              this[_state$1] = decoder._State.end;
              start = start + 1;
              break;
            }
          case C[73] || CT.C73:
            {
              dart.throw(new core.FormatException.new("Expected no more data.", bytes, start));
            }
        }
      }
      return buffer.buffer[$asUint8List](0, buffer.length);
    }
    [_digitForByte](bytes, index) {
      let byte = bytes[$_get](index);
      let digit = (48 ^ byte) >>> 0;
      if (digit <= 9) {
        if (digit >= 0) return digit;
      } else {
        let letter = (32 | byte) >>> 0;
        if (97 <= letter && letter <= 102) return letter - 97 + 10;
      }
      dart.throw(new core.FormatException.new("Invalid hexadecimal byte 0x" + byte[$toRadixString](16)[$toUpperCase]() + ".", bytes, index));
    }
  };
  (decoder._Sink.new = function(_sink) {
    this[_state$1] = decoder._State.boundary;
    this[___Sink__size] = null;
    this[_sink$] = _sink;
    decoder._Sink.__proto__.new.call(this);
    ;
  }).prototype = decoder._Sink.prototype;
  dart.addTypeTests(decoder._Sink);
  dart.addTypeCaches(decoder._Sink);
  dart.setMethodSignature(decoder._Sink, () => ({
    __proto__: dart.getMethods(decoder._Sink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, []),
    [_close$]: dart.fnType(dart.void, [], [dart.nullable(core.List$(core.int)), dart.nullable(core.int)]),
    [_decode]: dart.fnType(typed_data.Uint8List, [core.List$(core.int), core.int, core.int]),
    [_digitForByte]: dart.fnType(core.int, [core.List$(core.int), core.int])
  }));
  dart.setGetterSignature(decoder._Sink, () => ({
    __proto__: dart.getGetters(decoder._Sink.__proto__),
    [_size]: core.int
  }));
  dart.setSetterSignature(decoder._Sink, () => ({
    __proto__: dart.getSetters(decoder._Sink.__proto__),
    [_size]: core.int
  }));
  dart.setLibraryUri(decoder._Sink, I[78]);
  dart.setFieldSignature(decoder._Sink, () => ({
    __proto__: dart.getFields(decoder._Sink.__proto__),
    [_sink$]: dart.finalFieldType(core.Sink$(core.List$(core.int))),
    [_state$1]: dart.fieldType(decoder._State),
    [___Sink__size]: dart.fieldType(dart.nullable(core.int))
  }));
  var _name$0 = dart.privateName(decoder, "_name");
  const _name$1 = _State__name;
  decoder._State = class _State extends core.Object {
    get [_name$0]() {
      return this[_name$1];
    }
    set [_name$0](value) {
      super[_name$0] = value;
    }
    static ['_#_#tearOff'](_name) {
      return new decoder._State.__(_name);
    }
    toString() {
      return this[_name$0];
    }
  };
  (decoder._State.__ = function(_name) {
    this[_name$1] = _name;
    ;
  }).prototype = decoder._State.prototype;
  dart.addTypeTests(decoder._State);
  dart.addTypeCaches(decoder._State);
  dart.setLibraryUri(decoder._State, I[78]);
  dart.setFieldSignature(decoder._State, () => ({
    __proto__: dart.getFields(decoder._State.__proto__),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.setStaticFieldSignature(decoder._State, () => ['boundary', 'size', 'sizeBeforeLF', 'body', 'bodyBeforeCR', 'bodyBeforeLF', 'endBeforeCR', 'endBeforeLF', 'end']);
  dart.defineExtensionMethods(decoder._State, ['toString']);
  dart.defineLazy(decoder._State, {
    /*decoder._State.boundary*/get boundary() {
      return C[65] || CT.C65;
    },
    /*decoder._State.size*/get size() {
      return C[66] || CT.C66;
    },
    /*decoder._State.sizeBeforeLF*/get sizeBeforeLF() {
      return C[67] || CT.C67;
    },
    /*decoder._State.body*/get body() {
      return C[68] || CT.C68;
    },
    /*decoder._State.bodyBeforeCR*/get bodyBeforeCR() {
      return C[69] || CT.C69;
    },
    /*decoder._State.bodyBeforeLF*/get bodyBeforeLF() {
      return C[70] || CT.C70;
    },
    /*decoder._State.endBeforeCR*/get endBeforeCR() {
      return C[71] || CT.C71;
    },
    /*decoder._State.endBeforeLF*/get endBeforeLF() {
      return C[72] || CT.C72;
    },
    /*decoder._State.end*/get end() {
      return C[73] || CT.C73;
    }
  }, false);
  dart.defineLazy(decoder, {
    /*decoder.chunkedCodingDecoder*/get chunkedCodingDecoder() {
      return C[74] || CT.C74;
    }
  }, false);
  encoder.ChunkedCodingEncoder = class ChunkedCodingEncoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {
    static ['_#_#tearOff']() {
      return new encoder.ChunkedCodingEncoder.__();
    }
    convert(input) {
      T$.ListOfint().as(input);
      return encoder._convert(input, 0, input[$length], {isLast: true});
    }
    startChunkedConversion(sink) {
      T$.SinkOfListOfint().as(sink);
      return new encoder._Sink.new(sink);
    }
  };
  (encoder.ChunkedCodingEncoder.__ = function() {
    encoder.ChunkedCodingEncoder.__proto__.new.call(this);
    ;
  }).prototype = encoder.ChunkedCodingEncoder.prototype;
  dart.addTypeTests(encoder.ChunkedCodingEncoder);
  dart.addTypeCaches(encoder.ChunkedCodingEncoder);
  dart.setMethodSignature(encoder.ChunkedCodingEncoder, () => ({
    __proto__: dart.getMethods(encoder.ChunkedCodingEncoder.__proto__),
    convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(encoder.ChunkedCodingEncoder, I[79]);
  var _sink$0 = dart.privateName(encoder, "_sink");
  encoder._Sink = class _Sink extends convert.ByteConversionSinkBase {
    static ['_#new#tearOff'](_sink) {
      return new encoder._Sink.new(_sink);
    }
    add(chunk) {
      T$.ListOfint().as(chunk);
      this[_sink$0].add(encoder._convert(chunk, 0, chunk[$length]));
    }
    addSlice(chunk, start, end, isLast) {
      core.RangeError.checkValidRange(start, end, chunk[$length]);
      this[_sink$0].add(encoder._convert(chunk, start, end, {isLast: isLast}));
      if (isLast) this[_sink$0].close();
    }
    close() {
      this[_sink$0].add(encoder._doneChunk);
      this[_sink$0].close();
    }
  };
  (encoder._Sink.new = function(_sink) {
    this[_sink$0] = _sink;
    encoder._Sink.__proto__.new.call(this);
    ;
  }).prototype = encoder._Sink.prototype;
  dart.addTypeTests(encoder._Sink);
  dart.addTypeCaches(encoder._Sink);
  dart.setMethodSignature(encoder._Sink, () => ({
    __proto__: dart.getMethods(encoder._Sink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(encoder._Sink, I[79]);
  dart.setFieldSignature(encoder._Sink, () => ({
    __proto__: dart.getFields(encoder._Sink.__proto__),
    [_sink$0]: dart.finalFieldType(core.Sink$(core.List$(core.int)))
  }));
  encoder._convert = function _convert(bytes, start, end, opts) {
    let t45, t45$, t45$0, t45$1;
    let isLast = opts && 'isLast' in opts ? opts.isLast : false;
    if (end === start) return isLast ? encoder._doneChunk : C[75] || CT.C75;
    let size = end - start;
    let sizeInHex = size[$toRadixString](16);
    let footerSize = isLast ? encoder._doneChunk[$length] : 0;
    let list = _native_typed_data.NativeUint8List.new(sizeInHex.length + 4 + size + footerSize);
    list[$setRange](0, sizeInHex.length, sizeInHex[$codeUnits]);
    let cursor = sizeInHex.length;
    list[$_set]((t45 = cursor, cursor = t45 + 1, t45), 13);
    list[$_set]((t45$ = cursor, cursor = t45$ + 1, t45$), 10);
    list[$setRange](cursor, cursor + end - start, bytes, start);
    cursor = cursor + (end - start);
    list[$_set]((t45$0 = cursor, cursor = t45$0 + 1, t45$0), 13);
    list[$_set]((t45$1 = cursor, cursor = t45$1 + 1, t45$1), 10);
    if (isLast) {
      list[$setRange](list[$length] - footerSize, list[$length], encoder._doneChunk);
    }
    return list;
  };
  dart.defineLazy(encoder, {
    /*encoder.chunkedCodingEncoder*/get chunkedCodingEncoder() {
      return C[76] || CT.C76;
    },
    /*encoder._doneChunk*/get _doneChunk() {
      return _native_typed_data.NativeUint8List.fromList(T$.JSArrayOfint().of([48, 13, 10, 13, 10]));
    }
  }, false);
  dart.defineLazy(charcodes, {
    /*charcodes.$lf*/get $lf() {
      return 10;
    },
    /*charcodes.$cr*/get $cr() {
      return 13;
    },
    /*charcodes.$0*/get $0() {
      return 48;
    },
    /*charcodes.$1*/get $1() {
      return 49;
    },
    /*charcodes.$3*/get $3() {
      return 51;
    },
    /*charcodes.$4*/get $4() {
      return 52;
    },
    /*charcodes.$7*/get $7() {
      return 55;
    },
    /*charcodes.$A*/get $A() {
      return 65;
    },
    /*charcodes.$q*/get $q() {
      return 113;
    },
    /*charcodes.$a*/get $a() {
      return 97;
    },
    /*charcodes.$f*/get $f() {
      return 102;
    }
  }, false);
  var _table = dart.privateName(typed_queue, "_TypedQueue._table");
  var _head = dart.privateName(typed_queue, "_TypedQueue._head");
  var _tail = dart.privateName(typed_queue, "_TypedQueue._tail");
  var _table$ = dart.privateName(typed_queue, "_table");
  var _head$ = dart.privateName(typed_queue, "_head");
  var _tail$ = dart.privateName(typed_queue, "_tail");
  var _createBuffer = dart.privateName(typed_queue, "_createBuffer");
  var _createList = dart.privateName(typed_queue, "_createList");
  var _writeToList = dart.privateName(typed_queue, "_writeToList");
  var _growAtCapacity = dart.privateName(typed_queue, "_growAtCapacity");
  var _growTo = dart.privateName(typed_queue, "_growTo");
  var _defaultValue = dart.privateName(typed_queue, "_defaultValue");
  const _is__TypedQueue_default = Symbol('_is__TypedQueue_default');
  typed_queue._TypedQueue$ = dart.generic((E, L) => {
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$ListOfE = () => (__t$ListOfE = dart.constFn(core.List$(E)))();
    var __t$EN = () => (__t$EN = dart.constFn(dart.nullable(E)))();
    const Object_ListMixin$36 = class Object_ListMixin extends core.Object {};
    (Object_ListMixin$36.new = function() {
    }).prototype = Object_ListMixin$36.prototype;
    dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(E));
    class _TypedQueue extends Object_ListMixin$36 {
      get [_table$]() {
        return this[_table];
      }
      set [_table$](value) {
        this[_table] = value;
      }
      get [_head$]() {
        return this[_head];
      }
      set [_head$](value) {
        this[_head] = value;
      }
      get [_tail$]() {
        return this[_tail];
      }
      set [_tail$](value) {
        this[_tail] = value;
      }
      get length() {
        return (this[_tail$] - this[_head$] & this[_table$][$length] - 1) >>> 0;
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        let list = growable ? this[_createBuffer](this.length) : this[_createList](this.length);
        this[_writeToList](list);
        return list;
      }
      cast(T) {
        if (queue_list.QueueList$(T).is(this)) return queue_list.QueueList$(T).as(this);
        dart.throw(new core.UnsupportedError.new(dart.str(this) + " cannot be cast to the desired type."));
      }
      retype(T) {
        return this.cast(T);
      }
      addLast(value) {
        E.as(value);
        this[_table$][$_set](this[_tail$], value);
        this[_tail$] = (this[_tail$] + 1 & this[_table$][$length] - 1) >>> 0;
        if (this[_head$] === this[_tail$]) this[_growAtCapacity]();
      }
      addFirst(value) {
        E.as(value);
        this[_head$] = (this[_head$] - 1 & this[_table$][$length] - 1) >>> 0;
        this[_table$][$_set](this[_head$], value);
        if (this[_head$] === this[_tail$]) this[_growAtCapacity]();
      }
      removeFirst() {
        if (this[_head$] === this[_tail$]) dart.throw(new core.StateError.new("No element"));
        let result = this[_table$][$_get](this[_head$]);
        this[_head$] = (this[_head$] + 1 & this[_table$][$length] - 1) >>> 0;
        return result;
      }
      removeLast() {
        if (this[_head$] === this[_tail$]) dart.throw(new core.StateError.new("No element"));
        this[_tail$] = (this[_tail$] - 1 & this[_table$][$length] - 1) >>> 0;
        return this[_table$][$_get](this[_tail$]);
      }
      add(value) {
        E.as(value);
        return this.addLast(value);
      }
      set length(value) {
        core.RangeError.checkNotNegative(value, "length");
        let delta = value - this.length;
        if (delta >= 0) {
          let needsToGrow = this[_table$][$length] <= value;
          if (needsToGrow) this[_growTo](value);
          this[_tail$] = (this[_tail$] + delta & this[_table$][$length] - 1) >>> 0;
          if (!needsToGrow) this.fillRange(value - delta, value, this[_defaultValue]);
        } else {
          this.removeRange(value, this.length);
        }
      }
      _get(index) {
        core.RangeError.checkValidIndex(index, this, null, this.length);
        return this[_table$][$_get]((this[_head$] + index & this[_table$][$length] - 1) >>> 0);
      }
      _set(index, value$) {
        let value = value$;
        E.as(value);
        core.RangeError.checkValidIndex(index, this);
        this[_table$][$_set]((this[_head$] + index & this[_table$][$length] - 1) >>> 0, value);
        return value$;
      }
      removeRange(start, end) {
        let length = this.length;
        core.RangeError.checkValidRange(start, end, length);
        if (start === 0) {
          this[_head$] = (this[_head$] + end & this[_table$][$length] - 1) >>> 0;
          return;
        }
        let elementsAfter = length - end;
        if (elementsAfter === 0) {
          this[_tail$] = (this[_head$] + start & this[_table$][$length] - 1) >>> 0;
          return;
        }
        let removedElements = end - start;
        if (start < elementsAfter) {
          this.setRange(removedElements, end, this);
          this[_head$] = (this[_head$] + removedElements & this[_table$][$length] - 1) >>> 0;
        } else {
          this.setRange(start, length - removedElements, this, end);
          this[_tail$] = (this[_tail$] - removedElements & this[_table$][$length] - 1) >>> 0;
        }
      }
      setRange(start, end, iterable, skipCount = 0) {
        __t$IterableOfE().as(iterable);
        core.RangeError.checkValidRange(start, end, this.length);
        if (start === end) return;
        let targetStart = (this[_head$] + start & this[_table$][$length] - 1) >>> 0;
        let targetEnd = (this[_head$] + end & this[_table$][$length] - 1) >>> 0;
        let targetIsContiguous = targetStart < targetEnd;
        if (iterable === this) {
          let sourceStart = (this[_head$] + skipCount & this[_table$][$length] - 1) >>> 0;
          let sourceEnd = (sourceStart + (end - start) & this[_table$][$length] - 1) >>> 0;
          if (sourceStart === targetStart) return;
          let sourceIsContiguous = sourceStart < sourceEnd;
          if (targetIsContiguous && sourceIsContiguous) {
            this[_table$][$setRange](targetStart, targetEnd, this[_table$], sourceStart);
          } else if (!targetIsContiguous && !sourceIsContiguous) {
            if (sourceStart > targetStart) {
              let startGap = sourceStart - targetStart;
              let firstEnd = this[_table$][$length] - startGap;
              this[_table$][$setRange](targetStart, firstEnd, this[_table$], sourceStart);
              this[_table$][$setRange](firstEnd, this[_table$][$length], this[_table$]);
              this[_table$][$setRange](0, targetEnd, this[_table$], startGap);
            } else if (sourceEnd < targetEnd) {
              let firstStart = targetEnd - sourceEnd;
              this[_table$][$setRange](firstStart, targetEnd, this[_table$]);
              this[_table$][$setRange](0, firstStart, this[_table$], this[_table$][$length] - firstStart);
              this[_table$][$setRange](targetStart, this[_table$][$length], this[_table$], sourceStart);
            }
          } else if (sourceStart < targetEnd) {
            if (sourceIsContiguous) {
              this[_table$][$setRange](targetStart, this[_table$][$length], this[_table$], sourceStart);
              this[_table$][$setRange](0, targetEnd, this[_table$], sourceStart + (this[_table$][$length] - targetStart));
            } else {
              let firstEnd = this[_table$][$length] - sourceStart;
              this[_table$][$setRange](targetStart, firstEnd, this[_table$], sourceStart);
              this[_table$][$setRange](firstEnd, targetEnd, this[_table$]);
            }
          } else {
            if (sourceIsContiguous) {
              this[_table$][$setRange](0, targetEnd, this[_table$], sourceStart + (this[_table$][$length] - targetStart));
              this[_table$][$setRange](targetStart, this[_table$][$length], this[_table$], sourceStart);
            } else {
              let firstStart = targetEnd - sourceEnd;
              this[_table$][$setRange](firstStart, targetEnd, this[_table$]);
              this[_table$][$setRange](targetStart, firstStart, this[_table$], sourceStart);
            }
          }
        } else if (targetIsContiguous) {
          this[_table$][$setRange](targetStart, targetEnd, iterable, skipCount);
        } else if (__t$ListOfE().is(iterable)) {
          this[_table$][$setRange](targetStart, this[_table$][$length], iterable, skipCount);
          this[_table$][$setRange](0, targetEnd, iterable, skipCount + (this[_table$][$length] - targetStart));
        } else {
          super.setRange(start, end, iterable, skipCount);
        }
      }
      fillRange(start, end, value = null) {
        __t$EN().as(value);
        let startInTable = (this[_head$] + start & this[_table$][$length] - 1) >>> 0;
        let endInTable = (this[_head$] + end & this[_table$][$length] - 1) >>> 0;
        if (startInTable <= endInTable) {
          this[_table$][$fillRange](startInTable, endInTable, value);
        } else {
          this[_table$][$fillRange](startInTable, this[_table$][$length], value);
          this[_table$][$fillRange](0, endInTable, value);
        }
      }
      sublist(start, end = null) {
        let length = this.length;
        let nonNullEnd = core.RangeError.checkValidRange(start, end, length);
        let list = this[_createList](nonNullEnd - start);
        this[_writeToList](list, start, nonNullEnd);
        return list;
      }
      [_writeToList](target, start = null, end = null) {
        start == null ? start = 0 : null;
        end == null ? end = this.length : null;
        if (!(target[$length] >= dart.notNull(end) - dart.notNull(start))) dart.assertFailed(null, I[80], 278, 12, "target.length >= end - start");
        if (!(dart.notNull(start) <= dart.notNull(end))) dart.assertFailed(null, I[80], 279, 12, "start <= end");
        let elementsToWrite = dart.notNull(end) - dart.notNull(start);
        let startInTable = (this[_head$] + dart.notNull(start) & this[_table$][$length] - 1) >>> 0;
        let endInTable = (this[_head$] + dart.notNull(end) & this[_table$][$length] - 1) >>> 0;
        if (startInTable <= endInTable) {
          target[$setRange](0, elementsToWrite, this[_table$], startInTable);
        } else {
          let firstPartSize = this[_table$][$length] - startInTable;
          target[$setRange](0, firstPartSize, this[_table$], startInTable);
          target[$setRange](firstPartSize, firstPartSize + endInTable, this[_table$], 0);
        }
        return elementsToWrite;
      }
      [_growAtCapacity]() {
        if (!(this[_head$] === this[_tail$])) dart.assertFailed(null, I[80], 297, 12, "_head == _tail");
        let newTable = this[_createList](this[_table$][$length] * 2);
        let partitionPoint = this[_table$][$length] - this[_head$];
        newTable[$setRange](0, partitionPoint, this[_table$], this[_head$]);
        if (partitionPoint !== this[_table$][$length]) {
          newTable[$setRange](partitionPoint, this[_table$][$length], this[_table$]);
        }
        this[_head$] = 0;
        this[_tail$] = this[_table$][$length];
        this[_table$] = newTable;
      }
      [_growTo](newElementCount) {
        if (!(newElementCount >= this.length)) dart.assertFailed(null, I[80], 316, 12, "newElementCount >= length");
        newElementCount = newElementCount + newElementCount[$rightShift](1);
        let newTable = this[_createList](typed_queue._nextPowerOf2(newElementCount));
        this[_tail$] = this[_writeToList](newTable);
        this[_table$] = newTable;
        this[_head$] = 0;
      }
    }
    (_TypedQueue.new = function(table) {
      this[_table] = L.as(table);
      this[_head] = 0;
      this[_tail] = 0;
      ;
    }).prototype = _TypedQueue.prototype;
    dart.addTypeTests(_TypedQueue);
    _TypedQueue.prototype[_is__TypedQueue_default] = true;
    dart.addTypeCaches(_TypedQueue);
    dart.setMethodSignature(_TypedQueue, () => ({
      __proto__: dart.getMethods(_TypedQueue.__proto__),
      cast: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      retype: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      addLast: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFirst: dart.fnType(E, []),
      _get: dart.fnType(E, [core.int]),
      [$_get]: dart.fnType(E, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      sublist: dart.fnType(L, [core.int], [dart.nullable(core.int)]),
      [$sublist]: dart.fnType(L, [core.int], [dart.nullable(core.int)]),
      [_writeToList]: dart.fnType(core.int, [core.List$(E)], [dart.nullable(core.int), dart.nullable(core.int)]),
      [_growAtCapacity]: dart.fnType(dart.void, []),
      [_growTo]: dart.fnType(dart.void, [core.int])
    }));
    dart.setGetterSignature(_TypedQueue, () => ({
      __proto__: dart.getGetters(_TypedQueue.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setSetterSignature(_TypedQueue, () => ({
      __proto__: dart.getSetters(_TypedQueue.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(_TypedQueue, I[81]);
    dart.setFieldSignature(_TypedQueue, () => ({
      __proto__: dart.getFields(_TypedQueue.__proto__),
      [_table$]: dart.fieldType(L),
      [_head$]: dart.fieldType(core.int),
      [_tail$]: dart.fieldType(core.int)
    }));
    dart.defineExtensionMethods(_TypedQueue, [
      'toList',
      'cast',
      'removeLast',
      'add',
      '_get',
      '_set',
      'removeRange',
      'setRange',
      'fillRange',
      'sublist'
    ]);
    dart.defineExtensionAccessors(_TypedQueue, ['length']);
    return _TypedQueue;
  });
  typed_queue._TypedQueue = typed_queue._TypedQueue$();
  dart.addTypeTests(typed_queue._TypedQueue, _is__TypedQueue_default);
  const _is__IntQueue_default = Symbol('_is__IntQueue_default');
  typed_queue._IntQueue$ = dart.generic(L => {
    class _IntQueue extends typed_queue._TypedQueue$(core.int, L) {
      get [_defaultValue]() {
        return 0;
      }
    }
    (_IntQueue.new = function(queue) {
      _IntQueue.__proto__.new.call(this, queue);
      ;
    }).prototype = _IntQueue.prototype;
    dart.addTypeTests(_IntQueue);
    _IntQueue.prototype[_is__IntQueue_default] = true;
    dart.addTypeCaches(_IntQueue);
    dart.setGetterSignature(_IntQueue, () => ({
      __proto__: dart.getGetters(_IntQueue.__proto__),
      [_defaultValue]: core.int
    }));
    dart.setLibraryUri(_IntQueue, I[81]);
    return _IntQueue;
  });
  typed_queue._IntQueue = typed_queue._IntQueue$();
  dart.addTypeTests(typed_queue._IntQueue, _is__IntQueue_default);
  const _is__FloatQueue_default = Symbol('_is__FloatQueue_default');
  typed_queue._FloatQueue$ = dart.generic(L => {
    class _FloatQueue extends typed_queue._TypedQueue$(core.double, L) {
      get [_defaultValue]() {
        return 0;
      }
    }
    (_FloatQueue.new = function(queue) {
      _FloatQueue.__proto__.new.call(this, queue);
      ;
    }).prototype = _FloatQueue.prototype;
    dart.addTypeTests(_FloatQueue);
    _FloatQueue.prototype[_is__FloatQueue_default] = true;
    dart.addTypeCaches(_FloatQueue);
    dart.setGetterSignature(_FloatQueue, () => ({
      __proto__: dart.getGetters(_FloatQueue.__proto__),
      [_defaultValue]: core.double
    }));
    dart.setLibraryUri(_FloatQueue, I[81]);
    return _FloatQueue;
  });
  typed_queue._FloatQueue = typed_queue._FloatQueue$();
  dart.addTypeTests(typed_queue._FloatQueue, _is__FloatQueue_default);
  var _add = dart.privateName(typed_queue, "_add");
  var _add$ = dart.privateName(serialization, "_add");
  var _head$0 = dart.privateName(queue_list, "_head");
  var _writeToList$ = dart.privateName(queue_list, "_writeToList");
  var _grow = dart.privateName(typed_queue, "_grow");
  var _grow$ = dart.privateName(queue_list, "_grow");
  var _preGrow = dart.privateName(typed_queue, "_preGrow");
  var _preGrow$ = dart.privateName(queue_list, "_preGrow");
  var _table$0 = dart.privateName(queue_list, "_table");
  var _tail$0 = dart.privateName(queue_list, "_tail");
  var _head_ = dart.privateName(typed_queue, "_head=");
  var _table_ = dart.privateName(typed_queue, "_table=");
  var _tail_ = dart.privateName(typed_queue, "_tail=");
  typed_queue.Uint8Queue = class Uint8Queue extends typed_queue._IntQueue$(typed_data.Uint8List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint8Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t45;
      t45 = new typed_queue.Uint8Queue.new(elements[$length]);
      return (() => {
        t45.addAll(elements);
        return t45;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint8Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeUint8List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint8Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[77] || CT.C77, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[78] || CT.C78)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[79] || CT.C79, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[80] || CT.C80, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[81] || CT.C81, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[82] || CT.C82)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[83] || CT.C83)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[84] || CT.C84, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[85] || CT.C85, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[86] || CT.C86, value)));
    }
  };
  (typed_queue.Uint8Queue.new = function(initialCapacity = null) {
    typed_queue.Uint8Queue.__proto__.new.call(this, _native_typed_data.NativeUint8List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint8Queue.prototype;
  dart.addTypeTests(typed_queue.Uint8Queue);
  dart.addTypeCaches(typed_queue.Uint8Queue);
  typed_queue.Uint8Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint8Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint8Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint8List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint8Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint8Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint8Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint8Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint8Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint8Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint8Queue, I[81]);
  typed_queue.Int8Queue = class Int8Queue extends typed_queue._IntQueue$(typed_data.Int8List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int8Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t45;
      t45 = new typed_queue.Int8Queue.new(elements[$length]);
      return (() => {
        t45.addAll(elements);
        return t45;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int8Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeInt8List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int8Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[77] || CT.C77, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[78] || CT.C78)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[79] || CT.C79, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[80] || CT.C80, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[81] || CT.C81, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[82] || CT.C82)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[83] || CT.C83)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[84] || CT.C84, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[85] || CT.C85, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[86] || CT.C86, value)));
    }
  };
  (typed_queue.Int8Queue.new = function(initialCapacity = null) {
    typed_queue.Int8Queue.__proto__.new.call(this, _native_typed_data.NativeInt8List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int8Queue.prototype;
  dart.addTypeTests(typed_queue.Int8Queue);
  dart.addTypeCaches(typed_queue.Int8Queue);
  typed_queue.Int8Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int8Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int8Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int8List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int8Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int8Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int8Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int8Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int8Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int8Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int8Queue, I[81]);
  typed_queue.Uint8ClampedQueue = class Uint8ClampedQueue extends typed_queue._IntQueue$(typed_data.Uint8ClampedList) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint8ClampedQueue.new(initialCapacity);
    }
    static fromList(elements) {
      let t45;
      t45 = new typed_queue.Uint8ClampedQueue.new(elements[$length]);
      return (() => {
        t45.addAll(elements);
        return t45;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint8ClampedQueue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeUint8ClampedList.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint8ClampedBuffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[77] || CT.C77, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[78] || CT.C78)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[79] || CT.C79, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[80] || CT.C80, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[81] || CT.C81, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[82] || CT.C82)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[83] || CT.C83)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[84] || CT.C84, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[85] || CT.C85, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[86] || CT.C86, value)));
    }
  };
  (typed_queue.Uint8ClampedQueue.new = function(initialCapacity = null) {
    typed_queue.Uint8ClampedQueue.__proto__.new.call(this, _native_typed_data.NativeUint8ClampedList.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint8ClampedQueue.prototype;
  dart.addTypeTests(typed_queue.Uint8ClampedQueue);
  dart.addTypeCaches(typed_queue.Uint8ClampedQueue);
  typed_queue.Uint8ClampedQueue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint8ClampedQueue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint8ClampedQueue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint8ClampedList, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint8ClampedBuffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint8ClampedQueue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint8ClampedQueue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint8ClampedQueue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint8ClampedQueue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint8ClampedQueue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint8ClampedQueue, I[81]);
  typed_queue.Uint16Queue = class Uint16Queue extends typed_queue._IntQueue$(typed_data.Uint16List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint16Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t45;
      t45 = new typed_queue.Uint16Queue.new(elements[$length]);
      return (() => {
        t45.addAll(elements);
        return t45;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint16Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeUint16List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint16Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[77] || CT.C77, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[78] || CT.C78)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[79] || CT.C79, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[80] || CT.C80, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[81] || CT.C81, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[82] || CT.C82)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[83] || CT.C83)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[84] || CT.C84, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[85] || CT.C85, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[86] || CT.C86, value)));
    }
  };
  (typed_queue.Uint16Queue.new = function(initialCapacity = null) {
    typed_queue.Uint16Queue.__proto__.new.call(this, _native_typed_data.NativeUint16List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint16Queue.prototype;
  dart.addTypeTests(typed_queue.Uint16Queue);
  dart.addTypeCaches(typed_queue.Uint16Queue);
  typed_queue.Uint16Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint16Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint16Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint16List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint16Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint16Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint16Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint16Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint16Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint16Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint16Queue, I[81]);
  typed_queue.Int16Queue = class Int16Queue extends typed_queue._IntQueue$(typed_data.Int16List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int16Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t45;
      t45 = new typed_queue.Int16Queue.new(elements[$length]);
      return (() => {
        t45.addAll(elements);
        return t45;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int16Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeInt16List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int16Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[77] || CT.C77, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[78] || CT.C78)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[79] || CT.C79, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[80] || CT.C80, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[81] || CT.C81, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[82] || CT.C82)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[83] || CT.C83)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[84] || CT.C84, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[85] || CT.C85, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[86] || CT.C86, value)));
    }
  };
  (typed_queue.Int16Queue.new = function(initialCapacity = null) {
    typed_queue.Int16Queue.__proto__.new.call(this, _native_typed_data.NativeInt16List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int16Queue.prototype;
  dart.addTypeTests(typed_queue.Int16Queue);
  dart.addTypeCaches(typed_queue.Int16Queue);
  typed_queue.Int16Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int16Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int16Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int16List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int16Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int16Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int16Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int16Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int16Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int16Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int16Queue, I[81]);
  typed_queue.Uint32Queue = class Uint32Queue extends typed_queue._IntQueue$(typed_data.Uint32List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint32Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t45;
      t45 = new typed_queue.Uint32Queue.new(elements[$length]);
      return (() => {
        t45.addAll(elements);
        return t45;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint32Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeUint32List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint32Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[77] || CT.C77, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[78] || CT.C78)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[79] || CT.C79, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[80] || CT.C80, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[81] || CT.C81, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[82] || CT.C82)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[83] || CT.C83)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[84] || CT.C84, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[85] || CT.C85, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[86] || CT.C86, value)));
    }
  };
  (typed_queue.Uint32Queue.new = function(initialCapacity = null) {
    typed_queue.Uint32Queue.__proto__.new.call(this, _native_typed_data.NativeUint32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint32Queue.prototype;
  dart.addTypeTests(typed_queue.Uint32Queue);
  dart.addTypeCaches(typed_queue.Uint32Queue);
  typed_queue.Uint32Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint32Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint32Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint32List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint32Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint32Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint32Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint32Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint32Queue, I[81]);
  typed_queue.Int32Queue = class Int32Queue extends typed_queue._IntQueue$(typed_data.Int32List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int32Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t45;
      t45 = new typed_queue.Int32Queue.new(elements[$length]);
      return (() => {
        t45.addAll(elements);
        return t45;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int32Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeInt32List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int32Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[77] || CT.C77, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[78] || CT.C78)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[79] || CT.C79, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[80] || CT.C80, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[81] || CT.C81, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[82] || CT.C82)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[83] || CT.C83)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[84] || CT.C84, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[85] || CT.C85, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[86] || CT.C86, value)));
    }
  };
  (typed_queue.Int32Queue.new = function(initialCapacity = null) {
    typed_queue.Int32Queue.__proto__.new.call(this, _native_typed_data.NativeInt32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int32Queue.prototype;
  dart.addTypeTests(typed_queue.Int32Queue);
  dart.addTypeCaches(typed_queue.Int32Queue);
  typed_queue.Int32Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int32Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int32Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int32List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int32Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int32Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int32Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int32Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int32Queue, I[81]);
  typed_queue.Uint64Queue = class Uint64Queue extends typed_queue._IntQueue$(typed_data.Uint64List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint64Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t45;
      t45 = new typed_queue.Uint64Queue.new(elements[$length]);
      return (() => {
        t45.addAll(elements);
        return t45;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint64Queue.fromList(elements);
    }
    [_createList](size) {
      return typed_data.Uint64List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Uint64Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[77] || CT.C77, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[78] || CT.C78)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[79] || CT.C79, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[80] || CT.C80, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[81] || CT.C81, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[82] || CT.C82)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[83] || CT.C83)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[84] || CT.C84, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[85] || CT.C85, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[86] || CT.C86, value)));
    }
  };
  (typed_queue.Uint64Queue.new = function(initialCapacity = null) {
    typed_queue.Uint64Queue.__proto__.new.call(this, typed_data.Uint64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint64Queue.prototype;
  dart.addTypeTests(typed_queue.Uint64Queue);
  dart.addTypeCaches(typed_queue.Uint64Queue);
  typed_queue.Uint64Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint64Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint64Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Uint64List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Uint64Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint64Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint64Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint64Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint64Queue, I[81]);
  typed_queue.Int64Queue = class Int64Queue extends typed_queue._IntQueue$(typed_data.Int64List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int64Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t45;
      t45 = new typed_queue.Int64Queue.new(elements[$length]);
      return (() => {
        t45.addAll(elements);
        return t45;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int64Queue.fromList(elements);
    }
    [_createList](size) {
      return typed_data.Int64List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int64Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[77] || CT.C77, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[78] || CT.C78)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[79] || CT.C79, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[80] || CT.C80, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[81] || CT.C81, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[82] || CT.C82)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[83] || CT.C83)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[84] || CT.C84, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[85] || CT.C85, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[86] || CT.C86, value)));
    }
  };
  (typed_queue.Int64Queue.new = function(initialCapacity = null) {
    typed_queue.Int64Queue.__proto__.new.call(this, typed_data.Int64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int64Queue.prototype;
  dart.addTypeTests(typed_queue.Int64Queue);
  dart.addTypeCaches(typed_queue.Int64Queue);
  typed_queue.Int64Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int64Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int64Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int64List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int64Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.int]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int64Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int64Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int64Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.int)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int64Queue, I[81]);
  typed_queue.Float32Queue = class Float32Queue extends typed_queue._FloatQueue$(typed_data.Float32List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Float32Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t45;
      t45 = new typed_queue.Float32Queue.new(elements[$length]);
      return (() => {
        t45.addAll(elements);
        return t45;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Float32Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeFloat32List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Float32Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[77] || CT.C77, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[78] || CT.C78)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[79] || CT.C79, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[80] || CT.C80, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[81] || CT.C81, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[82] || CT.C82)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[83] || CT.C83)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[84] || CT.C84, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[85] || CT.C85, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[86] || CT.C86, value)));
    }
  };
  (typed_queue.Float32Queue.new = function(initialCapacity = null) {
    typed_queue.Float32Queue.__proto__.new.call(this, _native_typed_data.NativeFloat32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Float32Queue.prototype;
  dart.addTypeTests(typed_queue.Float32Queue);
  dart.addTypeCaches(typed_queue.Float32Queue);
  typed_queue.Float32Queue[dart.implements] = () => [queue_list.QueueList$(core.double)];
  dart.setMethodSignature(typed_queue.Float32Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Float32Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Float32List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Float32Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.double]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.double))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Float32Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Float32Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Float32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.double)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Float32Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Float32Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.double)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Float32Queue, I[81]);
  typed_queue.Float64Queue = class Float64Queue extends typed_queue._FloatQueue$(typed_data.Float64List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Float64Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t45;
      t45 = new typed_queue.Float64Queue.new(elements[$length]);
      return (() => {
        t45.addAll(elements);
        return t45;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Float64Queue.fromList(elements);
    }
    [_createList](size) {
      return _native_typed_data.NativeFloat64List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Float64Buffer.new(size);
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[77] || CT.C77, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[78] || CT.C78)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[79] || CT.C79, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[80] || CT.C80, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[81] || CT.C81, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[82] || CT.C82)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[83] || CT.C83)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[84] || CT.C84, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[85] || CT.C85, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[86] || CT.C86, value)));
    }
  };
  (typed_queue.Float64Queue.new = function(initialCapacity = null) {
    typed_queue.Float64Queue.__proto__.new.call(this, _native_typed_data.NativeFloat64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Float64Queue.prototype;
  dart.addTypeTests(typed_queue.Float64Queue);
  dart.addTypeCaches(typed_queue.Float64Queue);
  typed_queue.Float64Queue[dart.implements] = () => [queue_list.QueueList$(core.double)];
  dart.setMethodSignature(typed_queue.Float64Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Float64Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Float64List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Float64Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [core.double]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(core.double))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Float64Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Float64Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Float64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.double)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Float64Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Float64Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(core.double)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Float64Queue, I[81]);
  typed_queue.Int32x4Queue = class Int32x4Queue extends typed_queue._TypedQueue$(typed_data.Int32x4, typed_data.Int32x4List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int32x4Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t45;
      t45 = new typed_queue.Int32x4Queue.new(elements[$length]);
      return (() => {
        t45.addAll(elements);
        return t45;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int32x4Queue.fromList(elements);
    }
    [_createList](size) {
      return new _native_typed_data.NativeInt32x4List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Int32x4Buffer.new(size);
    }
    get [_defaultValue]() {
      return typed_queue.Int32x4Queue._zero;
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[77] || CT.C77, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[78] || CT.C78)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[79] || CT.C79, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[80] || CT.C80, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[81] || CT.C81, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[82] || CT.C82)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[83] || CT.C83)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[84] || CT.C84, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[85] || CT.C85, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[86] || CT.C86, value)));
    }
  };
  (typed_queue.Int32x4Queue.new = function(initialCapacity = null) {
    typed_queue.Int32x4Queue.__proto__.new.call(this, new _native_typed_data.NativeInt32x4List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int32x4Queue.prototype;
  dart.addTypeTests(typed_queue.Int32x4Queue);
  dart.addTypeCaches(typed_queue.Int32x4Queue);
  typed_queue.Int32x4Queue[dart.implements] = () => [queue_list.QueueList$(typed_data.Int32x4)];
  dart.setMethodSignature(typed_queue.Int32x4Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int32x4Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Int32x4List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Int32x4Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [typed_data.Int32x4]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(typed_data.Int32x4))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int32x4Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int32x4Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int32x4Queue.__proto__),
    [_defaultValue]: typed_data.Int32x4,
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(typed_data.Int32x4)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int32x4Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int32x4Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(typed_data.Int32x4)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int32x4Queue, I[81]);
  dart.setStaticFieldSignature(typed_queue.Int32x4Queue, () => ['_zero']);
  dart.defineLazy(typed_queue.Int32x4Queue, {
    /*typed_queue.Int32x4Queue._zero*/get _zero() {
      return new _native_typed_data.NativeInt32x4.new(0, 0, 0, 0);
    }
  }, false);
  typed_queue.Float32x4Queue = class Float32x4Queue extends typed_queue._TypedQueue$(typed_data.Float32x4, typed_data.Float32x4List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Float32x4Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t45;
      t45 = new typed_queue.Float32x4Queue.new(elements[$length]);
      return (() => {
        t45.addAll(elements);
        return t45;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Float32x4Queue.fromList(elements);
    }
    [_createList](size) {
      return new _native_typed_data.NativeFloat32x4List.new(size);
    }
    [_createBuffer](size) {
      return new typed_buffer.Float32x4Buffer.new(size);
    }
    get [_defaultValue]() {
      return new _native_typed_data.NativeFloat32x4.zero();
    }
    [_add$](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[77] || CT.C77, null, [element])));
    }
    get [_head$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[78] || CT.C78)));
    }
    [_writeToList$](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[79] || CT.C79, null, [target])));
    }
    [_grow$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[80] || CT.C80, null, [])));
    }
    [_preGrow$](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[81] || CT.C81, null, [newElementCount])));
    }
    get [_table$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[82] || CT.C82)));
    }
    get [_tail$0]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[83] || CT.C83)));
    }
    set [_head$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[84] || CT.C84, value)));
    }
    set [_table$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[85] || CT.C85, value)));
    }
    set [_tail$0](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[86] || CT.C86, value)));
    }
  };
  (typed_queue.Float32x4Queue.new = function(initialCapacity = null) {
    typed_queue.Float32x4Queue.__proto__.new.call(this, new _native_typed_data.NativeFloat32x4List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Float32x4Queue.prototype;
  dart.addTypeTests(typed_queue.Float32x4Queue);
  dart.addTypeCaches(typed_queue.Float32x4Queue);
  typed_queue.Float32x4Queue[dart.implements] = () => [queue_list.QueueList$(typed_data.Float32x4)];
  dart.setMethodSignature(typed_queue.Float32x4Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Float32x4Queue.__proto__),
    [_createList]: dart.fnType(typed_data.Float32x4List, [core.int]),
    [_createBuffer]: dart.fnType(typed_buffer.Float32x4Buffer, [core.int]),
    [_add$]: dart.fnType(dart.void, [typed_data.Float32x4]),
    [_writeToList$]: dart.fnType(core.int, [core.List$(dart.nullable(typed_data.Float32x4))]),
    [_grow$]: dart.fnType(dart.void, []),
    [_preGrow$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Float32x4Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Float32x4Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Float32x4Queue.__proto__),
    [_defaultValue]: typed_data.Float32x4,
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(typed_data.Float32x4)),
    [_tail$0]: core.int
  }));
  dart.setSetterSignature(typed_queue.Float32x4Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Float32x4Queue.__proto__),
    [_head$0]: core.int,
    [_table$0]: core.List$(dart.nullable(typed_data.Float32x4)),
    [_tail$0]: core.int
  }));
  dart.setLibraryUri(typed_queue.Float32x4Queue, I[81]);
  typed_queue._chooseRealInitialCapacity = function _chooseRealInitialCapacity(initialCapacity) {
    if (initialCapacity == null || dart.notNull(initialCapacity) < 16) {
      return 16;
    } else if (!typed_queue._isPowerOf2(initialCapacity)) {
      return typed_queue._nextPowerOf2(initialCapacity);
    } else {
      return initialCapacity;
    }
  };
  typed_queue._isPowerOf2 = function _isPowerOf2(number) {
    return (number & number - 1) === 0;
  };
  typed_queue._nextPowerOf2 = function _nextPowerOf2(number) {
    if (!(number > 0)) dart.assertFailed(null, I[80], 691, 10, "number > 0");
    number = (number << 1 >>> 0) - 1;
    for (;;) {
      let nextNumber = (number & number - 1) >>> 0;
      if (nextNumber === 0) return number;
      number = nextNumber;
    }
  };
  dart.defineLazy(typed_queue, {
    /*typed_queue._defaultInitialCapacity*/get _defaultInitialCapacity() {
      return 16;
    }
  }, false);
  var _buffer = dart.privateName(typed_buffer, "_buffer");
  var _length = dart.privateName(typed_buffer, "_length");
  var _typedBuffer = dart.privateName(typed_buffer, "_typedBuffer");
  var _defaultValue$ = dart.privateName(typed_buffer, "_defaultValue");
  var _createBuffer$ = dart.privateName(typed_buffer, "_createBuffer");
  var _createBiggerBuffer = dart.privateName(typed_buffer, "_createBiggerBuffer");
  var _grow$0 = dart.privateName(typed_buffer, "_grow");
  var _add$0 = dart.privateName(typed_buffer, "_add");
  var _addAll = dart.privateName(typed_buffer, "_addAll");
  var _insertKnownLength = dart.privateName(typed_buffer, "_insertKnownLength");
  var _ensureCapacity = dart.privateName(typed_buffer, "_ensureCapacity");
  var _setRange = dart.privateName(typed_buffer, "_setRange");
  const _is_TypedDataBuffer_default = Symbol('_is_TypedDataBuffer_default');
  typed_buffer.TypedDataBuffer$ = dart.generic(E => {
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$TypedDataBufferOfE = () => (__t$TypedDataBufferOfE = dart.constFn(typed_buffer.TypedDataBuffer$(E)))();
    class TypedDataBuffer extends collection.ListBase$(E) {
      get [_typedBuffer]() {
        return typed_data.TypedData.as(this[_buffer]);
      }
      get length() {
        return this[_length];
      }
      _get(index) {
        if (index >= this.length) dart.throw(new core.IndexError.new(index, this));
        return this[_buffer][$_get](index);
      }
      _set(index, value$) {
        let value = value$;
        E.as(value);
        if (index >= this.length) dart.throw(new core.IndexError.new(index, this));
        this[_buffer][$_set](index, value);
        return value$;
      }
      set length(newLength) {
        if (newLength < this[_length]) {
          let defaultValue = this[_defaultValue$];
          for (let i = newLength; i < this[_length]; i = i + 1) {
            this[_buffer][$_set](i, defaultValue);
          }
        } else if (newLength > this[_buffer][$length]) {
          let newBuffer = null;
          if (this[_buffer][$isEmpty]) {
            newBuffer = this[_createBuffer$](newLength);
          } else {
            newBuffer = this[_createBiggerBuffer](newLength);
          }
          newBuffer[$setRange](0, this[_length], this[_buffer]);
          this[_buffer] = newBuffer;
        }
        this[_length] = newLength;
      }
      [_add$0](value) {
        let t45;
        if (this[_length] === this[_buffer][$length]) this[_grow$0](this[_length]);
        this[_buffer][$_set]((t45 = this[_length], this[_length] = t45 + 1, t45), value);
      }
      add(element) {
        E.as(element);
        this[_add$0](element);
      }
      addAll(values, start = 0, end = null) {
        __t$IterableOfE().as(values);
        core.RangeError.checkNotNegative(start, "start");
        if (end != null && start > dart.notNull(end)) {
          dart.throw(new core.RangeError.range(end, start, null, "end"));
        }
        this[_addAll](values, start, end);
      }
      insertAll(index, values, start = 0, end = null) {
        let t45;
        __t$IterableOfE().as(values);
        core.RangeError.checkValidIndex(index, this, "index", this[_length] + 1);
        core.RangeError.checkNotNegative(start, "start");
        if (end != null) {
          if (start > dart.notNull(end)) {
            dart.throw(new core.RangeError.range(end, start, null, "end"));
          }
          if (start === end) return;
        }
        if (index === this[_length]) {
          this[_addAll](values, start, end);
          return;
        }
        if (end == null && core.List.is(values)) {
          end = values[$length];
        }
        if (end != null) {
          this[_insertKnownLength](index, values, start, end);
          return;
        }
        let writeIndex = this[_length];
        let skipCount = start;
        for (let value of values) {
          if (skipCount > 0) {
            skipCount = skipCount - 1;
            continue;
          }
          if (writeIndex === this[_buffer][$length]) {
            this[_grow$0](writeIndex);
          }
          this[_buffer][$_set]((t45 = writeIndex, writeIndex = t45 + 1, t45), value);
        }
        if (skipCount > 0) {
          dart.throw(new core.StateError.new("Too few elements"));
        }
        if (end != null && writeIndex < dart.notNull(end)) {
          dart.throw(new core.RangeError.range(end, start, writeIndex, "end"));
        }
        typed_buffer.TypedDataBuffer._reverse(this[_buffer], index, this[_length]);
        typed_buffer.TypedDataBuffer._reverse(this[_buffer], this[_length], writeIndex);
        typed_buffer.TypedDataBuffer._reverse(this[_buffer], index, writeIndex);
        this[_length] = writeIndex;
        return;
      }
      static _reverse(buffer, start, end) {
        end = end - 1;
        while (start < end) {
          let first = buffer[$_get](start);
          let last = buffer[$_get](end);
          buffer[$_set](end, first);
          buffer[$_set](start, last);
          start = start + 1;
          end = end - 1;
        }
      }
      [_addAll](values, start = 0, end = null) {
        if (core.List.is(values)) end == null ? end = values[$length] : null;
        if (end != null) {
          this[_insertKnownLength](this[_length], values, start, end);
          return;
        }
        let i = 0;
        for (let value of values) {
          if (i >= start) this.add(value);
          i = i + 1;
        }
        if (i < start) dart.throw(new core.StateError.new("Too few elements"));
      }
      [_insertKnownLength](index, values, start, end) {
        if (core.List.is(values)) {
          if (start > values[$length] || end > values[$length]) {
            dart.throw(new core.StateError.new("Too few elements"));
          }
        }
        let valuesLength = end - start;
        let newLength = this[_length] + valuesLength;
        this[_ensureCapacity](newLength);
        this[_buffer][$setRange](index + valuesLength, this[_length] + valuesLength, this[_buffer], index);
        this[_buffer][$setRange](index, index + valuesLength, values, start);
        this[_length] = newLength;
      }
      insert(index, element) {
        E.as(element);
        if (index < 0 || index > this[_length]) {
          dart.throw(new core.RangeError.range(index, 0, this[_length]));
        }
        if (this[_length] < this[_buffer][$length]) {
          this[_buffer][$setRange](index + 1, this[_length] + 1, this[_buffer], index);
          this[_buffer][$_set](index, element);
          this[_length] = this[_length] + 1;
          return;
        }
        let newBuffer = this[_createBiggerBuffer](null);
        newBuffer[$setRange](0, index, this[_buffer]);
        newBuffer[$setRange](index + 1, this[_length] + 1, this[_buffer], index);
        newBuffer[$_set](index, element);
        this[_length] = this[_length] + 1;
        this[_buffer] = newBuffer;
      }
      [_ensureCapacity](requiredCapacity) {
        if (requiredCapacity <= this[_buffer][$length]) return;
        let newBuffer = this[_createBiggerBuffer](requiredCapacity);
        newBuffer[$setRange](0, this[_length], this[_buffer]);
        this[_buffer] = newBuffer;
      }
      [_createBiggerBuffer](requiredCapacity) {
        let newLength = this[_buffer][$length] * 2;
        if (requiredCapacity != null && dart.notNull(newLength) < dart.notNull(requiredCapacity)) {
          newLength = requiredCapacity;
        } else if (dart.notNull(newLength) < 8) {
          newLength = 8;
        }
        return this[_createBuffer$](newLength);
      }
      [_grow$0](length) {
        let t45;
        this[_buffer] = (t45 = this[_createBiggerBuffer](null), (() => {
          t45[$setRange](0, length, this[_buffer]);
          return t45;
        })());
      }
      setRange(start, end, iterable, skipCount = 0) {
        __t$IterableOfE().as(iterable);
        if (end > this[_length]) dart.throw(new core.RangeError.range(end, 0, this[_length]));
        this[_setRange](start, end, iterable, skipCount);
      }
      [_setRange](start, end, source, skipCount) {
        if (__t$TypedDataBufferOfE().is(source)) {
          this[_buffer][$setRange](start, end, source[_buffer], skipCount);
        } else {
          this[_buffer][$setRange](start, end, source, skipCount);
        }
      }
      get elementSizeInBytes() {
        return this[_typedBuffer][$elementSizeInBytes];
      }
      get lengthInBytes() {
        return this[_length] * this[_typedBuffer][$elementSizeInBytes];
      }
      get offsetInBytes() {
        return this[_typedBuffer][$offsetInBytes];
      }
      get buffer() {
        return this[_typedBuffer][$buffer];
      }
    }
    (TypedDataBuffer.new = function(buffer) {
      this[_buffer] = buffer;
      this[_length] = buffer[$length];
      ;
    }).prototype = TypedDataBuffer.prototype;
    dart.addTypeTests(TypedDataBuffer);
    TypedDataBuffer.prototype[_is_TypedDataBuffer_default] = true;
    dart.addTypeCaches(TypedDataBuffer);
    dart.setMethodSignature(TypedDataBuffer, () => ({
      __proto__: dart.getMethods(TypedDataBuffer.__proto__),
      _get: dart.fnType(E, [core.int]),
      [$_get]: dart.fnType(E, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [_add$0]: dart.fnType(dart.void, [E]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      insertAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      [$insertAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      [_addAll]: dart.fnType(dart.void, [core.Iterable$(E)], [core.int, dart.nullable(core.int)]),
      [_insertKnownLength]: dart.fnType(dart.void, [core.int, core.Iterable$(E), core.int, core.int]),
      [_ensureCapacity]: dart.fnType(dart.void, [core.int]),
      [_createBiggerBuffer]: dart.fnType(core.List$(E), [dart.nullable(core.int)]),
      [_grow$0]: dart.fnType(dart.void, [core.int]),
      [_setRange]: dart.fnType(dart.void, [core.int, core.int, core.Iterable$(E), core.int])
    }));
    dart.setStaticMethodSignature(TypedDataBuffer, () => ['_reverse']);
    dart.setGetterSignature(TypedDataBuffer, () => ({
      __proto__: dart.getGetters(TypedDataBuffer.__proto__),
      [_typedBuffer]: typed_data.TypedData,
      length: core.int,
      [$length]: core.int,
      elementSizeInBytes: core.int,
      lengthInBytes: core.int,
      offsetInBytes: core.int,
      buffer: typed_data.ByteBuffer
    }));
    dart.setSetterSignature(TypedDataBuffer, () => ({
      __proto__: dart.getSetters(TypedDataBuffer.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(TypedDataBuffer, I[82]);
    dart.setFieldSignature(TypedDataBuffer, () => ({
      __proto__: dart.getFields(TypedDataBuffer.__proto__),
      [_buffer]: dart.fieldType(core.List$(E)),
      [_length]: dart.fieldType(core.int)
    }));
    dart.setStaticFieldSignature(TypedDataBuffer, () => ['_initialLength']);
    dart.defineExtensionMethods(TypedDataBuffer, [
      '_get',
      '_set',
      'add',
      'addAll',
      'insertAll',
      'insert',
      'setRange'
    ]);
    dart.defineExtensionAccessors(TypedDataBuffer, ['length']);
    return TypedDataBuffer;
  });
  typed_buffer.TypedDataBuffer = typed_buffer.TypedDataBuffer$();
  dart.defineLazy(typed_buffer.TypedDataBuffer, {
    /*typed_buffer.TypedDataBuffer._initialLength*/get _initialLength() {
      return 8;
    }
  }, false);
  dart.addTypeTests(typed_buffer.TypedDataBuffer, _is_TypedDataBuffer_default);
  typed_buffer._IntBuffer = class _IntBuffer extends typed_buffer.TypedDataBuffer$(core.int) {
    get [_defaultValue$]() {
      return 0;
    }
  };
  (typed_buffer._IntBuffer.new = function(buffer) {
    typed_buffer._IntBuffer.__proto__.new.call(this, buffer);
    ;
  }).prototype = typed_buffer._IntBuffer.prototype;
  dart.addTypeTests(typed_buffer._IntBuffer);
  dart.addTypeCaches(typed_buffer._IntBuffer);
  dart.setGetterSignature(typed_buffer._IntBuffer, () => ({
    __proto__: dart.getGetters(typed_buffer._IntBuffer.__proto__),
    [_defaultValue$]: core.int
  }));
  dart.setLibraryUri(typed_buffer._IntBuffer, I[82]);
  typed_buffer._FloatBuffer = class _FloatBuffer extends typed_buffer.TypedDataBuffer$(core.double) {
    get [_defaultValue$]() {
      return 0;
    }
  };
  (typed_buffer._FloatBuffer.new = function(buffer) {
    typed_buffer._FloatBuffer.__proto__.new.call(this, buffer);
    ;
  }).prototype = typed_buffer._FloatBuffer.prototype;
  dart.addTypeTests(typed_buffer._FloatBuffer);
  dart.addTypeCaches(typed_buffer._FloatBuffer);
  dart.setGetterSignature(typed_buffer._FloatBuffer, () => ({
    __proto__: dart.getGetters(typed_buffer._FloatBuffer.__proto__),
    [_defaultValue$]: core.double
  }));
  dart.setLibraryUri(typed_buffer._FloatBuffer, I[82]);
  typed_buffer.Uint8Buffer = class Uint8Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint8Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeUint8List.new(size);
    }
  };
  (typed_buffer.Uint8Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint8Buffer.__proto__.new.call(this, _native_typed_data.NativeUint8List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint8Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint8Buffer);
  dart.addTypeCaches(typed_buffer.Uint8Buffer);
  dart.setMethodSignature(typed_buffer.Uint8Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint8Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint8List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint8Buffer, I[82]);
  typed_buffer.Int8Buffer = class Int8Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int8Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeInt8List.new(size);
    }
  };
  (typed_buffer.Int8Buffer.new = function(initialLength = 0) {
    typed_buffer.Int8Buffer.__proto__.new.call(this, _native_typed_data.NativeInt8List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int8Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int8Buffer);
  dart.addTypeCaches(typed_buffer.Int8Buffer);
  dart.setMethodSignature(typed_buffer.Int8Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int8Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int8List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int8Buffer, I[82]);
  typed_buffer.Uint8ClampedBuffer = class Uint8ClampedBuffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint8ClampedBuffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeUint8ClampedList.new(size);
    }
  };
  (typed_buffer.Uint8ClampedBuffer.new = function(initialLength = 0) {
    typed_buffer.Uint8ClampedBuffer.__proto__.new.call(this, _native_typed_data.NativeUint8ClampedList.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint8ClampedBuffer.prototype;
  dart.addTypeTests(typed_buffer.Uint8ClampedBuffer);
  dart.addTypeCaches(typed_buffer.Uint8ClampedBuffer);
  dart.setMethodSignature(typed_buffer.Uint8ClampedBuffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint8ClampedBuffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint8ClampedList, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint8ClampedBuffer, I[82]);
  typed_buffer.Uint16Buffer = class Uint16Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint16Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeUint16List.new(size);
    }
  };
  (typed_buffer.Uint16Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint16Buffer.__proto__.new.call(this, _native_typed_data.NativeUint16List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint16Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint16Buffer);
  dart.addTypeCaches(typed_buffer.Uint16Buffer);
  dart.setMethodSignature(typed_buffer.Uint16Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint16Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint16List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint16Buffer, I[82]);
  typed_buffer.Int16Buffer = class Int16Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int16Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeInt16List.new(size);
    }
  };
  (typed_buffer.Int16Buffer.new = function(initialLength = 0) {
    typed_buffer.Int16Buffer.__proto__.new.call(this, _native_typed_data.NativeInt16List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int16Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int16Buffer);
  dart.addTypeCaches(typed_buffer.Int16Buffer);
  dart.setMethodSignature(typed_buffer.Int16Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int16Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int16List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int16Buffer, I[82]);
  typed_buffer.Uint32Buffer = class Uint32Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint32Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeUint32List.new(size);
    }
  };
  (typed_buffer.Uint32Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint32Buffer.__proto__.new.call(this, _native_typed_data.NativeUint32List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint32Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint32Buffer);
  dart.addTypeCaches(typed_buffer.Uint32Buffer);
  dart.setMethodSignature(typed_buffer.Uint32Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint32Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint32List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint32Buffer, I[82]);
  typed_buffer.Int32Buffer = class Int32Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int32Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeInt32List.new(size);
    }
  };
  (typed_buffer.Int32Buffer.new = function(initialLength = 0) {
    typed_buffer.Int32Buffer.__proto__.new.call(this, _native_typed_data.NativeInt32List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int32Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int32Buffer);
  dart.addTypeCaches(typed_buffer.Int32Buffer);
  dart.setMethodSignature(typed_buffer.Int32Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int32Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int32List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int32Buffer, I[82]);
  typed_buffer.Uint64Buffer = class Uint64Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint64Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return typed_data.Uint64List.new(size);
    }
  };
  (typed_buffer.Uint64Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint64Buffer.__proto__.new.call(this, typed_data.Uint64List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint64Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint64Buffer);
  dart.addTypeCaches(typed_buffer.Uint64Buffer);
  dart.setMethodSignature(typed_buffer.Uint64Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint64Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Uint64List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint64Buffer, I[82]);
  typed_buffer.Int64Buffer = class Int64Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int64Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return typed_data.Int64List.new(size);
    }
  };
  (typed_buffer.Int64Buffer.new = function(initialLength = 0) {
    typed_buffer.Int64Buffer.__proto__.new.call(this, typed_data.Int64List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int64Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int64Buffer);
  dart.addTypeCaches(typed_buffer.Int64Buffer);
  dart.setMethodSignature(typed_buffer.Int64Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int64Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int64List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int64Buffer, I[82]);
  typed_buffer.Float32Buffer = class Float32Buffer extends typed_buffer._FloatBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Float32Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeFloat32List.new(size);
    }
  };
  (typed_buffer.Float32Buffer.new = function(initialLength = 0) {
    typed_buffer.Float32Buffer.__proto__.new.call(this, _native_typed_data.NativeFloat32List.new(initialLength));
    ;
  }).prototype = typed_buffer.Float32Buffer.prototype;
  dart.addTypeTests(typed_buffer.Float32Buffer);
  dart.addTypeCaches(typed_buffer.Float32Buffer);
  dart.setMethodSignature(typed_buffer.Float32Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Float32Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Float32List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Float32Buffer, I[82]);
  typed_buffer.Float64Buffer = class Float64Buffer extends typed_buffer._FloatBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Float64Buffer.new(initialLength);
    }
    [_createBuffer$](size) {
      return _native_typed_data.NativeFloat64List.new(size);
    }
  };
  (typed_buffer.Float64Buffer.new = function(initialLength = 0) {
    typed_buffer.Float64Buffer.__proto__.new.call(this, _native_typed_data.NativeFloat64List.new(initialLength));
    ;
  }).prototype = typed_buffer.Float64Buffer.prototype;
  dart.addTypeTests(typed_buffer.Float64Buffer);
  dart.addTypeCaches(typed_buffer.Float64Buffer);
  dart.setMethodSignature(typed_buffer.Float64Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Float64Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Float64List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Float64Buffer, I[82]);
  typed_buffer.Int32x4Buffer = class Int32x4Buffer extends typed_buffer.TypedDataBuffer$(typed_data.Int32x4) {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int32x4Buffer.new(initialLength);
    }
    get [_defaultValue$]() {
      return typed_buffer.Int32x4Buffer._zero;
    }
    [_createBuffer$](size) {
      return new _native_typed_data.NativeInt32x4List.new(size);
    }
  };
  (typed_buffer.Int32x4Buffer.new = function(initialLength = 0) {
    typed_buffer.Int32x4Buffer.__proto__.new.call(this, new _native_typed_data.NativeInt32x4List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int32x4Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int32x4Buffer);
  dart.addTypeCaches(typed_buffer.Int32x4Buffer);
  dart.setMethodSignature(typed_buffer.Int32x4Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int32x4Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Int32x4List, [core.int])
  }));
  dart.setGetterSignature(typed_buffer.Int32x4Buffer, () => ({
    __proto__: dart.getGetters(typed_buffer.Int32x4Buffer.__proto__),
    [_defaultValue$]: typed_data.Int32x4
  }));
  dart.setLibraryUri(typed_buffer.Int32x4Buffer, I[82]);
  dart.setStaticFieldSignature(typed_buffer.Int32x4Buffer, () => ['_zero']);
  dart.defineLazy(typed_buffer.Int32x4Buffer, {
    /*typed_buffer.Int32x4Buffer._zero*/get _zero() {
      return new _native_typed_data.NativeInt32x4.new(0, 0, 0, 0);
    }
  }, false);
  typed_buffer.Float32x4Buffer = class Float32x4Buffer extends typed_buffer.TypedDataBuffer$(typed_data.Float32x4) {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Float32x4Buffer.new(initialLength);
    }
    get [_defaultValue$]() {
      return new _native_typed_data.NativeFloat32x4.zero();
    }
    [_createBuffer$](size) {
      return new _native_typed_data.NativeFloat32x4List.new(size);
    }
  };
  (typed_buffer.Float32x4Buffer.new = function(initialLength = 0) {
    typed_buffer.Float32x4Buffer.__proto__.new.call(this, new _native_typed_data.NativeFloat32x4List.new(initialLength));
    ;
  }).prototype = typed_buffer.Float32x4Buffer.prototype;
  dart.addTypeTests(typed_buffer.Float32x4Buffer);
  dart.addTypeCaches(typed_buffer.Float32x4Buffer);
  dart.setMethodSignature(typed_buffer.Float32x4Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Float32x4Buffer.__proto__),
    [_createBuffer$]: dart.fnType(typed_data.Float32x4List, [core.int])
  }));
  dart.setGetterSignature(typed_buffer.Float32x4Buffer, () => ({
    __proto__: dart.getGetters(typed_buffer.Float32x4Buffer.__proto__),
    [_defaultValue$]: typed_data.Float32x4
  }));
  dart.setLibraryUri(typed_buffer.Float32x4Buffer, I[82]);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:flutter_bloc/flutter_bloc.dart": flutter_bloc,
    "package:flutter_app/bloc/task_bloc.dart": task_bloc,
    "package:flutter_app/screens/main_page.dart": main_page,
    "package:dio/dio.dart": dio,
    "file:///zapp/project/lib/bloc/api_bloc.dart": api_bloc,
    "file:///zapp/project/lib/screens/gallery_screen.dart": gallery_screen,
    "package:shared_preferences_web/shared_preferences_web.dart": shared_preferences_web,
    "package:bloc/bloc.dart": bloc,
    "package:provider/provider.dart": provider,
    "package:flutter_bloc/src/bloc_builder.dart": bloc_builder,
    "package:flutter_bloc/src/bloc_consumer.dart": bloc_consumer,
    "package:flutter_bloc/src/bloc_listener.dart": bloc_listener,
    "package:flutter_bloc/src/bloc_provider.dart": bloc_provider,
    "package:flutter_bloc/src/bloc_selector.dart": bloc_selector,
    "package:flutter_bloc/src/multi_bloc_listener.dart": multi_bloc_listener,
    "package:flutter_bloc/src/multi_bloc_provider.dart": multi_bloc_provider,
    "package:flutter_bloc/src/multi_repository_provider.dart": multi_repository_provider,
    "package:flutter_bloc/src/repository_provider.dart": repository_provider,
    "package:flutter_app/models/task_model.dart": task_model,
    "package:shared_preferences/shared_preferences.dart": shared_preferences,
    "package:flutter_app/screens/create_card.dart": create_card,
    "package:flutter_app/screens/tasks_screen.dart": tasks_screen,
    "package:dio/src/adapter.dart": adapter,
    "package:dio/src/cancel_token.dart": cancel_token,
    "package:dio/src/dio.dart": dio$,
    "package:dio/src/dio_exception.dart": dio_exception,
    "package:dio/src/dio_mixin.dart": dio_mixin,
    "package:dio/src/form_data.dart": form_data,
    "package:dio/src/headers.dart": headers$,
    "package:dio/src/interceptors/log.dart": log,
    "package:dio/src/multipart_file.dart": multipart_file,
    "package:dio/src/options.dart": options$,
    "package:dio/src/parameter.dart": parameter,
    "package:dio/src/redirect_record.dart": redirect_record,
    "package:dio/src/response.dart": response$,
    "package:dio/src/transformer.dart": transformer,
    "package:dio/src/transformers/background_transformer.dart": background_transformer,
    "package:dio/src/transformers/sync_transformer.dart": sync_transformer,
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart": shared_preferences_platform_interface,
    "package:shared_preferences_platform_interface/types.dart": types,
    "package:bloc/src/bloc.dart": bloc$,
    "package:bloc/src/bloc_observer.dart": bloc_observer,
    "package:bloc/src/change.dart": change,
    "package:bloc/src/cubit.dart": cubit,
    "package:bloc/src/transition.dart": transition,
    "package:provider/src/async_provider.dart": async_provider,
    "package:provider/src/change_notifier_provider.dart": change_notifier_provider,
    "package:provider/src/consumer.dart": consumer,
    "package:provider/src/listenable_provider.dart": listenable_provider,
    "package:provider/src/provider.dart": provider$,
    "package:provider/src/proxy_provider.dart": proxy_provider,
    "package:provider/src/reassemble_handler.dart": reassemble_handler,
    "package:provider/src/selector.dart": selector$,
    "package:provider/src/value_listenable_provider.dart": value_listenable_provider,
    "package:provider/single_child_widget.dart": single_child_widget,
    "package:folding_cell/folding_cell.dart": folding_cell,
    "package:flutter_app/screens/edit_card.dart": edit_card,
    "package:dio/src/adapters/browser_adapter.dart": browser_adapter,
    "package:dio/src/dio/dio_for_browser.dart": dio_for_browser,
    "package:dio/src/interceptors/imply_content_type.dart": imply_content_type,
    "package:dio/src/response/response_stream_handler.dart": response_stream_handler,
    "package:dio/src/progress_stream/browser_progress_stream.dart": browser_progress_stream,
    "package:dio/src/utils.dart": utils,
    "package:http_parser/http_parser.dart": http_parser,
    "package:dio/src/multipart_file/browser_multipart_file.dart": browser_multipart_file,
    "package:dio/src/compute/compute.dart": compute,
    "package:plugin_platform_interface/plugin_platform_interface.dart": plugin_platform_interface,
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart": method_channel_shared_preferences,
    "package:nested/nested.dart": nested,
    "package:folding_cell/folding_cell/widget.dart": widget,
    "package:http_parser/src/authentication_challenge.dart": authentication_challenge,
    "package:http_parser/src/case_insensitive_map.dart": case_insensitive_map,
    "package:http_parser/src/chunked_coding.dart": chunked_coding,
    "package:http_parser/src/http_date.dart": http_date,
    "package:http_parser/src/media_type.dart": media_type,
    "package:dio/src/compute/compute_web.dart": compute_web,
    "package:http_parser/src/scan.dart": scan,
    "package:http_parser/src/utils.dart": utils$,
    "package:http_parser/src/chunked_coding/decoder.dart": decoder,
    "package:http_parser/src/chunked_coding/encoder.dart": encoder,
    "package:typed_data/typed_data.dart": typed_data$,
    "package:http_parser/src/chunked_coding/charcodes.dart": charcodes,
    "package:typed_data/src/typed_queue.dart": typed_queue,
    "package:typed_data/typed_buffers.dart": typed_buffers,
    "package:typed_data/src/typed_buffer.dart": typed_buffer
  }, {
    "package:dio/src/dio_mixin.dart": ["interceptor.dart"],
    "package:bloc/src/bloc.dart": ["bloc_base.dart", "bloc_overrides.dart", "emitter.dart"],
    "package:provider/src/provider.dart": ["deferred_inherited_provider.dart", "devtool.dart", "inherited_provider.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/bloc/task_bloc.dart","/zapp/pub/.pub_cache/hosted/pub.dev/bloc-8.1.4/lib/src/bloc_base.dart","/zapp/pub/.pub_cache/hosted/pub.dev/bloc-8.1.4/lib/src/bloc.dart","/zapp/project/lib/screens/main_page.dart","/zapp/pub/.pub_cache/hosted/pub.dev/bloc-8.1.4/lib/src/cubit.dart","/zapp/project/lib/bloc/api_bloc.dart","/zapp/project/lib/screens/gallery_screen.dart","/zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/shared_preferences_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_web-2.2.1/lib/shared_preferences_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_bloc-8.1.6/lib/src/bloc_builder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_bloc-8.1.6/lib/src/bloc_consumer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/nested-1.0.0/lib/nested.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_bloc-8.1.6/lib/src/bloc_listener.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_bloc-8.1.6/lib/src/bloc_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_bloc-8.1.6/lib/src/bloc_selector.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.2/lib/src/provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_bloc-8.1.6/lib/src/multi_bloc_listener.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_bloc-8.1.6/lib/src/multi_bloc_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_bloc-8.1.6/lib/src/multi_repository_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.2/lib/src/inherited_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/flutter_bloc-8.1.6/lib/src/repository_provider.dart","/zapp/project/lib/models/task_model.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences-2.2.2/lib/shared_preferences.dart","/zapp/project/lib/screens/create_card.dart","/zapp/project/lib/screens/tasks_screen.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/adapter.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/cancel_token.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/dio.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/dio_exception.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/dio_mixin.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/interceptor.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/form_data.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/headers.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/interceptors/log.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/multipart_file.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/options.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/parameter.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/redirect_record.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/response.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/transformer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/transformers/sync_transformer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/transformers/background_transformer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/types.dart","/zapp/pub/.pub_cache/hosted/pub.dev/bloc-8.1.4/lib/src/bloc_observer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/bloc-8.1.4/lib/src/bloc_overrides.dart","/zapp/pub/.pub_cache/hosted/pub.dev/bloc-8.1.4/lib/src/emitter.dart","/zapp/pub/.pub_cache/hosted/pub.dev/bloc-8.1.4/lib/src/change.dart","/zapp/pub/.pub_cache/hosted/pub.dev/bloc-8.1.4/lib/src/transition.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.2/lib/src/deferred_inherited_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.2/lib/src/async_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.2/lib/src/listenable_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.2/lib/src/change_notifier_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.2/lib/src/consumer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.2/lib/src/devtool.dart","/workspace/build/dart-sdk/packages/flutter/lib/src/widgets/framework.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.2/lib/src/proxy_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.2/lib/src/reassemble_handler.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.2/lib/src/selector.dart","/zapp/pub/.pub_cache/hosted/pub.dev/provider-6.1.2/lib/src/value_listenable_provider.dart","/zapp/project/lib/screens/edit_card.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/adapters/browser_adapter.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/dio/dio_for_browser.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/interceptors/imply_content_type.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/response/response_stream_handler.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/progress_stream/browser_progress_stream.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/multipart_file/browser_multipart_file.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/compute/compute.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/method_channel_shared_preferences.dart","/zapp/pub/.pub_cache/hosted/pub.dev/folding_cell-1.0.2/lib/folding_cell/widget.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/authentication_challenge.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/case_insensitive_map.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/http_date.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/media_type.dart","/zapp/pub/.pub_cache/hosted/pub.dev/dio-5.4.3+1/lib/src/compute/compute_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/scan.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding/decoder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding/encoder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.2/lib/src/chunked_coding/charcodes.dart","/zapp/pub/.pub_cache/hosted/pub.dev/typed_data-1.3.2/lib/src/typed_queue.dart","/zapp/pub/.pub_cache/hosted/pub.dev/typed_data-1.3.2/lib/src/typed_buffer.dart"],"names":[],"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ACc;UACb;UACI;UACK;UACA;AAElB,YAAO,iBACL,IAAI,SACE,IAAI,mBACO,eAAe,WACvB,gCAAa,OAAO,OAAO,gBACvB,WAAW,kBACR,cAAc,qBACX,iBAAiB;IAExC;cAIM;UACI;UACC;UACI;UACK;UACA;AAElB,YAAO,oBACL,GAAG,SACG,IAAI,WACD,gCAAa,OAAO,OAAO,gBACvB,WAAW,kBACR,cAAc,qBACX,iBAAiB;IAExC;YAIS;UACC;UACc;UACb;UACI;AAEb,YAAO,iBACL,IAAI,SACE,IAAI,mBACO,eAAe,WACvB,gCAAa,QAAQ,OAAO,gBACxB,WAAW;IAE5B;eAIM;UACI;UACC;UACI;AAEb,YAAO,oBACL,GAAG,SACG,IAAI,WACD,gCAAa,QAAQ,OAAO,gBACxB,WAAW;IAE5B;cAIS;UACC;UACc;UACb;UACI;AAEb,YAAO,iBACL,IAAI,SACE,IAAI,mBACO,eAAe,WACvB,gCAAa,UAAU,OAAO,gBAC1B,WAAW;IAE5B;iBAIM;UACI;UACC;UACI;AAEb,YAAO,oBACL,GAAG,SACG,IAAI,WACD,gCAAa,UAAU,OAAO,gBAC1B,WAAW;IAE5B;aAIS;UACC;UACc;UACb;UACI;UACK;UACA;AAElB,YAAO,iBACL,IAAI,SACE,IAAI,mBACO,eAAe,WACvB,gCAAa,SAAS,OAAO,gBACzB,WAAW,kBACR,cAAc,qBACX,iBAAiB;IAExC;gBAIM;UACI;UACC;UACI;UACK;UACA;AAElB,YAAO,oBACL,GAAG,SACG,IAAI,WACD,gCAAa,SAAS,OAAO,gBACzB,WAAW,kBACR,cAAc,qBACX,iBAAiB;IAExC;gBAIM,KACI;UACU;UACL;UACR;UACE;UACC;UACC;AAET,YAAO,eACL,AAAI,GAAD,aACH,QAAQ,sBACW,iBAAiB,gBACtB,YAAY,iBACX,aAAa,eACf,WAAW,QAClB,IAAI,WACD,OAAO;IAEpB;aAIS,SACC;UACU;UACI;UACT;UACR;UACE;UACC;UACC;AAEiB,MAA1B,WAAM;IACR;kBAIM;UACI;UACK;UACJ;UACS;UACA;AAElB,YAAO,iBACL,AAAI,GAAD,oBACG,I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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    flutter_bloc: flutter_bloc,
    bloc__task_bloc: task_bloc,
    screens__main_page: main_page,
    dio: dio,
    zapp__project__lib__bloc__api_bloc: api_bloc,
    zapp__project__lib__screens__gallery_screen: gallery_screen,
    shared_preferences_web: shared_preferences_web,
    bloc: bloc,
    provider: provider,
    src__bloc_builder: bloc_builder,
    src__bloc_consumer: bloc_consumer,
    src__bloc_listener: bloc_listener,
    src__bloc_provider: bloc_provider,
    src__bloc_selector: bloc_selector,
    src__multi_bloc_listener: multi_bloc_listener,
    src__multi_bloc_provider: multi_bloc_provider,
    src__multi_repository_provider: multi_repository_provider,
    src__repository_provider: repository_provider,
    models__task_model: task_model,
    shared_preferences: shared_preferences,
    screens__create_card: create_card,
    screens__tasks_screen: tasks_screen,
    src__adapter: adapter,
    src__cancel_token: cancel_token,
    src__dio: dio$,
    src__dio_exception: dio_exception,
    src__dio_mixin: dio_mixin,
    src__form_data: form_data,
    src__headers: headers$,
    src__interceptors__log: log,
    src__multipart_file: multipart_file,
    src__options: options$,
    src__parameter: parameter,
    src__redirect_record: redirect_record,
    src__response: response$,
    src__transformer: transformer,
    src__transformers__background_transformer: background_transformer,
    src__transformers__sync_transformer: sync_transformer,
    shared_preferences_platform_interface: shared_preferences_platform_interface,
    types: types,
    src__bloc: bloc$,
    src__bloc_observer: bloc_observer,
    src__change: change,
    src__cubit: cubit,
    src__transition: transition,
    src__async_provider: async_provider,
    src__change_notifier_provider: change_notifier_provider,
    src__consumer: consumer,
    src__listenable_provider: listenable_provider,
    src__provider: provider$,
    src__proxy_provider: proxy_provider,
    src__reassemble_handler: reassemble_handler,
    src__selector: selector$,
    src__value_listenable_provider: value_listenable_provider,
    single_child_widget: single_child_widget,
    folding_cell: folding_cell,
    screens__edit_card: edit_card,
    src__adapters__browser_adapter: browser_adapter,
    src__dio__dio_for_browser: dio_for_browser,
    src__interceptors__imply_content_type: imply_content_type,
    src__response__response_stream_handler: response_stream_handler,
    src__progress_stream__browser_progress_stream: browser_progress_stream,
    src__utils: utils,
    http_parser: http_parser,
    src__multipart_file__browser_multipart_file: browser_multipart_file,
    src__compute__compute: compute,
    plugin_platform_interface: plugin_platform_interface,
    method_channel_shared_preferences: method_channel_shared_preferences,
    nested: nested,
    folding_cell__widget: widget,
    src__authentication_challenge: authentication_challenge,
    src__case_insensitive_map: case_insensitive_map,
    src__chunked_coding: chunked_coding,
    src__http_date: http_date,
    src__media_type: media_type,
    src__compute__compute_web: compute_web,
    src__scan: scan,
    src__utils: utils$,
    src__chunked_coding__decoder: decoder,
    src__chunked_coding__encoder: encoder,
    typed_data: typed_data$,
    src__chunked_coding__charcodes: charcodes,
    src__typed_queue: typed_queue,
    typed_buffers: typed_buffers,
    src__typed_buffer: typed_buffer
  };
}));

//# sourceMappingURL=main.js.map
